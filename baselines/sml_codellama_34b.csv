The code allows the owner to withdraw a specified amount of Ether from the contract
Adds a new wallet address to the list of existing wallets
This smart contract code allows users to transfer tokens while also participating in a jackpot by setting a custom reserving percentage
"This smart contract code allows the owner to redeem a specified amount of tokens from an array of addresses, and emits an event if the balance of any address is cleared"
Returns true if the game is in stopped mode
WithdrawDividendsAndCoupons is a function that allows the user to withdraw their accrued dividends and coupons
"This smart contract code allows users to start multiple auctions simultaneously, providing greater anonymity and privacy"
"This smart contract code is a function named ""undelegate"" that takes in three parameters: an ID for a pledge, an amount of tokens, and a quantity (q) representing the number of delegations to remove from the pledge"
"A function named canCancelBet checks if a user's bet can be cancelled by verifying that there are at least three bets, the user's bet is not the first or last one, and the user is the last bettor in the queue"
"A function named ""getVendors"" is defined, which takes three parameters: ""_from"", ""_limit"", and ""_direction"""
A user is eligible for a cluster reward if they have not withdrawn from the current segment for at least 1000 segments
This smart contract code allows the owner to delay the timelocks for all accounts by a specified amount
A function that takes in an unsigned integer and returns its decimal string representation
Burns all unsold tokens
"The code calculates the amount in wei based on a token amount, price multiplier, and price divisor"
Burn away the specified amount of DARFtoken tokens
"A function named ""receiveApproval"" is defined, which takes four parameters: ""_from"", ""_value"", ""_token"", and ""_extraData"""
"The code defines a function named ""totalSupply"" that returns the total number of tokens in existence"
"After the crowdsale ends, the finalize function can be called to transfer all funds to the wallet and emit a Finalized event"
This smart contract code converts a given number into a string with its hexadecimal representation
This smart contract code allows the owner to set an address as an airdrop agent and specify whether they are authorized to call the airdrop functions
"A function named ""balanceOf"" is defined, which takes an address as input and returns the balance of that address"
The code sets the fallback function mode to a new value
"The code defines a function called ""getNumOfRickHolders"" that returns the number of Rick holders in a Portal Gun"
"The code sets the prices for creating, editing, and activating a contract"
A new passport logic implementation is set as the current one
"This smart contract code includes a function named ""setCurrentStage"" that can only be executed by the owner of the contract"
The smart contract code allows the owner to update the participant cap for tier 2
"A function named ""getMyGameInfo"" is defined as a public view that returns three uint256 values"
A function named createTokensForOtherCrypto is used to issue tokens to investors who have paid in other cryptocurrencies
"A function named ""isBitSet"" takes two parameters, a uint256 and a uint8, and returns a boolean value indicating whether the bit at the specified position in the uint256 is set"
"A function called ""PreSaleZNA"" is defined, which sets the variable ""paused"" to true"
"A function named ""name"" is defined as an external view that returns a string"
"A function named ""userHasKYC"" that takes an address as a parameter and returns a boolean value indicating whether the user has KYC approval or not"
Dev can stop selling but doesn't disable withdrawing
"A function named ""setTokenPrice"" is used by the owner to set the price of a token in ETH"
The code allows the owner of a smart contract to transfer the funds that have been raised
A token destructible is a smart contract that allows for the destruction of tokens
Returns the balance of a payee
"A new CSCToken instance is created with a total supply of 10 billion tokens, and the balances of two addresses are set to 5 billion tokens each"
"A user can update their own secret note by calling the ""setNote"" function and providing a new content for the note"
"The code sets a new ICO start time for the smart contract, with restrictions on when it can be changed and what the minimum value should be"
The code sets an exchange oracle address for the AIUR token after the crowdsale
"A function named WithdrawAndTransferToBankroll is public, which withdraws from ZethrContract and sends the funds to the bankroll"
ForwardEtherToOwner is a function that sends the Ether stored in the smart contract to the owner's address
"This smart contract code allows the owner to change the website's URL by calling the ""changeWebsite"" function and passing in a new string as an argument"
The code returns a boolean indicating whether the given value is present in the set
The code sets the wallet where ICO ETH funds are sent
This code revokes the authorization of a specific address (_agent) to mint debt tokens
Creates a new centralized oracle contract and returns the Oracle contract
The code sets the purchase price of tokens by a contract
"The function ""getPlayerAccount"" returns various information about a player's account, including their ID, ETH balance, and MFCoin vault balances"
A merchant can withdraw funds to a beneficiary's address through a transaction
"This smart contract code checks if the crowdsale has reached its goal or time limit, and ends the campaign by returning a boolean value"
A function named isTicketValid checks whether a given address can handle a specific ticket type by comparing the contractor and expiration date of the ticket
The code returns the number of ads
"The code defines a function called ""addToBalances"" that takes two arguments, an address and a token value"
"The code defines a function called ""getLeftChildI"" that takes an unsigned integer as input and returns the index of its left child"
"A token owner can initiate the final distribution by calling the ""windUp"" function, which will distribute the remaining tokens and Ether balance among all holders based on their ownership percentage"
Returns the number of deployed coins
"A function named ""reclaimToken"" is written in Solidity, which allows the owner of a smart contract to reclaim any ERC20-compatible tokens that have been accidentally sent to the contract"
The code sets the price of a gift to a new value
"A function named ""checkLockedBalance"" checks if a transfer of a certain amount of tokens from an address to another is valid, taking into account the locked balance of the sender and the receiver"
"The function ""getBetAmount"" retrieves the total bet amount placed by a specific address for a particular team"
"This smart contract code defines a function named ""toString"" that takes an unsigned integer argument ""_base"" and returns a string representation of the number in base 10"
"The code checks whether the input address ""buyer"" is in a list of pre-approved addresses, and returns true if it is"
"A function named ""finishMinting"" is used to stop the minting of tokens"
"A function named ""approve"" allows the owner of a smart contract to approve an account to spend a certain amount of tokens"
"This smart contract code is for a crowdsale, where it allows users to purchase tokens in exchange for Ether"
"This smart contract function allows the Committee Room to upgrade the application by updating the address of the new Committee Room, Share Manager, and Token Manager"
Mint new tokens and send them to a specified address
"The smart contract code includes a function named ""getUsedAPI"" that returns the name of the API used for testing"
"The code allows the owner to reset the lock on a specific address, making it possible to transfer tokens from that address again"
The code allows the owner to unlock an account and transfer tokens from it
"The smart contract code includes a function called ""finalizeSale"" that is only accessible to the admin"
The code allows only the owner to change the admin wallet address
"The code releases a function called ""release"" that is publicly accessible and can only be executed by the owner"
"This function allows the owner of a smart contract to set an existing token as delisted, meaning it will no longer be available for trading or other purposes within the contract"
"A function named ""takeOwnership"" is defined, which takes a single argument ""_tokenId"" of type uint256 and returns nothing"
"The code allows the owner to mint new tokens, returning a boolean value to indicate whether the minting was successful"
The code allows the owner of a specific zone to set the price at which they are willing to sell it
The code allows the owner to change the market fees
"The function ""getPublicSaleTokensAvailable"" returns the number of public sale tokens that are still available for purchase"
"Disable the transfer of ownership by setting the ""transferEnabled"" variable to false"
The code calculates the total number of carrots for a player by adding up their recorded and unrecorded carrot amounts
"This smart contract code allows the owner to designate specific addresses as ""burners,"" which are authorized to burn tokens"
The code returns the remaining possible sale amount for a given wallet address
"The function ""getStatus"" checks if the contract is completed, expired or pending based on the current timestamp and returns the corresponding status"
The code calculates the total amount of a jackpot after subtracting fees and cascading percentages
The code transfers token amounts to other ICO platforms
"The function ""resolveErrorReport"" is used to resolve an error report for a given request ID"
Add owners to the list
The code allows users to withdraw their funds from a smart contract
A function that returns the amount of tokens that can be withdrawn on a specific date based on the current date and unlock dates
"A function named ""secondaryICO"" allows the owner of a smart contract to override the ICO (Initial Coin Offering) dates, allowing for a secondary ICO"
"This smart contract function, ""balanceOf,"" returns the token balance of a specified user address"
The code transfers tokens to a new owner if the contract has enough balance and the transfer is approved by the owner
"The function ""defineTranchePeriod"" returns the current tranche number as a uint256 value, based on the value of ""tranches"
This smart contract code allows the owner to relist all genesis sales at a new price
Returns the Ethereum address of a given investor
Calculate the remaining tokens and cost after deducting various bonuses from the hard cap and total distributed tokens.
Pause Round C Set ICO status to RoundCPaused.
Transfer the WeTrust signer of NFT contract to a new address.
Validates parameters and starts crowdsale.
Convenient function for reading the token's owner.
"The function retrieves users awaiting token transfers, exclusively accessible by the contract owner, and operates in write mode."
Function used by ICO Contract to send ether to wallet.
Checks to see if the sender is redemption ready by verifying that there is a balance and block associated with the sender.
"Function internal to manage fund movement, requiring transfer of a specified amount of ERC20 tokens from one address to another."
Return True if the call correctly returned the expected value.
Sets the wallet to hold unsold tokens at the end of ICO.
"This function returns all pixel's data, including ID, owner address, RGB color values, price, and text associated with a specific pixel ID."
Increments the contract's balance by the amount of Ether sent to it.
"Withdrawal function for ERC20 tokens that allows existing members to withdraw a specified amount of tokens, updating their withdrawal balance and the total withdrawn amount for the token."
"The function ""registeredUsers"" is an external function that allows access to the struct ""users"" by returning an array of unique addresses."
"The function ""state"" displays the current contract state in human-readable form."
"Transfer a specified value from customer address A to customer address B, with sender verification for security."
"The ""tokensSold"" function calculates the total number of tokens sold by subtracting the balance of tokens held by the contract from the total tokens available for sale out of 10 billion."
Check if all contributor's token are successfully distributed.
"The function ""startRoundD"" sets the ICO status to ""RoundDStarted"" only if the current status is either ""RoundCFinished"" or ""RoundDPaused,"" and emits a log event."
"Get round stats by index - returns round number, winner's address, position, and block number."
Function for transferring tokens from the contract to any address.
Returns the amount of tokens allowed by the owner to the spender in an ERC20 contract.
Freeze or Unfreeze an address.
Transfers given amount of currency to the beneficiary.
Change pre-sale end date.
Get the number of points held by a player.
Transfers the current balance to the cash out wallet and terminates the contract.
The function sets the feature status to a new value after verifying the status change and emitting an event. [feature status is set to false by default]
"Mint function in the contract allows a designated minter to increase the token balance of a specified recipient without exceeding the maximum token amount, updating the total supply accordingly."
"Returns the minimum amount that can be sent, with no security checks or validations mentioned in the provided code snippet."
Get signature requirements for administrative changes; return the number of signatures required as a uint256.
Swap the specified jingle token with the last token in the owner's array and remove the last element from the array.
Check if pre-sale or main sale are running.
Get a block sell price set by block owner.
Calculates the dividends amount for a specific holder based on pool balances and dividends per token per round.
"The function ""state"" returns the post deployment state of the contract."
"Private function to clear current approval of a given token ID, reverting if the provided address is not the actual owner of the token."
Check if the specified account has any pending orders.
Public function to set any public metadata needed for XNR mainnet purposes without security checks or validation.
Overridden transferFrom method to facilitate emergency pausing.
Goal was reached return true if the crowdsale has raised enough money to be a success.
This function retrieves the total amount of vested tokens that are still locked for a specific address.
Approves tokens allocated to a beneficiary.
Get approved address for a token. Return the address that is approved for this token.
"Burn a specified amount of tokens, removing them irreversibly from the system, with security checks ensuring the sender has sufficient balance and only the master can execute the function."
"The function ""getPaycarnita"" returns the value of ""toPaycarnita"" without performing any security checks or validation."
Owner can remove allowance of designated presale contributor.
Allows anyone to transfer the Change tokens once trading has started.
Get list of transaction IDs within a specified range and return an array of these transaction IDs.
Executed when a purchase is ready to be executed.
"Burn function allows the contract owner to destroy a specified amount of tokens from the total supply if the owner holds enough tokens, with the corresponding event emitted."
"The function ""isRefAvailable"" allows the current user to check if a referral link is available for them."
Add member to blocksquare group.
Function to calculate the sale return amount using the Bancor formula.
Receive gambler's money and start betting.
"The function ""startNextEra"" allows the contract owner to initiate a new era in the Mokens contract, setting a new mint price and triggering the start of the era."
Update the ETH price for the token sale.
Return whether the paused state is active.
"The function `transferFrom` allows the transfer of tokens between addresses, with security checks ensuring that trading is open, the sender is the owner, or the sender is the community tokens address."
"Set a new admin by assigning the provided address, with a security check ensuring only the owner can execute this action."
"The function ""checkRole"" performs a security check to verify if the provided address has a specific role, and it reverts if the address does not possess that role."
Pops the first entry from the linked list and returns the removed node as a uint256.
Proxy function for updating consumable quantity in the main contract.
Transfer balance back to core contract.
Returns next transcoder in pool for a given transcoder.
Allows dev team to retrieve adminPool balance by transferring it to the adminAddress.
Buyer must buy within assigned batch period.
The function removes a role from an address.
This function safely sends the ETH by the passed parameters.
Extend parent behavior requiring purchase to respect the minimum and maximum contribution limit.
"Internal function to convert a hash to an Ethereum signed message, recover the signature, and validate it against the signer role, returning a boolean value."
Check whether a given block is mature.
"Update the multi-signature wallet address after validating that the new address is not zero, emitting an event for the address update, and returning true upon successful completion."
"Returns a specific hexadecimal number when the function ""identify"" is called externally."
Transfer tokens from one address to another and return true if the transfer was successful.
Retrieve the maximum amount that can be sent from the contract.
Withdraw all funds and kill fund smart contract.
Return true if the specified address has been refunded.
Transfers a part of the funds from the contract to the specified withdraw wallet address.
"Burns a specified number of PLTN tokens, performing security checks to ensure the owner is executing the function and that the contract is not stopped."
Called by the owner of the contract to allow tokens to be distributed.
Get number of empty indexes.
Adds a new activity account to the system.
Function for transferring tokens to a specific address with additional data.
Returns bonus for given amount.
Show value of referral of 2nd level percent.
Returns the appropriate token contract.
Owner can burn existing tokens after verifying that the sender has sufficient balance.
Check if team wallet is unlocked.
The function allows the owner to set the maximum amount of ether to accept in the contract.
"Initializes the KyberNetwork contract by setting the admin address, with a security check to ensure the admin address is not 0."
Allows the owner of the contract to pause acceptingDeposits.
Distribute ether to every winner based on their chosen odds.
Allocate tokens to an early contributor from the early contributor share.
Empty external function in the contract.
"Sets a lock on the account until a specified end date, with a security check to ensure only the creator can perform this action."
Supporter can claim tokens by calling the function.
Set the Owner to the First Torch Runner.
"Iterate over all account holders, calculate and transfer balances proportionally, ensuring the remaining balance is zero in an ideal scenario."
fail safe for balance transfer
Ensure beneficiary address is not zero and the amount of wei is not zero before proceeding with the purchase.
Get total number of tickets held by account.
The cap determines the amount of addresses processed when a user runs the faucet.
Function to reduce the maximum limit with security checks to ensure the new limit is within the specified range and can only be set by the owner.
"To remove address from whitelist: Disallow the specified address by setting its permission to false, with a validation that only the contract owner can execute this action."
Lock reserve tokens for 1 year.
Users can retrieve their funds in an emergency situation.
Enables an avatar to receive ethers through emitting an event when Ether is received.
Initiates a poll with predefined parameters at a specific pollID and emits a PollCreated event.
Function to collect tokens from a list of addresses and transfer them back to the owner.
Send ethers from the owner's wallet to a specified address and return a boolean indicating the success of the transaction.
Sets the lockup contract if the crowdsale hasn't started.
Function to get Dev Tokens issued during ICO.
Multi transaction of tokens return Boolean type of transaction success.
"Deposit function for a smart contract that allows an oracle to deposit tokens on behalf of a user, handling fees and lockup dates, with error handling and event logging. [return TREASURY_ERROR_TOKEN_NOT_SET_ALLOWANCE]"
"The function ""balanceOf"" returns the balance of NTS for a specific address."
Mark the transfer as denied.
"Allocate tokens to a beneficiary based on the specified parameters, including the stage, token amount, rate, and ownership verification."
Get the number of commodities.
Get the customer's transaction count for MCW payment.
The function `metaTransferHash` returns the bytes32 hash of a metatransaction with specified parameters.
Initializes Prether as a Token.
Agent sign on user data by agent.
"Returns the timestamp of the last received transaction for a specific address, without any security checks or validations."
"Allows users to deposit funds into the contract's account and receive an equivalent amount of in-game currency, with the game server tracking the wallet address that deposits the funds."
Set minimal token sale price.
Get all the ETH stored in the contract.
Create a vesting entry for the specified user.
"Internal function for destroying a specified amount of tokens owned by a given address, which reverts if tokens could not be destroyed."
Start of the crowd sale can be set only once.
"The function ""scannedDiamondCaps"" retrieves the number of diamond caps scanned from a packed data structure."
"The function allows the owner to withdraw tokens from the contract after the end of the ICO, with necessary checks and balance adjustments."
"This function initiates an airdrop of specified token amounts to multiple users from a designated address, utilizing the transferFrom method, requiring prior token approval to the contract address."
"Respond to Evil Morty token transfer by allowing participation through the portal gun instance, with a security check to ensure the owner cannot participate."
Returns owner address using ticket number.
"The ""cashin"" function allows for depositing funds into the contract, but only if the contract has not been finalized yet."
Withdraws locked GNO if endTime is past.
Set the maximum characters allowed per message with a function that requires ownership and returns a success boolean.
Failsafe mechanism allows owner to retrieve tokens from the contract.
"Gets the owner of the specified token ID, returning the address currently marked as the owner of the given token ID."
"Distribute tokens from the reserve while ensuring the amount is available, the sender is authorized, and the time condition is met."
Returns the number of tokens owned by the contract caller.
Internal function to clear current approval of a given land ID.
Get contract address by its ID.
To prolongate a deal for some days.
Allows the current owner to add a new grant with specified details and increments the total vesting amount.
Set the ICO token contract.
Shows if the cap has been reached.
Function to end the crowdsale by setting the stage to Ended.
Updates ipfs multihashes of a particular certificate.
This function is used by a new owner to accept a token ownership transfer and can only be called by the contract owner.
Returns the minimum of two unsigned integers.
Revoke oracle role from an address.
Convert section numbers using consumed tickets and emit transaction end details.
"Calculate the number of tokens based on the Ethereum deposit amount, incorporating a bonus calculation."
Referral percent calculating by contract balance.
Transfers tokens held by timelock to beneficiary after ensuring the current time is past the release time and the token balance is greater than zero.
Allow address to spend on contract and trigger a function call with specific data.
Get time to end of the competition.
Check the KYC status of the buyer.
Deliver tokens to a list of users by transferring their token balances and emitting an event for each user.
This function removes a user's wallet address from the whitelist.
Buy tokens by sending ETH to the contract.
Pause Round A Set ICO status to RoundAPaused.
Get discount percent for number of tokens.
"Return current phase index (current phase ID) based on the start and end dates of phases in the contract, with a validation check for the current date falling within a phase period."
"This function can be used by the owner of a token to modify the current price, with security checks ensuring the new price is higher than the starting price and specific thresholds for different token types."
The fallback function can be used to procure tokens.
Update public key for xIPFS.
The owner can turn off accepting new ether.
Refund payments if crowdsale is finalized.
Transfers token ownership from pre-sale to sale.
Calculate current bonus in tokens.
Function to retrieve vanity URL from address with a security check for constant state and returning the corresponding vanity string.
Only owner can assign new proposed owner.
Update the value of an investor's address in the contract and adjust the best investor based on the new value.
Sets the contract to finalized.
"Function `buyMFCoins` allows users to convert Ethereum to MF Coins, updating the coin pool, total supply, and user balances, emitting an event, and returning the converted coins."
Return the token price with the fees.
Returns if the given address has permission or not.
Internal view function that returns the maximum value of a uint64 variable.
Called by the owner of the contract to modify the sale state.
"Determining the current status of the contract based on various conditions such as termination, block number, total amount, and balance."
Collect payout for the given address.
Ensure the setup function is executed only once to configure the token address.
"Send ether to the fund collection wallet, overriding to create custom fund forwarding mechanisms."
Returns tokens available for transfer for a specified address.
Check if contract has ended.
"Returns an array of votes given to the project corresponding to an array of users passed in the function call, returning the array of votes given by the passed users."
Set the new released period of an account by updating the release end time for a specific stage if the original end time and duration match the stored values.
"Function to enable token transfers by unfreezing the token, with a security check ensuring only the manager can execute the action."
Approve spender to transfer a specific amount of tokens from your address in an ERC20 contract.
Return time when next game will start.
"This function burns NSPs stuck in contracts by reducing the balances and total supply, transferring the specified amount to address 0x0."
Claim tokens once sale is over.
Withdraw balance from contract if emergency.
Allows the owner to withdraw from the bankroll.
"The function ""incTotalSupply"" increases the total supply by a specified value and is restricted to the owner only, returning a boolean value of false."
Adds single address to whitelist.
Transfer an amount of TMX Global Tokens to an Ethereum address.
Overrides ERC20 interface to prevent interaction before finalization.
Creates a new Security Token and saves it to the registry.
Owner can transfer tokens to any address and track the tokens sold through ether or other payments.
Gets whether or not a buyer exceeded their approved amount in the last seller payout.
Set current price of one Ether in dollars.
Transfer tokens from vault to account if sales agent is correct.
The function calculates the total number of tokens during a presale period by multiplying the amount with the exchange rate and factoring in a bonus rate.
Transfer tokens from one address to another with a security check to ensure only the token owner can execute the transfer.
Transfer ownership of token back to wallet.
Return the loyalty reward balance of the member in question.
The function allows the contract owner to withdraw a specified amount of Ether to the designated wallet address.
"The function ""totalBalance"" returns the sum of the contract's ETH balance and the dividends earned by the caller from the ""hourglass"" contract."
Release all the bets back to the bettors if the oracle result cannot be verified.
Get value of ticket held in each winning caste.
Return the current AI42 Index value.
The function `viewXCAT` retrieves transaction details based on input parameters and returns specific information from the ledger.
Gets the balance of the sender's address.
This method is used to calculate Developer's Cut in the game.
Returns true if the list exists.
Convert an address to bytes format securely in smart contract code.
"The function ""getBalance"" retrieves the current balance of the smart contract."
"Method for direct contract replenishment with ETH, requiring a non-zero value deposit."
Send tokens to beneficiary by owner.
Calculates the rate with bonus in the public sale.
Allow Admin to reclaim all unclaimed tokens back to the specified wallet.
"This function is used to mint additional tokens, and only the admin can invoke this function."
Set a new PICOPS certifier after ensuring it is different from the current one and emitting an event to update the certifier.
"Allows owner to burn tokens that are not sold in a crowdsale, with security checks ensuring the owner has sufficient balance and the value to burn is greater than zero."
Deleting a safe and its values in storage while ensuring security through validation checks.
Owner can transfer other tokens that are sent here by mistake.
Changes the contract state after purchase.
"Check if the extended asset has changes by verifying if it has been initialized, returning false if not."
Returns the amounts paid out for the given week.
Calculate trade to buy eggs.
Allows the owner to change the signer address.
Removes the entire contract from the blockchain and invalidates all signatures.
"Terminate contract and reclaim gas by allowing only the owner to trigger selfdestruct after ensuring that the current stage is ""rewardWithdrawn."""
Utility to help seek for specified document based on the provided Unix time stamp.
Function to change the max cap USD.
Transfers the contract's ETH balance to the owner.
Allow the owner to withdraw STAKE tokens.
"Create a new subtoken with a unique tokenId, transferring a specified value to the designated address, while ensuring the value is greater than zero and performing necessary balance and total supply updates, ultimately returning a boolean value indicating success."
"Create a new note with specified metadata, public key, title, and content, assign ownership to the sender, emit an event for the created note, and charge a fee for the transaction."
"Inputs: bytes32 nodehash. Outputs: string name, bytes32 rootHash, uint256 initialCount, uint256 issuedCount, uint256 currentCount. Summarization: Get details about a given series."
Gets the token id for the specified UUID.
"Adds a game to the list of games if it is not already added, with a security check to ensure only non-human games can be added."
"Function that ends the sales to ensure the finishing of the sales and initiates the refund process, with security checks for ownership and time validation."
Allows anyone to execute a confirmed transaction.
Transfer coin for a specified addresses.
Get dividends for this contract.
Check an address to see if it is a controller.
"This function, totalBets, retrieves the total amount of bets placed in a specific game."
This function will revert all ether paid to this contract.
Enables early finalization of crowdsale.
Calculate the total vested amount of tokens for a user based on the current time.
Return array of ID factories associated with a specific user ID.
Must be called only in special cases.
Check if the given account has a balance greater than the specified amount.
Get the deposit address by index.
Return the real timeDelta applied interest and the interest gained in the realDelta time.
Get the Highest Miles Owner per each Medal Leader.
Return a contract address of the supported token.
Returns the total number of pixels generated.
"The function ""approve"" allows the sender to approve a specific amount of tokens to be spent by another address, updating the allowance mapping and emitting an Approval event for transparency."
Return true if the transaction can buy tokens from the ICO.
Decrease the remaining locked amount of an account.
"The function ""balanceOf"" checks for a non-null owner address and returns the amount owned by that address. Summarization: Return uint256 representing the amount owned by the passed address."
The `hasEnded` function checks if the token sale has ended by verifying if the current time is past the end time or if all tokens have been sold.
Method called by owner of contract to withdraw funds.
Deprecate current contract in favour of a new one.
"Add a new approver, which only an admin can perform this function."
Get the balance of the current asset pool.
"Delete a member from the list by looping through the member addresses and deleting the specified member if found, restricted to the owner's wallet."
Allow admin to unlock everything.
Returns the amount of ether converted into eUSD.
Add admin role to an address.
Gets the balance of a specified account.
Set address of wallet where investment will be transferred for further use in business transactions.
Summarization: Withdraw Ether to a Safe Wallet.
Get the highest price owner per each medal leader.
Set allowance for another address.
Multiple claim token for the list of specified address.
Set the minimum waiting time for withdrawal of funds of a started but not finished game.
"The function ""setStyles"" allows only the minter to increase the number of styles, with a validation check ensuring that styles cannot be decreased."
Investors can claim ether refund if total raised fund doesn't reach our softcap.
Allow another contract to spend some tokens on my behalf.
Check contribution cap for only tier 1 and 2.
"Add to the counter, and the function determines if this addition causes the counter to reach or exceed its target value."
Verify contract association with NTRY Token.
The function continues the crowdsale for contributions after validating that the current state is stopped and changing it to started.
Return the number of knights based on the accumulated count of characters for each dragon type.
Constructor passing the parent address and the total supply parent here is RAX Token.
Function to set new allowed address with admin permission and emit an event.
"Return true if the transaction is within the presale period, has a non-zero value, and is within the presale purchase limit."
Sets the fee to charge on each purchase.
Calculates a random number and preliminary game result before the actual transaction is confirmed on the blockchain.
Overrides the token transfer function to increment the transfer count for a specific item.
"The function ""getBasicRate"" retrieves the base buy or sell rate for a specific ERC20 token, with a conditional statement to differentiate between buy and sell rates."
Return the balance of a given player.
Override transferFrom method to freeze functionality in emergencies.
"Allow owner to increase the end date of the crowdsale as long as the crowdsale is still running, with limitations on the input values to ensure the new end date is after the current time, start date, and previous end date."
Transfers a specific amount of tokens from the function caller's account to a designated recipient
"The code defines a function called ""lastSentAt"" that takes an address as input and returns the timestamp of the last sent transaction for that address"
"This smart contract code includes a function named ""expireOf"" that takes an Ethereum address as input and returns the KYC expiration timestamp in seconds"
The function checks whether the user has any payments to collect
"A function named ""setHold"" is used to set a time period during which an investor's assets are held"
"The function ""isBalanceSufficientForContractCreation"" checks whether a user's balance is sufficient to create a new smart contract"
Query the current contract funds by returning the balance of the contract's address
The code sets the base purchase rate for a token
"A function named ""cashout"" is defined, which allows the owner to transfer any excess Ether held by the contract to their own address"
"The function calculates the education level of the citizens in a given city based on various factors such as the number of schools, population, and points earned from education"
"The code defines a function named ""GetNow"" that returns the current block number"
"A smart contract function named ""setGames"" allows the owner to add a new game address to a list of approved games, ensuring that only these games can earn dividends on their token balances"
"The smart contract code allows the owner to update the exchange rates for a specific period, with restrictions on the input parameters"
"The function ""allowance"" allows the owner of a token to approve a spender to transfer an amount from their account"
Total supply of tokens ever emitted
The code allows the owner of the smart contract to change the address of the whitelisting admin
The code transfers ownership of a smart contract from the migrator to a new address
The `balanceOf` function is a public view that returns the balance of a given address
The code sets the amount of gas to be sent to Oraclize
The smart contract code returns a boolean value indicating whether the current purchase period is the whitelist applicant period
"The function ""getAvailableAmount"" returns the available amount of tokens in a specific pool"
"The code accepts Ether payments from senders, who are either direct funders or refillers, and transfers the funds to a wallet after meeting certain conditions"
This smart contract function retrieves the balances of various ores for a given asset ID
"A function named ""counter"" is defined, which returns a 32-bit unsigned integer value"
The AO can set a new Name TAO Position Address using this function
The code creates a new token contract called GainmersTOKEN and returns it as a StandardToken
"This smart contract code defines a function called `getShares` that returns three values: `WINNER_SHARE`, `HOST_SHARE`, and `HONORABLE_LOSS_BONUS`"
All transactions sent to the contract will trigger an anonymous function that sends all Ether to the purchase function
Transfers Ethers from the contract account to a specified address
"A smart contract code for a token-based game is provided, with the ability to set a cap on the number of tokens that can be minted and the option to withdraw excess tokens"
A public function that allows the contract's owner to whitelist multiple addresses at once
"The function `getJsonPaymentInfo` takes a `PaymentData` object and a payment ID as input, and returns a JSON string containing various information about the payment"
"A function named ""transfer"" is defined, which takes three arguments: an address ""to"", an unsigned integer ""value"", and a bytes array ""data"""
"The code allows only the owner to send back the full amount of Ether to a contributor, and it updates the total ETH and USD amounts, sets the contributor's contributions to 0, and unmints their tokens"
The smart contract code allows the owner to retrieve a registered user's address based on their index
Anyone can send funds to the contract
"A function named ""getBalance"" is used to get the current balance of tokens"
"A function named ""authoriseAccount"" is used to allow a specific address to participate in the smart contract"
The code removes multiple users from an allocation list
God can set the realty contract
"A function named ""getCheckpointTimes"" is defined, which returns an array of unsigned integers representing the checkpoint times"
The code allows the approval of a third-party transfer of tokens
The function `getPendingBattleRewardsCount` returns the number of pending battle rewards for a given user
"A function named ""returnTokens"" is defined, which transfers a specified number of tokens to the beneficiary if the crowdsale has been closed and the beneficiary is the message sender"
The code returns the time of the last transaction for a given address
"The function ""getTokensRemaining"" is used to determine the number of tokens that remain to be distributed"
"A function named ""allowance"" is used to get the amount of FUEL that a specific address is allowed to spend on behalf of another address"
The code enables the transfer of tokens by setting the `transferEnabled` variable to `true`
The code allows the contract owner to burn a specific amount of tokens
The smart contract code contains a function named forceVoidExternal that is external and can only be called by the owner
"A function named ""getAllTellers"" is used to retrieve an array of addresses of all the tellers"
"The code sets a flag to enforce address matching, which can only be updated by the owner"
Creates a new instance of the ICO token contract
Calculates bonuses based on the current stage of an ICO
"A function named ""didReveal"" that takes two arguments, an address and a uint, and returns a boolean value indicating whether the user has revealed their vote for the specified poll"
A new master can be declared at another address
"Transfer tokens from one address to another within the allowance limit, returning true"
"The function ""tokensLocked"" is used to retrieve the number of tokens that are locked for a specific address and reason"
Withdraw the sender's contributed Ether in case the goal has not been reached
A function named setDepositCreator allows only the owner to update the address responsible for creating deposits
"The function ""producedCaps"" returns the total number of caps produced so far"
"A function that allows purchasers to withdraw any remaining Ether (wei) they have paid for tokens, after the crowdsale has ended"
"The function ""safeToSub"" checks whether the first argument is greater than or equal to the second argument, and returns true if it is"
"The function ""getLocksAmount"" returns the amount of a specific lock on a given address"
"A function named claimTokens is defined, which transfers the balance of a specified ERC20 token from the Crowdsale contract to its owner"
"The code defines a function called ""ownerOf"" that takes a single argument, ""_tokenId"", and returns the address of the owner of the token with the given ID"
A user can approve an Ethereum address to spend a certain amount of Nuru tokens from their account by calling the `approve` function and specifying the spender's address and the amount of tokens
"The code sets a gas price limit for an auction, ensuring that the gas price is greater than 0 and emitting an event to signal the change"
"The code returns information about a ticket, including its balance, type, validity, creation and expiration dates, contractor address, and review status"
The code sets a new rarity multiplier for the feed
Sets a whitelisted address for a specific zone
"The code defines a function called ""getStage"" that returns the current stage as an unsigned 8-bit integer"
"The code sets up a global token configuration for the TMX Global Token, including its name, symbol, and decimal units"
Sets the bonus percentage and minimum amount for a crowdsale
"A user can receive an airdrop by calling the `getAirdrop` function and paying the necessary gas fees, as long as they meet certain conditions such as not being locked out or within the drop period"
The code allows the owner of a smart contract to withdraw fees collected by the contract and transfer them to an approved wallet address
"A function named ""fundingActive"" is defined, which buys a large number of tokens using a market order"
"The code sets the start time of ICO stage 3 to a new value, emitting an event with the old and new values"
An address can own a base according to the code
The crowdsale owner can withdraw any amount of Ether from the smart contract at any time
"Burning tokens: A function that checks if the amount is greater than the balance, throws an error if it is, and updates the balances and burnedTokens arrays"
Total amount of owedToken ever repaid
A smart contract code is provided that allows the owner or referee to pause a stack of contracts
"A user can purchase a specific number of packs and specify a referrer address, paying the required amount in Ether"
Push vendor information to the vendor list
"To add an address to the whitelist, the owner can call the ""addToWhitelist"" function and pass in the new address as a parameter"
"The code calculates the maximum deposit amount based on the total investment amount, with different rates applied for different investment levels"
"Starting the crowdsale by setting the start and end times, and initializing a flag to track its status"
"The code defines a function called ""getBalance"" that takes an Ethereum address as input and returns the balance of the corresponding account"
"The code is a function named ""unreserve"" that allows the manager to unreserve tokens for an unknown investor's address, specified by an index in an array"
"The function ""getTokensPurchased"" returns the total number of tokens purchased during all sale periods"
"A function named ""validPurchase"" checks if a purchase is valid by verifying that the current time is within the private sale period and that the purchase amount is greater than zero"
"This smart contract code defines a function named ""parseJsonArrayAndGetFirstElementAsNumber"" that takes in a string of JSON data, parses it, and returns the first element as an unsigned integer"
"A function named ""hasStarted"" is used to determine whether a crowdsale has started or not"
"When the sale is closed, the owner can drain any remaining tokens"
The code checks whether an investor's purchase is valid based on the minimum contribution amount and returns a boolean value indicating whether the purchase is valid
"The code adds new participants to an airdrop by updating the list of eligible addresses, ensuring that each address is unique and does not exceed a predetermined limit"
"A function named ""sendToken"" is used to transfer a specific amount of tokens to a user's address"
The code sets the balance of a sender's account to a specified value
Bonus calculation function for ICO on purchase basis
"A function named ""totalSupply"" is defined, which returns the total supply of tokens"
The code allows the owner of a smart contract to change the winning chance
The code removes a node from a linked list and returns the removed node
"This smart contract code allows an operator to mint multiple NFTs that are not for sale, by calling the `mintNFTNotForSale` function with a list of token IDs and corresponding URIs"
"A function named ""isManagerAllowed"" checks whether a manager is allowed to perform an action by checking if they are enabled and have been granted the necessary permission"
"This smart contract code allows users to place sell orders for a specific amount of tokens at a given price, with the ability to transfer tokens from one address to another"
The code registers an address for a token sale by requiring that it is not already registered and then setting its registration status to true
"The code checks if the address of the contract's admin is equal to the sender's address, and if it's not, it reverts with an error message"
This smart contract function allows users to retrieve their resource balances from a specific wallet address
The code allows the main player to collect their fees by sending them to the main player
Retrieves referrer and referrer reward information from the registrar
The code takes Ethers from a ZebiWallet to a smart contract
The code checks if an address has invested in a smart contract by iterating through an array of addresses and returning true if it finds a match
"A function named ""approve"" is defined, which takes two arguments: an address and a uint256 value"
"The function ""getInvitationRewardBalance"" returns the invitation reward balance of a given member"
"To make a smart contract, you can use Solidity"
"A function named `__callback` is defined, which takes two parameters: `_oraclizeID` and `_result`"
This smart contract code allows the owner to set a transfer limit for a specific user
This smart contract code allows an owner to sign up official applications by hashing the application name and storing it in a directory
"A function named ""getImageMetadata"" is defined, which takes a single parameter ""_imageId"" and returns several values"
Get the reserved token amount for a specific group
"A function named ""_setTokenURI"" is defined, which takes two parameters: ""uint256 _tokenId"" and ""string _uri"""
"A function named ""addInterest"" is defined, which takes an unsigned integer ""index"" as a parameter and returns a boolean value"
Owner can change the escrow's address using this code
"A function named ""currentSupply"" is defined, which returns the value of the variable ""totalSupply"""
The code returns the price of a token in wei
"A function named createStandingOrder is defined, which creates a new smart contract instance of type StandingOrder"
Increases the approved amount for a spender to spend on behalf of the message sender
Returns a boolean value indicating whether the pre-ICO crowdsale event has ended based on the current time and the pre-ICO end time
Retrieves the address of the owner from the name
A fallback function that accepts payments from the sender
"Constructor function Initializes the presale by setting key parameters such as the wallet for operations, token contract address, distribution supply, token price, start and end blocks, default authorized ETH amount, and a factor for calculations."
The code checks if the base target cap has been reached by comparing the total amount of wei contributed to the base target in wei
Only the owner of the contract can change the minimum bet amount for Jackpot
The code defines a function that returns the address of a specific log token contract based on its index in an array
"A function called ""emergencyThaw"" is defined, which sets the variable ""isFrozen"" to false"
"A function named ""balanceOf"" is used to retrieve the current balance of a particular account"
A function named distroyIssuerToken is used to destroy the owner's tokens
A user can collect their allocated tokens for each period after the deadline has passed
"A function named WithdrawAndTransferToBankroll is defined as public, which calls the Zethr withdraw function and then the WithdrawToBankroll function"
Allows the manager to update the quick buy path
This smart contract code parses the currency rate from an Oraclize response and returns the currency price in USD
"This smart contract code allows for the transfer of tokens from one address to another, with checks in place to ensure that the sender has sufficient allowance and balance"
"A function named ""mintAll"" is defined, which mints tokens for multiple wallet addresses"
Returns the current amount of segments
"MintBounty is a function that allows the owner of a crowdsale to mint new tokens, or ""bounty"" tokens, and transfer them to a specified beneficiary"
The function takes a uint8 value as input and returns its byte equivalent
"A function named ""isSane"" checks if the contract is sane by verifying that it has been minted and released by the token"
"A function named ""rand"" generates a random number between 1 and 20, inclusive"
The code shifts a bytes32 value left by n positions
"The function ""hasEnded"" checks whether the crowdsale event has ended by comparing the current time with the end time and the sold tokens with the hard cap"
The code allows the owner of the contract to set the address of the Hydro token
"A function named ""withdrawCashReserveFund"" is used to transfer the accumulated cash reserve fund to the owner's wallet"
"A function named `_isMounted` takes an array of `uint256` values, `mountedChildren`, and a single `uint256` value, `_toMountToken`"
"This smart contract code includes a function called ""checkTransferRequirements"" that verifies whether all the requirements for a token transfer are met"
A new bunny is added to the storage
Returns a boolean value indicating whether the smart contract is currently in its initial coin offering (ICO) period
Burn function: internal returns bool
"The function ""preSaleEndedAt"" is used to retrieve the timestamp of when the pre-sale ended"
"The code calculates and returns the total reward amount for a decentralized application (DApp) by adding up the amounts from three different coins: Bitcoin, Ethereum, and Litecoin"
"The function ""getRTEBonusTokenVaultBalance"" returns the current balance of the bonus token vault"
The code returns a boolean value indicating whether the crowdsale is currently open or closed
"A function named chargeTransferFee takes an address and a uint amount as input, and returns the amount after applying a transfer fee if applicable"
"The smart contract code includes a function named ""name"" that is publicly accessible and returns a string value representing the campaign name"
"The code defines a function named ""totalSupply"" that returns the total supply of ERC-721 entities"
"A function named ""unlockToken"" is defined as a public member function of the smart contract, which can be called by the owner of the contract to unlock a specific token for trading"
"A smart contract code allows the owner to kill the contract by calling a function named ""ownerKill"" and passing in their own address"
The code adds a list of new investors to an existing investors list and approves them
"A function named depositFor allows users to deposit Ether into another user's account, which is useful for services that don't want to hold funds and avoid the need for frequent refunds"
Owner can mint new tokens up to a certain limit
"The function ""producedDiamondCaps"" returns the number of diamond caps produced so far"
"A function named ""usdToEth"" that takes a single parameter of type ""uint"" and returns a value of type ""uint"""
"A function named ClaimMTU allows investors to claim their MTU or Ether, with a requirement of a minimum claim rate and a time limit for claiming"
The code sets a beta period and two sub-developers for a cryptocurrency project
The code allows the owner to add a new address to the whitelist by setting its corresponding value in the `isAddressWhiteListed` mapping to true
"The function calculates the number of tokens and bonus based on the investment value in wei, returning the total number of tokens and bonuses"
"The owner of the contract can add Ether (ETH) to it through a function called ""addEth"""
The CreateToken function is used to create a new token and mint it to the specified address
"This smart contract code includes a function called ""close"" that is accessible to the owner and destroys the contract"
The code is a function that closes the minting process and returns a boolean value indicating whether the process was successfully completed
"The code refunds a transaction if the state has changed, otherwise it reverts"
"A function named ""tokenForWei"" takes a parameter called ""_wei"" and returns the value of ""_wei"" divided by a variable called ""course"""
Fallback function allows ETH deposits
The code allows the owner to update the gas price limit
"A function named ""isValidContributorAddress"" checks whether an input address is a valid contributor by returning the result of another function called ""isValidContributorId"""
This smart contract code allows users to decrease the freezing time of their MegaCandyToken by burning a certain amount of tokens and calling a function from another contract
"A function named getStatsRange takes in a uint256 parameter _classId and returns two arrays, statsMin and statsMax, which represent the minimum and maximum ranges of stats that an item with the given class ID can have"
"A function named ""mul"" takes two unsigned integers, multiplies them, and returns the result"
"The code checks if an address is whitelisted by returning a boolean value based on the presence of the address in a mapping called ""allowedAddresses"""
The code sets a minimum amount for transfers to start distribution
"A function named ""setTreasuryRatio"" is used to set a new treasury address"
Sets the tokens contract address for checking token balances
"The code allows the owner of a token contract to send Ether to the contract, which will then be used to pay dividends to all holders of the token"
Get the registrant ID from a given address
A function named closeWindow is used to stop the window and transfer ETH to a wallet address
Withdraw DTH from the teller's balance and transfer it to the receiver
"A function named ""salvageTokensFromContract"" allows the owner of a smart contract to transfer tokens accidentally sent to the token address to another address"
"The function `getEthDealRange()` returns the minimum and maximum values of a deal in ETH, calculated based on the token's minimum and maximum deal values"
"The code defines a function named ""startNextPhase"" that can be called by the owner of the contract"
"The code defines a function named ""howMuchInEscrow"" that returns the current balance of the smart contract's escrow account"
"A function named ""tokenFallback"" is defined, which takes an address, a uint256 value, and a bytes data as input"
The code allows the owner to burn a specific amount of tokens from their account
This smart contract function retrieves all CrySol objects in the game
This smart contract code allows the owner of a vanity URL to transfer ownership to another address
"Buy Wanchain tokens from partners with a limit, and require a minimum amount of tokens available for purchase"
This smart contract code allows for the batch transfer of tokens to multiple addresses
"The function ""buyPrice"" calculates the purchase price of the next token"
"The function ""roomNight"" retrieves detailed information about a specific room night, including the vendor ID, rate plan ID, token, price, timestamp, date, IPFS hash, and name"
This smart contract code allows the contract creator to add a new video game item to the blockchain
The code allows the owner to transfer a specific amount of tokens from the smart contract to their own address
"A function named ""hasEnded"" checks whether an event has ended by returning a boolean value"
The code allows a user to collect their fees if they are the original sender of the transaction
"The code returns a tuple containing the index, name, and weight of the winning proposal after the voting period has ended"
Mints a specified amount of tokens and adds them to the main wallet balance
"The function ""isConfirmed"" returns a boolean value indicating whether the specified promise has been confirmed by the recipient"
"This smart contract has a function called ""emergencyPay"" that allows anyone to send Ether to the contract"
This smart contract function allows staff members to update the reward amount for multiple users at once
Allow the owner of a smart contract to remove an address from the whitelist
Updates the payout for the estates the owner has
"A function named ""tokensOfOwner"" is defined, which takes an address as input and returns an array of uint256 values representing the tokens owned by that address"
"A smart contract code is provided that creates a Trezor MultiSig 2 of 3 contract, which is owned by three specific addresses"
"This smart contract code allows users to bid on a badge, with the highest bidder becoming the new owner of the badge"
"A function named ""getTokenById"" that takes a uint256 parameter named ""_tokenId"" and returns the type of token, the name, URL, and whether it's snatchable"
"The code calculates the number of blocks until the next expected dividend payment by determining the current period and then subtracting the current block number from the first hash block number, and dividing it by 10 times the size of the hashes"
The smart contract code prevents minting of more tokens than the hard cap
The code allows the owner to wipe all the data from the contract and disable all the methods
"This smart contract code allows the WeTrustManager to set a new hostname, NFT name, and NFT symbol for an NFT contract"
"This smart contract code defines a function called ""getState"" that takes a bytes32 parameter named ""_requestId"" and returns the current state of the request with the specified ID"
Burn away the specified amount of Ant Coins
"The code is a function that calls the ""buyBlockCDN"" function"
"Function setICOover sets a boolean variable ICOover to true, and it can only be executed by the owner of the contract"
The code transfers the ownership of a token to a new owner
"This smart contract code allows the owner to add addresses to a whitelist, with each address having a maximum of 15 Ether allocated to it"
A function named queryEOSCrowdsaleKey takes an address as input and returns a string representing the EOS address registered in the original EOS crowdsale
"A function that takes in a transaction ID, original address, output index, and proof as inputs and returns a boolean value indicating whether the UTXO can be redeemed"
The bid is canceled by the publisher
"A function named changeDelegate is defined, which takes an address as a parameter and returns a boolean value"
The function calculates and returns the basic token amount to be collected based on the Ether amount contributed
The code defines a function called `checkHolderStep` that takes an address as input and returns a boolean value
"The code allows the owner to change the ownership of a token after the end of a pre-sale period, but only if the soft cap has not been met"
"A function named ""userNameTaken"" is used to determine if a given user name has already been taken"
Bonding to an oracle on behalf of a holder and returning the total ZAP bound to the oracle
The code allows the owner to add multiple addresses to a whitelist
"This smart contract code allows the owner to push a certain amount of tokens to a specific address, as long as there are enough tokens in the contract's balance"
"A function named ""createOldUsers"" is defined, which creates new user accounts for existing users in an old contract by retrieving their usernames and addresses from the old contract's data"
"The code transfers ownership of a contract to another address, with only the current owner having permission to execute it"
Allows admin to edit or add an available game
"A function named ""getAllUsers"" is defined, which takes a boolean parameter ""fetch"" and returns an array of addresses"
A function that allows the owner of a smart contract to distribute Xinfin tokens to multiple addresses based on their value
"The function ""isRegistered"" checks whether a user's address is on the whitelist"
The function `transferToContract` transfers a specified amount of tokens to a specified contract address and returns true if the transaction was successful
Finalizes the bonus sale and sets up the main sale
"The code is a function named ""refund"" that returns a boolean value"
The code allows the owner of a smart contract to withdraw all funds from the contract to their own wallet
The code allows the owner of a smart contract to approve a specific address to mint new tokens
"A function named ""initialize"" is defined as a public initializer and registers the interface ID of ERC165"
"A function named ""allowance"" is defined, which takes two addresses as input and returns a uint256 value"
"A function named ""getRemainingBountyTokens"" is defined, which returns the number of bounty tokens that are still available for allocation"
This smart contract code allows the removal of a signer from an entity
A function that checks whether a given address is present in an array of addresses
"A function that checks the amount of Ether sent and, if it is less than 1 Ether divided by the current price, reverts the transaction"
"The function ""getTokensByOwner"" allows users to retrieve a list of tokens owned by a specific address"
"A function that checks if minting is occurring, and if so, mints an ERC20 token for the beneficiary"
The smart contract code allows the owner to set a new primary address for the Totle contract
The code returns the minter allowance for a given account
The code allows the owner to change the address of the whitelist component
"The code defines a function named ""version"" that returns a string representing the name of the current version"
"This smart contract code allows the owner to designate an address as the affiliate setter, which can then be used to set the affiliate address for a user"
"The code defines a function named ""totalSupply"" that returns the total supply of tokens in existence"
"A function named ""pausePreIco"" is defined, which can only be executed by the manager"
The code transfers a specified number of tokens from the owner's balance to another address
"A function named ""insertNodeSorted"" is defined, which takes two arguments: an unsigned integer ""amount"" and an address ""staker"""
"A function named computeTokens takes in a uint256 parameter and returns the result of a complex mathematical operation involving the input, soldTokens, cap, and other constants"
Trading is limited before the sale is closed
"The function ""getTreesOnSale"" returns an array of all the trees currently on sale"
A function that allows the batch transfer of tokens from one account to multiple accounts
"The smart contract code contains a function called ""HolderAddress"" that takes in a parameter named ""_index"" and returns the address of the corresponding holder"
The code creates a new token and updates the balances of the creator and the total supply
"This smart contract function, ""getCurrentRoundInfo,"" returns various information about the current round of a game or competition, including the round ID, state, current Ether balance, pot size, leaderboard position, and more"
Releases Jiffys that have been vested for the caller
The code reads a sequence of bytes and converts it into an address
The code generates a random number based on the last block hash
The code is a function that allows the owner of the contract to withdraw Ether from the contract's balance and transfer it to five different addresses
"A smart contract code sets the Security Token parameters, including name, ticker, total supply, decimals, owner, maximum Poly allocation, lockup period, quorum, and addresses for PolyToken, PolyCustomers, and PolyCompliance"
The code is a simple function that reverts the transaction
"Sets a new maximum investment amount for users, ensuring it is greater than zero and the minimum amount set"
This smart contract code allows the owner of a pixel to add an address to its approved list
Transfers tokens from one address to another if the sender has been delegated a wallet and the balance is sufficient
"A function named ""withdraw"" is defined, which transfers a specified amount of funds from the contract to a designated address"
Destroy Beercoins by removing them from the system irreversibly
"The function ""hasEnded"" checks whether the sale is over by comparing the maximum supply with the number of redeemed tokens"
"A function named ""addToWhitelistMulti"" is used to add multiple verified addresses to a security token's whitelist, returning a boolean value indicating success"
StoreComission is a function that adds the amount of tokens to be stored in the system reserves
"The code allows the owner of a smart contract to transfer tokens to multiple advisors from an advisor pool, with the ability to pause and unpause the token transfers as needed"
The code checks whether a transaction related to a payment for a Master Coin Wrapping (MCW) has been spent or not
This smart contract code allows for the batch transfer of a fixed amount of tokens to multiple addresses
"A function named ""grantAdvisorToken"" is used to transfer advisor tokens from one address to another"
"A function named receivePlayerNameList is defined, which takes two parameters: a uint256 value representing the player ID and a bytes32 value representing the player's name"
The code updates the ETH price and calculates the USD value of a token based on the ETH price
This smart contract code allows the owner to change the founder and company addresses
The code removes the minter role from a specified address
"The function ""lastWinner"" returns the address of the last winner"
"The smart contract code sets the ICO status to ""PreSalePaused"" when the function ""pausePreSaleRound"" is called"
Withdrawing Ether from a smart contract requires the following steps: 1
"The code sets a new exchange rate agent for the smart contract, but only if the new agent is not the zero address"
Update compliance proof hash for the issuance and return a boolean value indicating success
"The function ""stakeBalanceOf"" returns the stake balance of a given user"
Distributes fees for multiple claims in a batch
The function checks if the amount of tokens requested is less than or equal to the amount of tokens allowed to be sent
"Based on the order input parameters and the signature from the maker, execute a sell order"
The function calculates the cooldown period for a child pony based on its generation and the current block number
"A function named ""getApproved"" is defined, which takes a single parameter called ""assetId"" and returns a value of type ""address"""
"The code defines a function named ""getTokenBalance"" that takes two parameters, ""tokenAddress"" and ""who,"" and returns the balance of the ERC-20 token at the specified address"
"A function named ""transfer"" is defined, which transfers a specified amount of tokens to a given address when the contract is not paused and the sender is not blacklisted"
The code allows the owner of the smart contract to change the start time of an ICO (initial coin offering) manually
The code defines a function named `executeTransfer` that transfers tokens to a specified address and executes a token fallback function if the recipient is a contract
"The function ""freeMem"" uses the ""mload"" instruction to load a value from the address 0x40 and returns it as a bytes32 value"
The code records a deposit of a specified amount by updating the balance for dividend history
Code:function collect ( ) { var balance = pendingPayouts [ msg 
This smart contract code sets up the initial balances for a token sale
"A function named ""emergencyERC20Drain"" is defined, which allows the owner of a smart contract to transfer any ERC20 tokens sent to the contract by mistake to their own wallet"
"A function named ""getSettingData"" is defined, which takes a single parameter ""_settingId"" and returns multiple values"
The code allows the owner to transfer AIB tokens to investors who make off-chain payments
The code checks if a user exists in the whitelist
"The code ends the current game round and starts a new one, with the winner receiving a reward and dividends"
The owner of the smart contract can withdraw a specified amount from the contract's balance
The smart contract code allows the owner to transfer all balance to an address when paused
"A function named ""getParametersHash"" takes two parameters, ""_voteParams"" and ""_intVote"", and returns a hash of these parameters"
"The code is a function named ""refund"" that checks if the ICO has finished and was successful, and then refunds ETH to donors who have not yet exchanged their tokens"
The function returns a boolean value indicating whether the current stage of the ICO is the pre-ICO phase
"A function named ""addMember"" is used to add a new member to the smart contract, and it can only be called by the owner of the wallet"
"The function ""getDocumentUpdatedVersionId"" retrieves the updated version ID of a document with a given ID"
Returns the amount of outcome tokens held by owner
"The code defines a function named ""usdToWei"" that takes a uint parameter named ""usd"" and returns the equivalent value in wei, calculated by multiplying the USD price with the ETH price"
"The function adds a new amount to the total amount of locked tokens for a specific vesting, and emits an event indicating that the locked amount has increased"
The smart contract code returns the name of a human based on their ID
"The code allows the contract's administrator to withdraw a fee from the contract's balance, but only if the fee is greater than zero"
"The code defines a function named ""balanceOf"" that takes an address as input and returns the balance of the corresponding token"
"The function ""unHalt"" is called by the contract owner to resume normal operations after an emergency situation has been resolved"
A function that allows the burning of option tokens after an ICO
"A function that allows the owner of tokens to claim them after the successful vesting period has passed, asserting that the sender is a valid owner of tokens"
"The function ""hardCapReached"" checks whether the hard cap has been reached by comparing the number of tokens sold to the total supply and adding the fiat balance to the Ether balance, then comparing it to the hard cap"
"A smart contract code is provided that includes a function named ""setSellRate"" that allows the owner to set the sell rate of a token in Ether"
"A function named changeMaxDistributeCoin is defined, which allows the owner to set a new maximum amount of tokens that can be sold"
"The function ""sealed"" checks whether the campaign is sealed and cannot receive funds"
A smart contract with a time-limited deposit of ether
"The code defines a function named ""totalBalance"" that returns the total wei in the contract"
"A function named ""withdraw"" is used to transfer collected funds and unsold tokens to a designated beneficiary, and it can only be executed by the contract's owner"
"A function that gets the insertion point for a new node in a doubly linked list based on a sort factor, returning the node ID of the previous node"
"A function named ""getApiId"" is used to retrieve the ID number of an API based on its hostname"
Bank tokens are deposited into the CXC account
The code sets the minimum ETH income during a specific time window
"The code defines a function named ""buy"" that takes two parameters, ""refAddress"" and ""minReturn"", and returns the result of calling another function named ""purchaseTokens"""
"A function named ""withdrawFoundersTeamAndAdvisors"" is used to transfer funds accumulated for the founders' team and advisors to the owner's wallet"
This smart contract code allows users to transfer tokens while also participating in a jackpot system
The code allows the current main player to transfer their role to a new player
"A smart contract named Robincoin is created with a function that takes in three parameters: an unsigned integer, a string for the token name, and another string for the token symbol"
The code returns the account address of the first token holder
This smart contract code defines a function named `getUserPayedInCurrentRound` that takes an address `_userAddress` as input and returns the amount of ETH paid by the user in the current round
Double the update interval has passed since the last successful price update
Transferring ownership of a smart contract requires the approval of both the current and new owners
"The function ""convertFromUSD"" takes two parameters, a fund raise type and an amount, and returns the value of the amount converted to ETH or POLY based on the current rate"
Emergency transfer tokens to contract owner
"Bakt is a function that sets the registration name, trustee, and joins the trustee to the contract"
A payment event is emitted when the fallback function receives Ether
"Allows a minter to burn some of its own tokens, validating that the caller is a minter and that the sender is not blacklisted, and ensuring the amount is less than or equal to the minter's account balance."
"The function ""setupRace"" is exclusively for the contract owner to initialize a race with specified betting and race durations, setting the starting time and enabling betting."
Return the token address of the token vesting.
Triggered by the master node once rewards are set and ready to validate.
Sets a new URL for getting world population via Oraclize.
Fallback function to reject any ether coming directly to the contract.
Sets the address of the owner.
Enables migration to a specified target contract with no specific security checks or validations mentioned in the provided code snippet.
Calculates fees for a given range and amount using a fee calculator.
Return the amount donated by the user.
Withdraws any ERC20 token accidentally sent to the contract.
Summarization: Called by the owner to set the default airdrop amount.
"The function ""refundFor"" internally processes and returns whether the refund was successful or not based on the partner ID provided."
Contract owner can withdraw ownerEth amount.
Sets bonuses for USD amounts with input validation for matching lengths and descending order of amounts.
Getter to determine if an address has a poweruser role.
Function for the frontend to show ether waiting to be sent to Bankroll in contract.
Allows you to get ethereum from the contract.
"Function to check the amount of tokens that an owner allowed to a spender, returning the remaining tokens allowed to be spent."
Transfer unsold ICO tokens to the owner's account for burning.
Marks the document with the passed id as visible after validating that the editor is making the change and the document is currently invisible.
Return total supply by counting the number of libraries in the contract.
"The function checks if the contribution period is open by verifying the current block timestamp against the start and end times of the current tier, returning false if the contribution is closed."
Returns tokens according to rate.
Transfer token for a specified address when not paused.
UseRedEgg function hatches a specified number of red eggs into snails without any ETH cost.
"Lock tokens for a single whole period to a specified beneficiary, ensuring they cannot be accessed until the set date, and transfer the specified token amount to a time-locked contract."
Constructor function to assign four addresses for a four-way split among beneficiaries.
Returns an address' balance of an artwork or token.
Transfer custom amount to a custom address.
Returns the amount of tokens allowed by the owner that can be transferred.
"Mints tokens to a specified address, increments balances, updates total supply, triggers a transfer event, and adds the address to the holders list if not already present."
Return the address of the RareCoin contract.
Unfreeze currently available amount of tokens after checking and unfreezing any portions that have reached their unfreeze time.
Check if the address is not empty and not equal to the sender's address.
Return first redemption request ID.
"Amend and option in an existing Ballot by verifying the administrator, ballot existence, unsealed status, and valid option ID."
"Function to whitelist multiple user addresses at once, restricted to the owner, with a maximum limit of 150 addresses to prevent gas limit exhaustion and potential DoS attacks by adding the addresses to the whitelisted mapping."
Make portal gun back on fire.
"The function ""capReached"" checks if the hard cap goal in USD has been reached based on the raised amount in ETH."
Only the manager can verify accounts.
Refund on failed or aborted sale.
"Function to change the owner's cut, accessible only by the banker, with a validation check to ensure the new cut is within the allowed range."
"End sale in current round, with security checks for ownership and stage validation."
"The contract allows the owner to add administrators who have access to certain functions at an admin level, with the owner always being an admin."
Returns the ticket price for the bet.
Change mint address. Changes the address allowed to mint tokens.
"The function ""burnDexter"" allows the owner to burn a specific amount of tokens, with security checks ensuring that the owner has sufficient balance before deducting the tokens."
Constructor for the contract to store owner's account on deployment.
Validate if the transaction can be successful.
"Lock a number of tokens based on the holder's address and value, with security checks ensuring the holder matches the sender or transaction origin."
Set lock flag to address on the specific condition.
"The function ""debit"" allows the owner to withdraw Beercoins from multiple users, ensuring that the withdrawal is authorized and updating the balances accordingly."
"The function sets the stage to ""Deploying"" at the start in the deployed stage."
"Retrieve the amount of tokens locked for contributors, with a release schedule of 8 batches occurring every 180 days."
"Internal function to deploy and register an oracle, returning a deployed oracle contract."
"The function ""payCharon"" increases the total obol value and transfers obol to Charon's boat."
Issues tokens for users who made purchases in other cryptocurrencies.
Get the name of an account.
Transfer limited by the tradingOpen modifier.
Fallback function receives ETH and sends tokens back.
Burns remaining tokens after the contract has ended. (return true if burnToken function has ended)
Check index of given address in the array of developers.
Owner withdraws Ether in contract.
Security checks include verifying the proposalTAOAdvocate's address and ensuring the approval of the setting update before emitting an event.
Change authority can only be called by authority.
Return the OneledgerToken associated with the contract for user convenience.
"Transfer the unsold tokens to the MIND Foundation multisign wallet, with a security check ensuring that the token sale has ended, exclusively for the contract owner to execute."
Calculates winnings for the given bet and percent.
Function to return the total supply of the token.
Transfer function performs security checks to ensure the sender has enough tokens and the transfer amount is safe before transferring an amount of ACE Equity Tokens to an Ethereum address.
Transfer a specified amount to a given address and return true if the operation was successful.
Returns amount of wei transactee has to send to fulfill transactor's request.
Get sig requirements for minor tx spends; return uint256 Number of sigs required.
Sets a new renaming per character cost in wei; any CLevel can call this function.
The contract allows it to receive Ether.
Approve tokens to be transferred by 0x Token Transfer Proxy.
Return unread messages as an array of message numbers.
Disallow payment after unlock block.
Get a MC's info given index.
Returns true if it is possible to invest based on the contract's state and investment restrictions.
Append token recipe source alternative.
"Initiate balances for multiple addresses based on provided values, deducting the total value from the owner's balance."
Hand over the data layer authority.
Returns whether the contribution is valid or not.
Anyone can finalize a finished round.
Return the last block number mined by the miner.
Get Tokens for the company.
Query the main account address of a specific index with a security check to ensure the index is within the mainAccounts array length.
Crowdsale owners can collect ETH any number of times.
"Gets a position at the given index and returns the market name, stock name, quantity of shares held, and average price paid for shares."
"CHANGE ETERNAL STORAGE CONTRACT ADDRESS: Update the address of the eternal storage contract, with validation restricted to the owner of the items storage."
Generate pseudo semi-random number between 1 and the specified maximum value.
"Function called when transferring funds to a smart contract, includes a transfer and tokenFallback call, returning a boolean indicating the success of the operation."
"Function mintTokensToWinners allows the DAO to mint tokens to winners or prize funds contracts, with access restricted to the DAO and a security check ensuring the CrowdSale is in the 'WorkTime' state."
"The function ""migrate"" allows the contract owner to upgrade to a new contract address by self-destructing the current contract and transferring any remaining funds to the new contract."
Allows owner to delete commited destination address.
"The provided smart contract contains a fallback function that reverts any incoming transactions, indicating a lack of defined functionality or a security measure to reject unexpected calls."
A default payable function that allows the contract to receive Ether without executing any specific functionality.
Return user share value in the specified round by calculating the sum of the player's share and unmasked earnings.
Get a whitelisted user return uint256 the amount pledged by the user uint the index of the user.
"The function ""setOneTimePrice"" allows the owner to increase the price when the network is under heavy load, with a validation check ensuring the new price is less than 2000 szabo."
Basic transfer of all transfer related functions.
Change the minimum and maximum amounts that TrueVND users can burn to newMin and newMax.
Gets the total number of locks for a given address.
Return the infoUrl of Chibi.
Return true if the transaction is a valid purchase for buying tokens.
Constructor setting the latest logic address for the wallet connector contract.
Get payer of a request return payer address.
"This function will return all details of the teams, including the team name, owner's address, and current price."
Change the owner of the token.
Set price percentage for when price exceeds or equates to price cutoff to reset to.
Function to refund funds if softcap is not reached and sale period is over.
Create CurrentToken contract and set pause.
Return bool for whether ICO is running or not.
Return address The current owner.
"Reloads tickets with specified amount of Ethereum and affiliate ID, emitting transaction details."
Total Supply View Total Supply Return Total Supply.
Only the newly proposed owner can accept ownership of the contract.
Returns a random number.
Create a new token contract and assign the sender as the controller. [Return the address of the new token contract]
"Return true if the current time is within the specified period, otherwise return false."
Checks if the specified address is whitelisted.
"Review signatures against a list of signers, ensuring signatures are valid and correspond to the signers provided, returning the number of valid signatures or 0 if the inputs are inconsistent."
Allows the contract to be funded in order to pay for oraclize calls.
fundTransfer used to transfer collected ether into the beneficary address.
Return the remaining amount of blocks to win a big promo bonus from the core contract.
Simply pay out tx fees appropriately.
Return uint256 Natural unit of Set.
"Retrieve all contracts ever created and return them as an array of addresses, with a security check for owner-only access."
Multiplies two values safely and returns the result.
Ties a post's link to its ID.
Change the owner-set start time for the Pre-ICO phase.
This smart contract code converts an unsigned integer to its corresponding string representation
"A function named ""changeCongress"" is defined, which updates the address of the ""congress"" contract"
Function floatEconomy is a public function that can only be executed by the owner
"A function named ""makeAdoptionOfferToAddress"" allows the owner of a specific cat to offer it for adoption to a particular address, provided that the owner is not the same as the person making the offer"
This smart contract code allows users to retrieve a specific transaction registry for a given customer address
This smart contract code allows only the admin to view and return the address of the pending admin
This smart contract code is for a withdrawal function that allows users to withdraw their funds from the treasury
"A function named ""isOwner"" checks if a given address matches the owner's address"
"The code defines a function called ""buyPrice"" that returns the current buying price of a token"
The smart contract code implements a transfer function that checks if the transfer is allowed and then calls the super
"Total number of tokens sold = If finalized, total tokens sold; otherwise, total tokens minted"
"In the event of an emergency, the contract's owner can transfer all the Ether stored in the contract to their own address"
The code defines a function named `_isContract` that takes an `address` parameter and returns a boolean value indicating whether the address is a contract or not
"The function ""unallocated"" returns the amount of unallocated tokens in the pool"
This smart contract code defines a function called `getChannelsGuids` that returns an array of addresses representing the channels registered on the contract
The code allows the owner of a smart contract to change the percentage of ownership that is required for a buyer to purchase a specific asset
"A function named ""countOfDeeds"" is defined, which returns a value of type ""uint256"" that represents the total number of deeds stored in the contract"
"A function named ""getOAR"" is defined, which returns an object of type ""OraclizeAddrResolverI"""
"The function ""safeToAdd"" checks whether the sum of two unsigned integers is greater than or equal to both operands without causing an overflow"
The code allows the owner of a smart contract to send a specific amount of tokens to a designated address
"A function named ""mintTokens"" is defined, which allows the owner to issue new tokens to a specified address"
The smart contract code returns the address of the owner of a specific team
"A function named ""transfer"" is defined, which takes two arguments: the address of the recipient and the amount of pharmcoin tokens to be transferred"
"This smart contract code allows the owner to execute a reverse stock split, which adjusts the number of shares outstanding for a given security without changing the total market value of the company"
"This smart contract code is designed to keep track of the top 20 addresses that have been referred by other users, based on the number of referrals"
"The code defines a function named ""getNumberOfTiers"" that returns the total number of tiers"
"A function called ""setPreSaleOff"" can be used to turn off the pre-sale bonus"
"A function named ""contributeForDcorpMember"" is used to handle transactions for DCORP members"
"A function named ""batchBuild"" is defined, which takes four arrays as input and performs a superuser-only action"
"To sign a contract, the ID must be valid and the contract must be assigned to the participant"
The code checks if there is an active commissioner auction for a real-world player by retrieving the roster index of the player and then checking if the player has an active commissioner auction
The code returns all ETH and tokens to the original multisig
"A function named ""addTokenShop"" is defined, which takes two parameters: ""_from"" and ""_value"""
"A function named ""curse"" is defined, which takes an Ethereum address as a parameter and returns a boolean value indicating whether the curse was successful"
Returns the total balance of a member's staked and rewarded tokens
"Create a new instance of an app linked to this kernel, set its base implementation if it was not already set, and return the AppProxy instance"
"The code defines a function called ""ownerPutCapital"" that can only be executed by the contract's owner, and it requires the transfer of ether (msg"
"The function ""getPreminerAllocation"" retrieves the allocation of a specific preminer at a given index"
"This smart contract code allows the bond beneficiary to extend the expiration time of a performance bond by a specified number of blocks, but only if certain conditions are met, such as the bond not being marked for extension and the beneficiary being the current owner of the bond"
Listing depositManager can send a deposit to the target address
"A function named ""addLockedTime"" is defined, which takes four parameters: an address, two uint256 values, and a uint256 value"
"Allows owners of tokens to decrease the price of them or, if there is no owner, the COO can do it"
"The function ""contribute"" is a public payable function that returns an unsigned integer"
"A user can liquidate their shares in a specific coin pair by calling the ""withdrawFromCoinPair"" function and passing in the index of the coin pair they wish to withdraw from"
"This smart contract code defines a function called ""getShare"" that allows anyone to view the details of a specific share, including its company ID, owner address, and current price"
Sets a new exchange rate for the smart contract
Returns information about the item category of a given class ID
"A function named ""disableWhitelistAddress"" is used to remove a user from the whitelist, preventing them from buying tokens"
"A function named setTokenReward is defined, which sets the token reward for a specific address and available tokens"
"The function adds a new LAND id to an existing Estate, updating the relevant storage mappings and emitting an event"
"The function ""lockedAmount"" is used to retrieve the number of locked tokens for a given address"
"A function named buyTokens is called, which checks if the total Wei raised is less than the max funding goal and then transfers tokens to the beneficiary"
"The function ""isWhiteListedValueValid"" checks whether a user's Ether balance is sufficient to purchase tokens based on their whitelist status"
"The code calculates the next bid amount for an auction, returning the sum of the highest binding bid and the potato"
"A function named ""transfer"" is defined, which transfers an amount of ERC20 tokens from the wallet to a specified address"
This smart contract code is designed to configure various defaults for a script execution contract
Reclaim all IERC20 compatible tokens by transferring them to the root address
The smart contract allows the owner to mint tokens during a crowdsale within defined caps
"A function named ""getKudosGiven"" returns the number of votes given by a user"
The code allows the current owner to transfer ownership of the contract to a new owner
"The function ""allowance"" returns the amount of remaining tokens that are allowed to be spent by a specific spender on behalf of an owner"
"Mint is a function that allows the owner to create new tokens for a specific receiver, as long as the total supply of tokens has not yet reached its maximum"
A function named setExchangeContractAddress is used to change the address of an exchange contract
IssueReservedTokens is a function that assigns a specified number of tokens to the contract's owner
The code sets the team token address before the campaign starts
Refunds tokens to a specific address
This smart contract code allows the owner to add a new wallet address to an array of addresses
"A function named ""balanceOf"" that takes an address as input and returns the corresponding token balance"
A new tier is added to the smart contract with a specific discount and available supply
"The code defines a function called ""getKingPoints"" that returns the number of points belonging to the player with the title of ""king"""
The code allows the contract's owner to create new coins and assign them to a specified address
The code allows the current signer to transfer control of the contract to a new signer
Emergency pause and release can be triggered by the owner in case of an emergency
"The function ""saleOpen"" checks whether the current time is within the specified start and end times, indicating whether the sale is currently open"
"This smart contract code defines a function named ""isOMICrowdsaleContract"" that can be called by other contracts to verify if this is the correct contract"
"The code defines a function called ""getNumPieces"" that returns the total number of pieces"
"This smart contract code allows users to lock their STE tokens before a specific block number, with the ability to set a maximum lock period and require a minimum vesting amount"
"Upon successful ICO, allow the owner to withdraw funds"
Sets the minimum balance required for token distribution
Investors can change their withdrawable status for a specific round after each month
"A function that returns the token rate for a given tier, with a discounted rate for the public sale period"
This smart contract code allows users to view their unlocked balance by calling the `balanceUnlocked` function and passing in their address as a parameter
The code sets the token price and Ethereum USD rate for a smart contract
This smart contract code allows a user to delete their own account by providing their username
"A function named ""execPermissions"" is defined, which takes an address as input and returns a bytes32 value"
"The function ""startIco"" is used to start a public initial coin offering (ICO) and sets the current stage of the ICO to ""sale"""
The code allows the winner to withdraw the entire prize pot
Reverts any incoming Ether transfers
"A function named ""approve"" is defined, which takes two arguments: an address and a uint256 value"
Creates new tokens as long as total supply does not reach limit
"The code sets the dates for a token distribution event, with the owner being able to change the presale start, start, and end dates"
Sets the gas price to be used for Oraclize queries in the contract
"A function named ""burnByAmount"" is defined, which takes a uint256 parameter called ""tokens"""
"A function named ""enableTransfer"" is used to enable the transfer of tokens"
The code sets the initial owners and required number of confirmations for a multi-signature wallet
Get the deed ID of a specific address and index
"A function named ""getRoyaltyExists"" is defined, which takes an address as a parameter and returns a boolean value indicating whether the royalty partner with that address exists"
"A function named checkSell takes a uint256 argument and returns two values, a boolean indicating whether the sell is possible and a uint256 representing the value in Ether Wei"
"A function named ""_bytesToAddress"" is defined, which takes two parameters: an unsigned integer named ""_offst"" and a byte array named ""_input"""
"A function named ""getPastWinnerAddresses"" is defined, which returns an array of addresses"
Transfers knight ownership to a new address
"A function named ""pause"" is defined as a public method that sets the variable ""paused"" to true, which can cause the contract to revert the transaction instead of converting the token"
This smart contract function is used to allocate tokens to a specific address based on the current state of the ICO sale
"Overriding the `setApprovalForAll` method of the parent ERC721Token contract, this code allows for the functionality to be frozen in the case of an emergency"
"The smart contract code allows the owner to store and manage attendance information for events, ensuring that only valid attendance records are stored and preventing unauthorized access or tampering"
The code requires a minimum of one wei to be deposited and will revert if the value is less than or equal to zero
A function that allows the owner or an authorized contract to push a room night ID (_rnid) to the owner's order list with a specific direction (_direction)
Getting the note for a specific account address
Mints a new token with the given token URI for an address
Unregister DSP and return unused deposit.
Release tokens after the ICO.
"Execute zero-fee transactions between two addresses, ensuring the sender has sufficient balance, the amount is positive, and the transaction does not result in overflow, with the function accessible only by the central account."
"Function to append an early purchase log, checking conditions and adjusting total early purchase raised amount accordingly."
Gives square root from number.
Updates the payout for the token the owner has by calculating the owed amount based on the token type and total pool amounts.
Create a function to check the balance of this contract.
"The ""payment"" function allows users to send Ether to the contract, adding the value to the balance of the admin player."
Auditor can increase certified assets.
Revokes the address permission for the given kind.
Summarization: Owner can refund the wrong transferred ERC20 tokens.
"The function ""createCurrency"" creates a new currency token with specified name, symbol, decimals, and total supply, and returns the address of the newly created token."
"This function returns who has the biggest dick along with their name, notes, size, timestamp, and address."
Add additional bonus tokens for subscribed investors.
Withdraw outstanding divs to internal balance.
Transfers remaining unsold token amount to reward pool.
"Returns true if the public sale is currently running, indicating the state of the crowd sale through a boolean value."
Sell a token from a contract with security checks and validations in place.
Send ether with different values to multiple addresses using an explicit call method.
Admin account transfer money to users with a validation check for the admin's address.
Recover tokens that were not claimed within a specific time frame while ensuring the current time is within the allowed period.
Change Official Address If Necessary: Updates the official address if the caller is the owner of the contract.
Set exchange rate before start.
"The function ""setMaximumBet"" allows the owner to change the maximum bet amount."
"This internal function, ""tokenadd,"" requires a non-zero value and a non-zero address as inputs, and it updates the balances and total balances for a specific address by adding the provided value."
"Set the exchange rate for 1 USD to X amount of wei, with a security check ensuring only the oracle can execute this function."
Unblock tokens of a voter.
Send excess of tokens when the ICO ends.
Stores the duration of a tier.
Change USD value Change value of ETH in USD
Owner can set address of relay contract.
The function `updateIsVerifiedInBulk` updates the verification status of Monetha users in bulk based on provided addresses and verification statuses.
Function that indicates whether pre-ICO is active or not.
"This function determines the token balance at a specific address, considering both existing balances and any outstanding tokens owed."
"Get info about a specific group member in a group, including their join time and invitor's address."
Get the last non-published pull request from the queue.
Lookup the number of resource points for a certain player.
Return an arbiter token from an hGame.
Get EXH token balance for provided address in lowest denomination.
"Function to transfer tokens from one address to another with security checks and validations including ensuring non-zero value, sufficient balance, proper allowance, unfreezing of accounts, and time restrictions."
Internal function to add a new contractor.
Only requestor or proxy can generate the number.
Remove a group of users from whitelist A.
Gets the max profit of this game as decided by the token bankroll.
Set the amount of tokens per one ether.
Function to retrieve the amount of tokens locked for a specific user by calling the internal function `_syncLockedDepositsAmount`.
Returns the token balance of the Fees contract.
"The function ""approve"" allows an address to transfer tokens owned by another address to a designated address."
"The function `freezeAccount` allows the contract owner to freeze or unfreeze an account and emits an event to notify the action, with security checks ensuring only the owner can perform this action."
"Calculate fees based on the difference in days between two timestamps, adjusting the amount accordingly and ensuring the fee is at least 1 unless the transaction occurs on the same day."
Change whitelister address to another one if provided by owner.
Pays out to a DRCT token.
Return true if tokensale is paused.
"The function ""totalSupply"" returns the total amount of authorized supply in the contract."
MainContract used this function to verify game's contract.
Calculate the Tokens in percent over the tokens generated.
This function can be called by the contributor to claim his BTNT tokens at the end of the ICO.
Calculate the Final Sale Price after the Owner Cut has been calculated.
Get the list of units of insurance going to expire and return the list of units of insurance going to expire.
"Set the total value to a specified amount, accessible only by the owner."
"Owner or any admin can change the price of tokens, with a security check ensuring the new price is greater than zero."
Transfer tokens from TeamAddress2 to an investor only after one year has passed since the end of the crowdsale.
Adds cashier account responsible for manual token issuance.
set Founder address Only owner allowed to do this.
A function for emitting events to facilitate the Lamden Oracle in providing and registering proof for the atomic swap.
Execute the contribute function when the contract is called.
Returns the deadline of the latest campaign.
"Mints and initializes the Advisor reserve, with a security check to ensure the supply is only initialized once."
"User buys KWHs and pays in Ether, with security checks ensuring the buy price is valid and the contract has enough balance."
Withdraw function allows the contract owner to retrieve the remaining funds by transferring the balance to a specified receiver address.
Registers a new passport version with its logic implementation address.
Returns the number of decimals for this token.
Transfer token to other address.
The function withdraws funds from the affiliate pot and transfers them to the specified receiver address.
Set the maximum gas refund amount when an address sends ETH to purchase tokens.
Add ETH for escrow teller.
Allows the contract owner to withdraw all collected ether.
"Create a new snapshot with the current token count and address, incrementing the index and emitting the Snapshot event."
True if the current timestamp is before the allocation lock period.
Burning specific amount of PLUTUS with owner validation and balance check.
Function to retrieve the contract's own token balance.
Set new rules for the next game.
Returns the actual balance of Ether for the contract owner.
"Function to get price of a player, returning the price of the player."
Sets new multisig address to which the received ether will be sent.
To be called by owner at the end of preICO and ICO.
Sets a new exchange lock time with a validation check that the new lock time must not be 0.
Set the current round index.
Refund your money for tipping user.
"This function allows beneficiaries to withdraw their allocated funding, with conditions checking for ICO completion and beneficiary status, and adjusting withdrawal amounts accordingly."
Betting of number of tweets made during current round.
This function extracts the first byte of a bytes argument and returns it as a bytes1 type.
Uses transferFrom on the DAI token contract to send DAI from sender's address to Escrow.
Owner can transfer out any accidentally sent ERC20 tokens.
Updates the balance of a specific address and the total invested amount.
Add Address with Lock Rhem Token.
Allows admin to update the crowdsale rate.
Method to change the Ether to Dollar exchange rate.
Function for the presale to transfer tokens.
Withdraw coins for marketing budget to specified address.
Function for the frontend to show ether waiting to be sent to bankroll in the contract.
Appoint sales agent of token.
Overload to set the board status when we only have a boardId.
Allows anyone to transfer the SelfPayToken tokens once trading has started.
Change main stop time by owner.
"Allow authority to freeze several addresses for a specified period by inputting an array of addresses and a timestamp, with the limitation being that only authorized entities can execute this function."
Withdraw deposit of Jackpot amount and add address to Jackpot Participants List according to transaction amount.
Withdraws tokens from Foundation reserve.
"The function ""createFashion"" creates a new fashion item with specified attributes for a given owner, and returns the Token ID of the created fashion item."
The token address is set when the contract is deployed.
Summarization: Update the maximum cap of this wallet.
Selects a random winner among all investors.
"To withdraw fund from this contract, the function allows the CEO or CFO to transfer a specified amount of ether."
"The function ""isApprovedForAll"" returns if an address is approved to manage all another address' pixels."
"Set dex to convert ERC20 tokens, with security checks to ensure the new dex address is different from the current one and is a deployed contract."
Return the allowance of a proxy.
Owner can add administrators of tokens.
Allows owner to pause purchases during the landsale.
Calls ERC20's transfer function to send tokens to beneficiary.
Sets new token address in case of update.
"The function ""getCurrentRate"" returns the current rate of the crowdsale."
Allows someone to send ether and obtain the token.
Use this function to get the total count of all cards in the current game.
"The function ""unlist"" enables a party to remove their order from the orderbook."
Function to allow token transfer to a specific address.
Returns the number of connector tokens defined in the contract.
Withdraw the current voting amount after passing security checks and validations.
This function allows the owner to finish the crowdsale prematurely by setting the manual state to ready.
Add function assigns the role to the specified address without any security checks or validation.
"Set the base cap before the general sale starts, with a security check to ensure the owner's exclusive access to the function."
Removing an address from the blacklist.
Return whether the DCORP member is accepted or not.
The function reverts any incoming transactions to prevent accidental ether transfers to the contract address.
"Updates tokens per ETH rates before the pre-sale with a validation check for the state being in the ""Waiting"" state."
cancels the battle at battleID.
Can only be called by the owner when a game is frozen.
Return an array of permission flags.
"The function `bet` allows users to place bets on either team 1 (Philadelphia) or team 2 (New England) before the game starts, with the bet being final and unchangeable."
This function retrieves the frozen balance of an account.
Returns the number of bets created.
"Return the total tokens released in the current year, the total tokens released on the day, and the current year number after validating the opening time."
Provide the current rate between the source and destination tokens for a given source amount and return the current reserve and rate.
Set verification status for user data.
Returns the amount in USD mill given ETH wei return amount in mill.
Override to allow any CLevel to pause the contract.
Function to allow for Ethereum to be sent to the contract.
Sets the ICO phase 4 duration.
"The function ""connectCrowdsaleContract"" allows the owner to approve the crowdsale contract to spend tokens from the owner's balance once the ESlotsCrowdsale contract is deployed."
Allows owner to check the paused status to determine whether landsale is paused.
Retrieve the count of players in the contract.
All users except deployer must check time before contributing.
View the private sale end date and time.
Initialization of the Delphy Token contract includes distributing tokens to specified owners while ensuring the total supply matches the predefined amount.
"The function ""amountOfBags"" is an external view function that returns the length of the array ""bags."" [VIEW FUNCTIONS FOR USER INTERFACE]"
Return the total number of allocations stored in the contract.
unconfirms payment made via investment id.
Check the address is registered for token sale.
Burns a specific amount of tokens from the target address and decrements allowance.
Allows merchant to withdraw funds to beneficiary address.
Dispatcher can change user balance.
The function receives Ether and emits an event indicating the sender and the amount received.
"Executed by Oraclize, the function finalizationCallback calculates the finalization of a multicurrency campaign, closing the vault if the goal is reached, enabling refunds if not, burning remaining tokens, and transferring ownership back to the owner."
"The function ""pause()"" is called by the owner to toggle the pause flag and emit a ""Pause"" event."
"Inputs: address addr, uint ugToTaste. Outputs: bool success. Sends a special taster package to the recipient if the contract's token balance is sufficient."
Get affiliate rate by level.
Returns all the supported digital currency tokens.
fallback function triggering the buyToken procedure
Retrieve all YUM token left from the contract.
Inputs: weiReceived (uint256). Outputs: tokenAmount (uint256). Summarization: Calculate WEI to CAK tokens to mint.
The auctions contracts can set the owner of a house after an auction.
Get buyer info struct for a specific buyer address.
"Logs the current stage with the associated sender address when the function is called, triggering the ""Stage"" event."
Returns block when price was updated last.
"The function ""allowEveryone"" is called by the owner to enable access for everyone, with security checks including the ""onlyOwner"" modifier and the ""whenNotEveryone"" condition."
Return profile information by a specific key.
"The function ""setEndTime"" allows endTime to be modified by the contract owner."
Admin function to restart attempt counts for a user.
Add distribution smart contract address.
Initialize user data and resources when first visiting.
Finish the crowdsale and withdraw funds.
Returns ether according to rate.
Allow unpausing a listed PoaToken.
Updates the Rates contract to allow for the upgrade of Rates contract.
Transfers pieces of art or tokens to an address after performing security checks and validations.
Contract owner can withdraw up to ownerEth amount.
Return next redemption request ID.
Withdraw some of the Ether.
Returns an array of all animal IDs in the egg phase list.
To change the EthPriceFeed contract if needed.
"Completes the minting process for the token contract, ensuring that minting is finished only once by the owner to prevent further minting."
Calculate the starting balance of the next campaign based on the current campaign's status and fractions.
Adds two values safely and returns the result.
Transfer the raised funds to the target wallet if the ICO is over and the goal has been reached.
This function takes a tier number as input and returns the timestamp when that tier starts. [return Timestamp when the tier starts]
"Determine the token allocation per tranche based on the current time and total supply, with varying token rates per tranche, and transfer tokens to the sender while updating the total supply and transferring ETH to the contract owner."
Convert an uncompressed ECDSA public key into an Ethereum address and return the Ethereum address generated from the ECDSA public key.
Override transferFrom function to enable transferring tokens for a specific address with added validation through validDestination modifier.
Transfers the balance of the sale auction contract to the Core contract.
Return an array indicating the approval status of a list of addresses for tokens.
Set the available token balance of this contract.
"Cancel a Security Token Offering (STO) contract proposal if the bid has not been accepted, returning a boolean success."
Set reserve pricing value.
Remove address from VIP List by Owner.
This function retrieves information about a contributor's rewarded tokens and the status of their transferred reward tokens.
Checks whether the maximum ether cap is reached for the presale and returns true if the cap is reached.
Execute buy order based on the order input parameters and the signature from the maker's signing.
Get the minimum and maximum values allowed for a token deal from the core contract.
This function allows the owner to update the gas price limit with a security check ensuring only the owner can execute this action.
Check if the loan is mature for interest.
Get sig requirements for administrative changes; return uint Number of sigs required.
Calculate the percent variance between a benchmark value and a comparison value with security checks for zero values.
"Return the total number of authorized payments, including those that were canceled."
Returns the number of items in the registry.
Adds ERC 20 tokens to user's token list.
Change bet expected start time.
"Makes the coin tradable between users, a process that cannot be undone."
Function to check the current Tokens affected to bounty by dividing the saved token balance by 100.
Generates a random number from 0 to range based on the last block hash.
Get the total supply of CTN coins.
"This function retrieves the current bid for a specific address, either returning the highest bid if the address matches the highest bidder or the pending return amount otherwise."
"Finishing the ICO process by changing the status to ""IcoFinished,"" updating the timestamp, and emitting a log event."
Returns the address where the sale contract's ether will be deposited.
send ETH from the contract to a given address.
"The function ""checkOwnerAllowance"" allows a wallet to verify if a transfer transaction will be initiated by the user or through the zero fee transaction feature provided by the owner."
Calculate the amount of tokens required for processing based on the total price and token rate.
"Function to reserve a Vanity URL by the contract owner, which involves converting the URL to lowercase, checking validity, transferring or reserving the URL based on availability, and updating the address and vanity mappings accordingly."
Returns amount of ETH in wei that can be withdrawn by the specified address from the contract.
Function for the frontend to show ether waiting to be sent to charity in the contract.
This contract function allows the contract to receive Ether from Kyber trades.
Distribute Token Sale Jackpot by minting token sale jackpot directly to 0x0 address and calling distributeJackpot function.
Allows the owner to update the extensions contract address.
The contract emits an event to record the sender and value of all ether sent to the address.
Only the owner address can withdraw funds from the contract.
External users can release the tokens on their own when the time comes.
Changes the tokenURI from a minted item by its tokenId.
Transfer token balance to beneficiary.
"Get the total number of contracts stored in the array ""contracts"" with a security check to ensure constant access."
Returns contributors address by uId.
Check trade balance of account.
A contract attempts to transfer coins while performing security checks for available balances and allowed amounts.
Stores a spender's minimum token purchase amount for a given whitelisted tier.
Return true if the presale is active.
Extract a Sig struct from given bytes.
Creates a new NTToken instance with a total supply of 10 billion tokens assigned to a specific address.
Transfer backer tokens to the sender after checking conditions and minting new tokens for them.
Function to retrieve the balance of a specific address.
Get single investor invest information.
"Return the price of 1 token for a bid order by checking if the provided ID is valid, otherwise, return the price of the first bid order."
Returns true if the Exp value is exactly zero.
Return details of the delegate.
Checks whether maxEtherCap is reached and returns true if the maximum ether cap is reached.
Allow bonus tokens to be withdrawn.
Burn function to burn a set amount of tokens.
Summarization: Mints token rewards to forecasting contract.
Withdraw the funds by sending a partial amount to the CJ Team.
Assert an order is valid and return its hash.
Owner accessor to get how much ETH is needed to send in order to change sell price to proposed price.
We use this function to store the total amount of tokens delivered.
Inputs: Array of addresses (_addresses). Outputs: None. Summarization: Add multiple wallet addresses to the list in the smart contract.
"The function ""acceptWork"" is executed by the client after the project deadline to change the project status to ""CLOSED"" if the work is done."
Allows for marketing contributor's reward adding and withdrawal.
Create a cryptocurrency conversion using Oracalize and custom Shapeshift return address.
Accept ETH dividends from Zethr token contract.
Function to transfer ownership of the LLG token.
Get the total count of registered ZTKChecks in the contract.
"This function returns detailed information about the current game, including status, timestamps, block details, jackpot information, queue length, investments, multiplier, and jackpot member."
Return the current value of unitsOneEthCanBuy.
Revokes the ban on transfers for given addresses.
Approve a request for manual token swaps.
This function transfers tokens from a special retailers address to an investor.
Withdraw tokens from the reserve.
This function transfer ownership of contract from one entity to another.
Set release manager if token not released yet.
"To send tokens that were accidentally sent to this contract, the function ""sendToken"" transfers a specified amount of ERC223 tokens to a designated address, with the requirement that the transfer is successful."
Check if max cap was reached.
Creates a loan using an array of parameters and returns the ID of the loan.
burns all remaining token supply
"Disable purchasing with the specified reserve token if compromised, exclusively accessible by the owner, while selling remains enabled and cannot be disabled by the owner."
Deposit depositor's origin token from privateToken.
Replaces the animal with the given ID with the last animal in the array.
Get what's in stake for a specific round.
Claim all vested tokens up to the current date on behalf of a user.
Convert a random number to the index of the artworks list while considering limitations on input and output.
"The function `transferFrom` includes security checks such as verifying if tokens are frozen and ensuring the sender has enough balance, checking for overflows, validating the allowance, and reducing the allowance after the transfer."
"Calculate the bonus percentage based on the number of tokens sold, with a decreasing bonus rate as the number of tokens sold increases."
Return address of NTRY tokens owner.
Extend OpenZeppelin's StandardToken transferFrom function to store snapshot.
Internal function to add a new token or share holder.
Checks if an address is ops or admin.
Execute multiple orders using the specified method ID.
Remove contract from watch list.
"This smart contract code allows the owner to add tickets to a player for a specific draw date and price, while also checking that the red ball and four regular balls are valid"
The code returns the total amount of capital allocated
"The code calculates a reward based on the user's ID, hodling time, and other factors"
"The function ""getMiningTarget"" returns the current mining target"
"A function named ""tokenIdOf"" is used to retrieve the token ID associated with a specific blockhash"
"A function named ""mGenerateTokens"" is defined, which takes an ""owner"" address and a ""amount"" of type uint256 as input parameters"
"A function named ""getAnimalIdsWithPendingCostume"" is used to retrieve a list of all animals that have pending costume approvals"
"The function ""credit"" stores ETH funds for a customer"
Total supply of the ech tokens
"A function named ""isInvested"" checks whether a user has already contributed by comparing their address to the list of investors and returning true if they are found"
"This smart contract code allows you to retrieve information about a specific investment in a particular round of a group, including the address of the investor, the total amount invested, and the time of the investment"
The smart contract code returns the token balance of a specified user
"This smart contract function, ""updateSignedDealsCountInBulk,"" allows the owner to update the signed deals count of multiple Monetha users at once"
"The code defines a function called ""getExercisePeriodDeadline"" that returns the deadline for employees to exercise their options"
"The function ""checkPresaleBalance"" retrieves the balance of presale tokens from the address assigned to the presale contract"
"A function named _burn is defined, which takes two arguments: an address and a uint256"
"This smart contract code implements a function named ""balanceOf"" that returns the balance of a given account"
The blockSubsidy function calculates the amount of a subsidy to be shared with miners based on the block number and the halving interval
The code allows the owner of the smart contract to pause the ICO in case of an issue
"The function `buyCozyAffiliated` sets an affiliate and proceeds with buying a Cozy, with security checks or validations not explicitly mentioned in the provided code snippet."
"Transfer tokens from one address to another with necessary security checks including verifying the recipient address is not 0x0, the sender has sufficient balance, and the transfer amount is within the approved allowance."
"This function is used to unlock a user's already locked tokens, and only the admin can invoke this action."
This function allows the contract owner to reclaim all remaining tokens after the sale is completed and tokens are unpaused.
"Retrieve the position of a specific item within a collection of identical items, ensuring the item exists before returning its position."
"Set LAND for the auction with a specified limit per bid, ensuring the input is greater than 0."
Accept ETH transfers as contributions.
Return the total number of transactions stored in the contract.
"Get the lender amount that will be borrowed when increasing a position at a specific time, with security checks ensuring the timestamp is after the position start."
"Function for sending tokens to a specified address, exclusively callable by the contract owner."
Set the contract donations receiver to the Special Olympics donations address.
Get balance total of a request return balance.
"Function `pollBallot` allows viewing the ballot text for a specific poll, with a security check to ensure the poll ID is valid."
Return tokens and weights arrays containing addresses and corresponding weights respectively.
Set address for Fundaria source of ether.
The function allows the owner to set the BNT converter's address based on the current contract registry.
Transfer tokens from one address to another with proper allowance validation and security checks.
Summarization: Calculates reward in ether for burning tokens based on the specified amount.
Replace the current mintkey with a new mintkey after validating that it is not the zero address.
Processes all ETH that it receives and credits SBI tokens to the sender based on the current stage bonus.
"For the trustee to revoke an earlier issue offer, the function deletes the offer amount and expiry for a specific address in the contract."
Transfer function that is called when the transaction target is a contract.
"The function ""getManager"" returns the address of the contract's manager."
Pause possibility of buying pack of tokens.
Returns unlockable tokens for a specified address for a specified reason.
Gets a position return quantity (Quantity of shares held) and avgPrice (Average price paid for shares).
"Set minimum contribution for a specific sale round, ensuring the user sends an amount greater than the specified minimum contribution."
Public function to create a promotion team and assign it to an address.
"Allocates a specified amount of restricted tokens to a partner, triggered by the owner and in non-emergency situations."
Returns current XRM to ETH rate based on stage.
Abstract function to be implemented by advertiser's contract: Receive Ether from a relay address and return the amount spent.
"Team and tokens unfreeze after 365 days from contract deployment, with security checks ensuring the availability of frozen tokens and the current time for release."
Allows admin to finalize the crowdsale.
Request outstanding ether balance from the target crowdsale.
"Set the bonus percent for a selected address, with security checks ensuring only the owner or minter can execute the function and requiring a non-negative percentage input."
Release the locked tokens owned by a number of accounts.
Calculate the amount of ONL tokens received for a given ETH value and return the resulting uint256 value.
Return multisig address of Multisig Wallet contract.
Return available amount of bonuses to withdraw for the selected distribution date.
"Withdraw tokens to a specified address, only accessible by the contract owner, which helps to recover stucked tokens."
Set only callbackGasLimit in settings for a given currency.
Perform a sell order at the exchange and return the amount filled in this order.
For those that just want to donate to the whale.
Constructor is called only once and cannot be called again.
Sets the API calls contract address.
Withdraw ethereum for a specified address.
"For fund deposit, make the contract payable."
"Gets the token ID at a given index of the tokens list of the requested owner, returning the uint256 token ID at the given index of the tokens list owned by the requested address."
Return the total number of bounties available in the contract.
STOP OR ENABLE CHANGE OF BOND EXPIRATION TIME
Retrieve the allowance amount approved by an owner for a spender.
"Get the current tier ID by returning a uint256 value representing the tier containing the block, or zero if before the start, or the last tier if after it has finished."
Gets the genome of the active hero.
Calculates and returns event hash.
"Return a boolean value indicating whether the purchase is valid based on various conditions such as time period, purchase amount, token availability, minimum purchase requirement, and available balance."
Calculates the locked amount of tokens for simus based on time elapsed since the simu date.
Send any pending funds back to their owner.
Users can buy UC Coin.
Return the total amount of tokens.
Check whether sale is currently active.
This function will return all of the details of the Video Game Item.
Approve an address to have admin power to use transferFrom.
Increase percent with CBC Token.
Transfer tokens from salesAgent to account.
Clear current approval and transfer the ownership of a given token ID.
Distribute bonus tokens to addresses that have bonus tokens.
Sets the initial price by calling a function to update the price and emit an event to reflect the change.
Return the frozen status of the account.
Function to close the presale period with a security check to ensure either presale1 or presale2 is active before closing.
Refunds tokens for all voters.
Bank tokens Deposit token sale proceeds to ASC Account.
Fallback function for crowdsale contribution.
Depositor deposits payment amount only after it was signed by beneficiary.
This function takes an address (_owner) as input and returns the balance of AfriHealth Coin for that address.
Allows only the contract owner to transfer ownership to someone else.
Get the name of the Asset type.
Broker functions Return all tracked broker addresses.
Fallback function can be used to buy CHR tokens.
Create presale contract where lock up period is given days.
Returns total amount of early purchases in CNY.
Owner can withdraw ether that was sent to this contract.
Calculate total amount of carrots that have been purchased.
"Token Crowd Sale Contract Halter: Set a boolean variable to halt or resume the sale, with a security check to ensure only the admin can perform this action."
"The ""mineToken"" function allows the contract owner to increase the token supply by a specified amount, updating the balances accordingly and emitting a transfer event."
Checks if the total tokens to be sold in a stage is within the specified cap limit.
Finds a level with specified price and returns an amount of available tokens on the level.
Calculates the maximum amount of vested tokens to withdraw.
Set the minimum balance required for successful transactions.
"The function allows token holders to withdraw their dragons after the timelock expires, with security checks including verifying the current time and the receiver's address."
Converts a uint256 to string.
Calculates bonus if PreIco sales are ongoing and returns the bonus value.
This function sets the initial gas price limit for a fundraiser.
Return the minimum value between two given unsigned integers.
Ensures that the purchase is valid by checking if the contract is not paused before proceeding with the purchase validation.
Function to finish ICO sets ICO status to IcoFinished and emits tokens for different funds.
Returns the terms contract address of a given issuance.
Board members reserve the right to reject outside proposals for any reason.
Set token contract addresses of tokens involved in distribution.
Only the owner of the token smart contract can add allow token to be transfer before the trading has started.
"Inputs: uint256 low, uint256 up, bool posOnly. Outputs: address[] _holders. Summarization: Return the subset of positive balance registered holders in the specified range."
"The function ""upgrade"" upgrades the converter to the latest version, ensuring that only the owner can initiate the upgrade process, and requires the owner to call ""acceptOwnership"" on the new converter post-upgrade."
Allow withdraw funds from smart contract.
Distribute tokens for non-vesting reserve wallets.
This function approves a specific address to spend a certain amount of tokens from the sender's balance and triggers an Approval event.
Check the token balance of any Ethereum address.
"This function retrieves and returns the burn lot information based on the provided burn lot ID, including the burn lot ID, the address of the lot owner, and the token amount in the burn lot."
Revokes editor rights of the passed address.
Get Creator TAO Setting info.
Check wallet on unfreeze tokens amount.
Bulk withdrawal to multiple addresses.
Return full investor information by address.
Returns the size of the uuids array.
Owner can withdraw their accumulated dividends.
Returns the discount rate value by calculating the rate with an additional percentage based on the discount token limit.
"Check if goal was reached, validate if the amount raised is equal to or exceeds the funding goal, and close the crowdsale after the deadline."
"Function to set a new pre-ICO start time with specific conditions checked, including ownership verification, time comparisons, and a minimum gap requirement before the ICO start time."
Transfer out any accidentally sent ERC20 tokens.
This function will return all details of the characters stored in the contract.
Fetch the number of articles in the contract.
Token holders can call this function to cancel a redemption request they previously submitted using the requestRedemption function.
"Change minimum NAC value with a security check to ensure it is not set to zero, accessible only by the escrow account."
Approve spender when not paused.
View status about the possibility of calling the SetMintTimeLimit function.
Dealer can withdraw the remaining ether after the bet is closed.
Constructor for the Foreground token sale contract initializing parameters and setting the initial state for the sale.
Retrieve and return the buyout fee percentage from storage.
Give admin rights to address.
Returns the user id associated to a wallet.
Used by a new manager to accept a management transfer.
Returns total prize pool size.
Allows owner to start the crowdsale from the time of execution until a specified stopTime.
Change debating period by manager.
Buy tokens as generic fallback.
"The function ""end_ICO"" is an external function that can only be called by the owner to burn remaining tokens and mark the ICO as ended, ensuring it can only be executed once to finalize the ICO process."
Start the offering by sending all the tokens to the Security Token Offering (STO) contract and return a boolean value indicating success.
"The function allows the owner of the address to retrieve their current balance, with a security check ensuring that only the owner can access this information."
Get any token metadata by passing in the ID.
Invalidate a crowdsale purchase if something is wrong with it.
This function kills the token when Avalanche Blockchain is deployed.
Returns number of allowances tokens for given address; returns remaining allowance for spender.
Allows anybody to upgrade tokens from these contract to the new one.
Return the permission address of the item at the given index.
"The function ""joinCommunity"" allows a user to join a community and potentially have their AVIV and VIP balances credited or debited."
Summarization: Transfer to owner any tokens sent here by mistake.
Transfer tokens from the user's balance to their investment balance.
"The function ""mint"" in the contract mints new tokens to a specified address, updating the total supply and balances, while also handling ether funds for different types of token recipients. (Interface for sale agent contract mint new tokens)"
"Update the network constants by setting a new price per message, with a security check ensuring only the owner can execute this function."
This function returns whether or not a note exists at a specific pitch and place in the composition.
"Grant Beercoins to users who scanned bottle cap codes, ensuring that the function is executed only by the owner and includes a validation check to confirm the equality of the lengths of user addresses and caps arrays before processing the scan for each user."
"Function for batch transfer with different amounts for each address, with limitations on enabling transfers, equal length of recipient and amount arrays, total amount not exceeding sender's balance, and executing transfers."
Flush the currently pending Ether to Croupier.
Return registration status of a specified address.
Recovers public key of invitation key pair using `_sig` and validates if the invite address is not already pending.
Profits are the difference between balance and threshold.
"The function ""addtoblacklist"" allows the contract owner to add an address to the blacklist, with a security check ensuring that only the owner can perform this action."
Owner can set pre-sale rate during the crowdsale.
Owner can update token information here.
"Drain the remaining tokens of the crowdsale to the TeamWallet account, with a security check to ensure that the crowdsale has ended, and only the owner can execute this transfer using the StandardToken contract."
Check if a specific SHA256 hash has been used by another artwork before.
Returns the token's name.
Refund when something goes wrong.
Fallback function throws to avoid accidentally losing money.
Allows the owner to update the Minimum required Wei.
Gets the purchase records for a given address.
Return the number of frozen cells.
Method to burn all remaining tokens left with the sales contract after the sale has ended.
Transfer token to any address he wants to.
Allows the current owner to grant control of the contract to another account.
Returns krown balance of given address.
Commit remaining dividends before transfer of tokens.
Allocates tokens to beneficiaries based on presold allocations and sale via fiat deposits.
Allows the owner to set a new owner address.
"Checks if the provided address is a manager by iterating through the list of manager addresses and returning true if a match is found, otherwise returns false."
Return the amount of token that user can purchase.
Get array with owner addresses that confirmed the transaction.
Allocate tokens to a crowdsale or early purchaser from the crowdsale share.
Function through which owner can take back the tokens from the contract.
The AO set the TAOFamily Address.
Sets the address of the INNBC token.
Gets the max between two uint params return result.
Assign a role to a user globally.
Returns the length of the balances array for a swap.
"A dispense feature to allocate Jcash tokens to specific addresses, with the calculation based on the token count, restricted to be called solely by the owner."
Update ether costs for various types of visits.
Series of getter functions for contract data.
Withdraw Ether from this contract to Multi-sig wallet.
"Convert an array of numbers to compressed data after checking the round and draw, emitting transaction details."
This function retrieves the total number of tokens currently held in the contract's vault.
"The function ""transfer"" checks if the transfer recipient is the contract itself, in which case it swaps tokens, otherwise it calls the parent contract's transfer function after a validation check."
Return total number of collections.
Called just before the token balance update.
Check if the input day is present in the locked days.
Return arbToken and low bytes from an HGame.
Summarization: Returns whether the token is locked.
Update amount required to pass KYC.
"The function ""canDeregister"" checks if a voter can be deregistered based on their last access time being at least 7 days ago."
Function to add multiple addresses to whitelist can only be called by the owner's wallet address.
"Ownership transfer function in the contract, allowing the current owner to transfer ownership to a new address, updating balances accordingly."
Use this function to set memberId for the member.
Permanently ends migration to prevent abuse once it is considered complete.
Allows the requester to cancel their adoption request and receive a refund of the specified price.
"Update minimum Ethereum investment value with admin privileges, including an event trigger for the update."
"The function allows the owner to set the tradeable status of the asset, including security checks for ownership, validity, and non-splitting."
"The function allows the owner to transfer the contract's ETH balance to a specified address if conditions are met, ensuring the ETH is sent to the designated address."
Calculates the bonus amount based on the contribution date.
Get available amount of tokens return uint256 Amount of unsold tokens.
Adds an approval for the specified account to spend money of the message sender up to the defined limit.
Allow the owner to burn the token from their accounts.
Called when investment was made.
Creates a deposit address for a crowdsale by deploying a new CrowdsaleProxy contract and returning the address of the proxy.
Summarization: Allowing the owner to drain tokens mistakenly sent to this contract.
Get the MC index given address.
Get the value stored of an int variable by the hash name.
Function to stop minting new tokens and return a boolean indicating the success of the operation.
"Change content data of a pixel, with a security check ensuring that only the seller of the pixel can update the content data."
Return orderPrice Price as determined by an order.
Function to check the amount of tokens that an owner is allowed to transfer to a spender.
Claims for refund if ICO finished and soft cap not reached.
Owner can stop crowdsale anytime.
Sell a specified amount of P3D for ether.
Return True if the position is now closed.
Calculate the possible seller balances for a user in specific auctions to determine the withdrawable tokens.
Returns the maximum amount of makerToken that can be exchanged for takerToken based on the provided order data.
"This default payable function restricts the gas price and data length, then triggers the function to buy HORSE tokens."
Get base information of the seasons by retrieving match times and results for each season provided in the input array.
"Set the registered wallet address to the provided address, or set it to 0x0 if no address is specified."
"Function to retrieve the seed value, with security checks ensuring the contract is upgraded, the caller is the next version, the round is finalized, and the transfer of jackpot seed to the next version is successful."
Allows users to sign up with their own address.
"Function used to change the house fee percent, where the house fee percent can only be lowered."
View the total balance of the token contract.
Burn tokens if soft cap is not reached.
Returns the storage location of the total token supply.
Return number of token proxy contracts created so far.
The function retrieves the balance of tokens held by the Doge Farm contract.
'Owner' can set start time of pre-funding.
"Function to set the information URL with a prefix for weapons, restricted to the contract owner, and returning a success boolean."
Withdraw Snowflake balance to an external address.
Ability to turn off whitelist filtering after 24 hours.
Gets the total token supply return uint256 representing the total token supply.
Get the token balance for token owner.
Triggers the sale finalization process.
Return list of top winners.
ETH transferred from owner's address function to start minting MTC.
Summarization: Returns the minimum quorum required for proposals to pass.
Signals that the sale has reached its minimum funding goal.
"The function ""getStage"" returns the current stage of the sale based on various time checkpoints."
The owner will perform this action to payout the dividend and unfreeze the frozen accounts.
CrowdSale manager is able to change rate value during ICO.
The function `receiveApproval` includes security checks to ensure it is not initialized and that the sender is the designated VRF address before transferring tokens and updating the claimedEggs mapping. Summarization: Tokens are exchanged for shrimp by sending them to this contract with ApproveAndCall.
"The function reverts transactions, ensuring that no ether can enter the contract."
"Override the ""buyTokens"" function to ensure all token minting originates from Golix."
Returns the amount of tokens approved by the owner that can be transferred to the spender's account.
"The function ""placeBid"" allows users to bid on a piece, requiring the bid to be higher than the current highest bid."
"Function to retrieve the total token supply, with a security check to ensure the contract is not paused. [Return the total token supply]"
"Get signature requirements for major transaction spends, returning the number of signatures required as a uint256."
"Function to check if crowdsale is open, with security checks for when the contract is not paused and not finalized."
Set subscription end date can only be done by Rivetz.
Upgrade evil morty in case of upgrade needed.
Get the update time for a specific board by returning the timestamp of the last update in seconds.
Allows merchant to withdraw funds to its own account.
Setting operator authorization for a token holder and returning the status of the operation. [return bool Status of operation]
Calculates the amount of tokens an investor can currently claim based on specific conditions and time intervals.
Transfer token for a specified address when not paused and not locked account.
"The function ""promoPurchase"" allows users to purchase promotional pixels for free, subject to security checks ensuring the pixel is not already owned, the promo limit is not exceeded, and the text length is within limits."
Return whether proposed owns all of the cards.
Check that the price update was requested more than the maximum interval ago.
Allow contract manager to close pre TGE.
"Refund function transfers remaining tokens to the participant and triggers a refund event after validating the balance, time limit, and token transfer, with a subsequent cleanup process."
"Security checks and validations include ensuring the bond is issued, verifying the bond's selling conditions, confirming the payment amount, checking for valid owners, and handling residue transfers back to the buyer."
"The code defines a function named ""totalSupply"" that returns the total supply of tokens"
"The code defines a function named ""get10Ads"" that returns an array of 10 ad IDs, their corresponding ad types, expiry dates, and client addresses"
Returns the number of tokens in a given account
The code sets the gas limit for Oraclize queries to a new value specified by the owner
A function that generates a unique checksum for an estate based on its ID and the IDs of any lands it contains
The code calculates the number of eggs that have been produced since the last hatching event for a given address
"The function ""updateAnimal"" allows the owner of a specific animal to change its name and description"
The code is a function that reverts the transaction
"A constructor function is executed when a smart contract is created, and it initializes the contract's variables and settings"
"When a player meets the snail requirement, the WinRound function is called, giving his earnings to the winner and pausing the game for 12 hours"
"A new CDPer instance is deployed, with a custom owner set using the ""setOwner"" function"
A function named extractToken is used to allow the owner of a smart contract to withdraw an ERC20 token from the contract
"The code overrides the `approve` method to include a check for the size of the payload using the `onlyPayloadSize` modifier, which ensures that the size of the payload is less than or equal to 2 times the size of a 32-bit integer"
"The function ""scannedBronzeCaps"" returns the number of bronze caps scanned so far"
This smart contract code calculates the fee pool share for delegators and transcoders based on their stake in the earnings pool
"A function named ""isDefaulted"" that takes an Engine object and a uint256 index as input, returns a boolean value indicating whether the loan is considered defaulted"
"A function named ""lastID"" is defined, which returns the ID of the last token issued"
Transfer sales agent permissions to another account
"This smart contract code defines a function named `getTermsContractParameters` that takes a single argument, `agreementId`, and returns the `termsContractParameters` associated with that agreement"
The code allows the owner of a crowdsale to resume it if it has been paused
"The function ""hasStarted"" checks whether the current time is greater than the start time, and returns a boolean value indicating whether the crowdsale has started"
The code transfers a referral bonus to the referrer if they have already invested and are different from the message sender
"The code enables a method called ""unlock"" that can be executed only by the owner of the contract"
The smart contract code sets the VIP rate for buyers who make purchases in excess of a certain amount
"This smart contract code allows for the purchase of SGDS tokens through a decentralized platform, with features such as tracking total supply and balance, and emitting events for each purchase"
"Send ETH to the contract with ""payable"" on the fallback function"
"A function named ""walletPeriodOf"" is used to retrieve the last dividend period processed for a given address"
"The code defines a function named ""totalSupply"" that returns the total supply of a particular asset"
"The code defines a function named ""currentDifficulty"" that returns an unsigned integer representing the current difficulty level of the game"
The code sends profits to multiple games based on their hashes and profit amounts
"This smart contract code is for a token sale, allowing users to purchase tokens in exchange for Ether"
"The code allows the owner to transfer any accidentally sent ERC20 tokens, as long as they are not the sale tokens"
Rewards the referrer with a portion of the funds if they have a sufficient stake
The code converts a bytes32 value taken from MakerDAO's Medianizer contract into a wei per usd rate
The code returns the number of unprocessed betting records
"A fallback function forwards an investment request from a user to a target contract, while also checking that the request meets certain conditions such as a minimum value and that the contract is not stopped"
"A function that registers an address to a uint, allowing for packing of addresses in orders"
"The code defines a function named ""totalSupply"" that returns the total supply of tokens"
The code adds a new controller to the contract
"The code defines a function called ""getStartTime"" that returns an unsigned integer value representing the start timestamp of the crowdsale"
Owners' funds are frozen on token creation
A function named destTokens takes an address as input and returns the number of tokens reserved for that destination
"The function ""getGift"" returns the price and description of a gift with a given ID, or empty values if the ID is invalid"
Transfers tokens from an approved account
"The code defines a function called ""getAddressKYCState"" that takes an address as input and returns the KYC (Know Your Customer) state of that address"
"A function named ""emergencyERC20Drain"" is defined, which transfers a specified amount of ERC20 tokens to the owner and emits an event indicating that the function was called"
"The smart contract code includes a function called ""hasClosed"" that checks whether the crowdsale has closed or not by comparing the amount of wei raised with a specified threshold"
A constant function that returns the total number of tokens allocated so far
The withdraw function is an external function that requires the sender to be the token offering address and checks if the investor's address is whitelisted
Owner can withdraw any accidentally sent ETH
The code allows the owner to reclaim any tokens that were transferred to this contract's address
The code adds a set of addresses to the whitelist
Returns the level information (price and availability) for a given index in the levels array
A function that takes a byte array as input and returns a uint256 value by parsing the input string
"A function called ""REBToken"" is defined as a public constructor that pauses the token transfers"
Withdraw some of the Ether to the owner
Reverting the transaction if ether is sent to the wrong address
This function is used to initially fund the contract
"The code adds a new NFT to the storage by creating a new entry in the `nft` mapping with the provided `tokenId`, setting the `owner` and `traits` fields, and updating the `recipientId`, `nftType`, and `createdAt` fields"
"The code allows the owner of the contract to transfer a specified amount of funds from the contract's balance to a designated fund address, and emits an event indicating that the funding has occurred"
The code returns an array of addresses representing the channel managers
"The function ""getInvestorWeiBalance"" returns the balance of wei invested by an investor"
Freeze player accounts for a specified time period
Function setLink allows property owners to change the clickable link associated with their properties
The code allows the execution administrator to set the registry execution ID for initializing applications
"A function named ""addAddressToWhitelist"" is defined, which adds a new address to the whitelist"
"The code creates and issues new tokens to investors who have paid in ether, with a bonus amount determined by the `getBonus` function"
"The function ""getTokenPriceForPeriod"" retrieves the token price for a given period index"
"The code defines a function named ""getChickenAmount"" that returns the number of alive chickens for a given user"
"The code defines a function named ""balanceOf"" that takes an address as input and returns the current balance of the owner of that address"
Get the owner at a given index in the array of owners
The code refunds a specified amount of wei to the sender
The code is a fallback function that only receives Ether from the eUSD contract
"The code defines a function named ""TokenPriceInWei"" that takes two unsigned integer arguments, ""_tokenAmount"" and ""_proposalID"", and returns an unsigned integer value representing the current price of a token in Wei"
"A function named ""removeGlobalConstraint"" is defined, which takes two addresses as input and returns a boolean value indicating the success of the operation"
This smart contract function calculates and returns the total price for minting a composition based on an array of desired layer IDs
The smart contract code allows the current admin to set a new admin for the SEEDWhitelist contract
"A function named ""releasableBalanceOf"" is used to calculate the releasable balance of a specific address"
"The code defines a function named ""approve"" that takes two parameters, an address and a uint256 value, and returns a boolean value indicating whether the transfer was successful"
This smart contract code defines a function named `checkStatus` that checks the current status of both the crowdsale and Blocklord
"The function ""proposalAvatar"" returns the avatar address associated with a given proposal ID"
"The function `isRedeemed` sets a flag indicating that a collectible item has been redeemed, and can only be called by addresses included in an approved address list"
"The smart contract code contains a function named ""getOwner"" that returns the address of the contract owner"
Set allowance for another address
"A function named ""giftToken"" is defined, which takes an Ethereum address as a parameter and calls the ""buyTokens"" function with that address"
"The function canMint checks if the RTI token contract is set to use this contract as the staking contract, and returns true if it is"
"A smart contract function named ""distributeTokens"" is designed to distribute tokens from a specific address to multiple recipients"
"A new function named ""addFreeVineyard"" is created, which allows the CEO of a market to add a free vineyard for a specific address"
"The code defines a function named ""numberOfInvestors"" that returns the number of players"
"Withdraw an ""amount"" of available tokens from the contract"
The code is a function that reverts any Ether transferred to the contract
"The code allows the owner to record a purchase made outside of the Ethereum blockchain, with the ability to specify the purchaser's address, the amount purchased, and other relevant details"
Remaining amount allowed to be transferred
The code allows moderators to change the active state of an item class based on its class ID
"The code defines a function called ""whenNotPaused"" that is publicly accessible and can be triggered by anyone"
"The smart contract code includes a function named ""bountyFunds"" that is only accessible to the owner and can be executed when the contract is not paused"
A function receives Ether contributions and processes them
"A function that returns an array of addresses, an array of karma scores, and an array of record owners for all registered auditors"
"The smart contract code is a function named ""sellTokens"" that takes three arguments: ""_tokenAmount"", ""_from"", and ""_to"""
The code allows a user to mint a specific number of tokens to their account
"A function that converts a string to a bytes32 value, with an empty string check and assembly code to load the result"
The code returns the number of remaining dots for a specified provider and endpoint
The code increments the Wei amount by the message's value
Minting a token to an address
"The smart contract code allows users to change the verdict of a transaction by calling the ""changeVeredictum"" function and passing in the new backend contract address"
"A user can sell their KWHs against ether, but only if the price is set and they have enough balance"
Transferring ownership of a smart contract to a new owner will also destroy the contract
"A function named ""withdraw"" is defined, which transfers the entire balance of the contract to a specified wallet"
"A smart contract code that allows only the owner to deliver tokens to investors during an ICO, with a specified number of frozen days"
"The code defines a function called ""transfer"" that takes three arguments: an address, a uint256 value, and a hex string"
"A function named ""record"" is defined, which takes in a bytes parameter called ""_notarisedData"""
"The code defines a function called ""getContributionOf"" that takes an Ethereum address as input and returns the total amount of Ether contributed by that address"
"A function named ""withdraw"" is publicly accessible and checks if the message sender is the developer"
"A smart contract function named ""getNow"" is defined, which internally calls the ""now"" function and returns its result"
"This smart contract code returns a set of information related to a specific beneficiary address, including their account number, routing number, institution, full name, amount, check file path, and digital check fingerprint"
The code sets the registry to a new BountyRegistry address
"The function ""refundableEthBalanceOf"" returns the refundable balance of an address"
"The code defines a function named ""transfer"" that takes two parameters, an address and a uint256 value"
"The function ""transferFrom"" allows for the transfer of an asset from one address to another, but only if the vesting requirement has been met"
"The function ""tokensUnlocked"" returns a bytes32 value representing whether the token is unlocked for transfers"
"The code adds a property value for a specific user, with the ability to only be executed by an administrator"
The code approves a specific address to make transfers during the lock-up period
The code calculates and returns the Ethereum cost of an order based on its price and amount
Finalize liability smart contract assigned to this lighthouse
"A function named ""setLists"" is defined, which takes four address lists as arguments and sets them in the TrueUSD contract"
"A new controller can be added to the system by calling the ""addController"" function and providing the address of the new controller"
Function refundCrowdsaleContributor allows a contributor to receive a refund of their contributions if the crowdsale fails to reach its soft cap
"The function ""orderContractorProposal"" takes in a parameter ""_proposalID"" and returns a boolean value indicating whether the proposal was ordered and the proposal amount was sent"
"The code calculates and returns a bonus percentage based on the input ETH amount, using a series of if-else statements to determine the bonus amount"
"The owner of the smart contract can disable minting by calling the function ""disableMinting"""
The function allows a player to withdraw tokens from their safe after the timelock period has passed
The code returns the total number of tokens available for sale
"The code defines a function named `KATXToken` that inherits from the `ManagedToken` class and sets up a new token with the name ""KATM Utility"" and symbol ""KATX"" with 8 decimals and without being divisible"
Setup roles for new Sgame token
"The function ""getContractCount"" is a public constant that returns the number of smart contracts in the artworks index"
"A function named ""getPrice"" is used to show the current token price"
Withdraw all profit to the owner
"The code defines a function called ""getBalance"" that retrieves the current balance of tokens in the Doge Farm smart contract"
Set the price of a specific block on a pixel-based platform
"A function named ""isSHA256HashRegistered"" takes a SHA256 hash as input and returns a boolean value indicating whether the hash is registered"
"The code sets the current week's pool of tokens to a value greater than zero, ensuring that there are enough tokens available for the week"
This smart contract code allows the operator to set the current funding round and its corresponding price
"A function named ""isCoreContract"" checks if the current contract is the core contract"
A function that sets the current token price by multiplying the numerator and denominator values
"The function ""setCanceled"" returns a boolean value indicating whether the sale is canceled or not based on the total valuation and minimum raise, as well as the current time and whether the sale has been finalized"
Withdrawal can only occur after the deposit time is exceeded
"The smart contract code includes a function called ""startMigration"" which is only accessible by the owner and can be executed when the migration agent's address is not equal to zero and the current state of the contract is ""Running"""
"A function called ""wcOnCrowdsaleSuccess"" is defined as an internal function"
"A function named ""getTokenAddress"" is defined, which returns the address of a trading token contract"
The smart contract code allows the owner to move the contract into the next period of sales by calling the `goNextPeriod` function
This smart contract code contains a function named `_getChickenCnt` that returns the number of chickens owned by a specific user
The code allows the owner of an emoji to change its price
"The code sets the start date of the presale stage 0, which can only be done once"
"A function named ""delPhase"" is defined, which deletes a specific phase from an array of phases based on the given index"
The code allows the owner or manager to replace the current manager with a new one
"The code checks whether a purchase is valid by verifying that the sale has not ended, checking the allowance of tokens, and ensuring that the purchase is made within the designated time period and that the value of the purchase is non-zero"
Withdraw the contributed funds if the ICO has ended and the goal has not been reached
"The code defines a function named ""tokensAvailable"" that returns the number of tokens currently held by the contract"
This smart contract code defines a function named `hashCompareWithLengthCheck` that takes two string arguments and returns a boolean value indicating whether the two strings are equal in value
"The function ""frozenCell"" returns the amount of tokens frozen in a specific cell, as well as the unix timestamp at which they will become available and whether or not it's required to pass KYC to spend them"
The code checks the weiRaised value and returns a bonus based on the percentage of that value to the cap
The code checks whether the minimum funding goal for a crowdsale has been reached
"The code defines a function named ""beneficiary"" that returns an address"
Returns the outcome count
"The code defines a function named ""unpause"" that is publicly accessible, can only be called by the owner of the contract, and has three modifiers: ""whenStarted"", ""whenNotFinalized"", and ""whenPaused"""
"The code defines a function called ""put"" that maps a seed to a value within the storage of an execution ID"
This smart contract code allows users to make donations in Ether and receive a bonus in coins based on their rank
"The smart contract code includes a function named ""transferFrom"" that checks if the token sale is still open before allowing the transfer of tokens from one address to another"
"The function ""blockSetPrice"" is used to retrieve the current price of a specific block in the smart contract"
"A function named ""isOperationWallet"" takes an address as input and returns a boolean value indicating whether the given address is a valid wallet for the current operation"
"A function named ""getAddress"" takes a 16-byte array as input and returns an Ethereum address"
"A function named ""getOwnedTokens"" is used to retrieve an array of token IDs that belong to a specific address"
"The function ""changeExchangeRate"" allows only the founder to update the exchange rate of a token, and it returns a boolean value indicating whether the operation was successful"
The code withdraws tokens from a smart contract and transfers them to the owner
"A function named ""transferTokens"" is defined, which transfers a token from the current owner to another address"
The function checks whether a given spender has enough allowance from an owner to spend a certain value
Returns whether the specified token is owned
"A function named ""transferTo"" is defined, which transfers a specified amount of tokens from one address to another, along with optional data"
"The code is a function named ""kill"" that can only be executed by the contract's owner"
"A function named ""delegatedTransferAndNotify"" is defined, which takes in several parameters and performs a transfer of tokens from one account to another, while also handling the execution fee for the transaction"
"A function named ""isATrustedContract"" checks whether a given contract address is marked as trusted and returns a boolean indicating the result"
"This smart contract code allows for the approval and execution of a function call by a designated spender, with additional data passed as an argument"
"The code defines a function named `discontinueBonus` that takes two parameters, `_tokenRefferralBonus` and `_bidderBonusAmount`, and returns a string"
"The code defines a function named ""isFrozen"" that takes an address as input and returns a boolean value indicating whether the account associated with the address is frozen"
"A function named ""startMigration"" is defined as a public method, with the modifier ""onlyMigration"""
A smart contract function that allows the owner to destroy the tokens owned by a blacklisted account
A function that receives payments or deposits from the message sender and stores them in a variable
"The smart contract code contains a function named ""upgradePonyResult"" that takes two parameters, ""unicornation"" and ""targetBlock"", and returns a boolean value"
"The function ""proofDateFrom"" returns the date from which a specific proof is valid for a given address and proof ID"
"The code transfers tokens from the maintainer to a specified address, requiring that the destination address is not zero and using the SnooKarma token contract"
The code defines an internal function named `_setPermissionManager` that assigns a new manager to a specific role for a given application
Remove a burner role from an address
Upgrades the Microverse components if necessary
Sets a store to be used by the manager
The code defines a function named `startTime` that returns the storage location of the crowdsale's start time
Mints tokens for owner and for crowdsale participants
This smart contract code converts an input string of hexadecimal characters into a byte array
The code sets a new gas price limit for the contract
The code returns the number of remaining sponsored gas slots
"A function named ""receive"" is defined, which takes in five parameters: a uint256 id, a string userQuery, a bytes32 endpoint, an array of bytes32 endpointParams, and a bool onchainSubscriber"
The code sets the avatar for a given owner if they do not already have an avatar
The code requires a minimum amount of wei for a purchase and ensures that the total contribution from a beneficiary does not exceed the maximum allowed amount
"The function returns the convert lot information for a given ID, including the ID of the lot, the address of the convert lot owner, and the Primordial token amount in the convert lot"
The code allows the owner to set a new Monetha address
"This smart contract code allows for the sending of funds to the contract only if the sender is either the owner or a super contract, otherwise it will do nothing"
"A smart contract that implements a crowdsale with multiple tiers for token purchases, requiring certain parameters such as the start time of the ICO and the wallet address to receive funds"
The function allows the caller to view the unreleased balance of a given address
The code updates the pool address cap for tier 2
"A function named ""fuelContract"" is defined as a public method that can only be called by the owner of the smart contract"
This smart contract code allows the owner to mint new tokens with a time-based vesting schedule for a specified beneficiary
Increase the cap by a specified amount
A published order can only be canceled by its seller or the contract owner
This smart contract code allows users to migrate their tokens to a new version of the contract
The code sets a minimum amount that can be sent in a transaction
"This smart contract code is for a function named ""receiveClosePositionPayout"" that allows the closer of a position to receive a payout in held tokens or Ether, depending on the value of the ""payoutInHeldToken"" parameter"
"A function that sets a permission for an entity, app, and role, with a hash of parameters"
"The code defines a function named ""balanceOf"" that takes an address as input and returns the balance of the corresponding owner"
"A function named ""transfer"" is defined, which takes two arguments: an address called ""_to"" and a uint256 called ""_amount"""
Update the available IOU amount for purchase
The code sets the fee for approving a transfer
"The smart contract code allows the owner to set the exchange rate between two currencies, but only if the contract has not been finalized and the new rate is greater than zero"
The code allows the owner of a smart contract to pay all bonuses to all investors from the previous round
"The code defines an internal function named ""insertPlayer"" that takes an address value as input and adds it to the end of a dynamic array called ""players"""
The code transfers tokens from the smart contract to a specified address
The code allows the owner of an ERC20 token to transfer the token to another address
"A spender can transfer tokens and make the owner of the funds a participant in the jackpot by using this function, which also includes a jackpot reserve deposit"
Adjusts the tranche ratio for the next cycle
"The code defines a function named ""nextPriceOf"" that calculates the next price of a deed based on its current price"
Function Pay allows the contract owner to distribute dividends to investors
The code sets the affiliate rate for a specific level
"A function named ""ComputeMyEggs"" returns the current player's eggs"
Transfers the ownership of a Race from one address to another address
BurnTokens function reduces the balances and total supply of tokens by the amount specified in the burnAmount parameter
The code transfers the entire balance of an ERC20 token held by the forwarder contract to the parent address
"The code defines a function named ""implementation"" that returns the address of the current implementation"
"Clearing the current approval for a specific unicorn ID involves checking if the owner has ownership of the unicorn, setting the approval value to 0, and emitting an Approval event"
The code allows the market creator to close the market by transferring all remaining outcome tokens to them
The smart contract code includes a function that reverts the transaction
"A function named ""payDivsValue"" is defined, which takes two arguments: an unsigned 256-bit integer ""_amountOfDivs"" and a string ""_sourceDesc"""
The code allows the user to claim ownership of a specific unicorn ID
"The function ""getStakedTeller"" retrieves the amount of DTH that a specific teller has staked"
Destroys the smart contract
A function that returns an array of ticket numbers for the current draw held by a specific address
Owner can send ether balance in contract address
The code allows the owner to remove an existing entry from a list of registered exchanges
"The smart contract code allows only the owner to send an array of tokens to a list of beneficiaries, with each beneficiary receiving a specific amount of tokens"
The code allows the owner to set a new exchange rate for the smart contract
"The function ""reserveTokenCount"" returns the number of reserve tokens defined"
Updating currency exchange rates is possible even when the time of the exchange rate is unknown
"The function ""isWaiting"" checks if the current block number is greater than the starting block number, indicating whether the game is currently in a waiting state"
A function named increaseDistrictWeed is used to add a quantity of weed to the district's amount
The smart contract code sets the holder amount to a specified value
An account can unlock their 2y locked tokens 2 years after the token launch date
The code calculates the number of leap years between a given year and the current year
The code allows the owner to transfer a specific amount of tokens to multiple beneficiaries
"A function named ""goalReached"" is used to determine whether a certain number of tokens have been raised, returning true if they have and false if they haven't"
"The code returns the sender's signature, recipient's signature, witness's signature, and block number for a given index in the escrow ledger"
"This smart contract code initializes relevant crowdsale contract details, such as the beneficiary address, start time, deadline, token reward contract address, and crowdsale cap"
Refunds funds to the origin address if the KYC approval is not met
The code sets an authorizer contract for a crowdsale only if it hasn't started yet
"This smart contract code checks if the crowdsale has started, stopped, or is managed by the correct address"
The code allows for the sale of tokens using a parent token
"The function ""getUserInfo"" returns the information of a single user, including their Ethers and tokens to be sent, as well as whether they have passed KYC approval"
The smart contract code allows for the updating of marital status only if both partners have previously voted to update the prenup
"The function ""getActiveTokenExchangeId"" is used to retrieve the ID of the active token exchange owned by the user"
"This smart contract code allows an owner to increase the amount of tokens they have approved for a specific spender, and returns whether the approval was successful or not"
The code returns the location of a provider's list of registered applications in storage
This smart contract code reverts any Ether transfers made to the contract
Distributes tokens to a list of wallets based on corresponding values
"This smart contract function retrieves information about an associated TAO setting, including its ID, the associated TAO's ID, and the setting ID"
This smart contract code updates the amount of reserved Wei for withdrawal based on certain conditions
This function will return only the DBZ owner address of a specific hero
The code accepts ETH and can be executed by anyone
Burns the remainder of BBY owned by this contract MINUS locked tokens
Total number of snaps stored
Creates a new instance of the SkillChainToken smart contract
The code allows the owner to transfer the contract's balance to their wallet after 60 days have passed since the end of the ICO
"The code defines a function called ""getOwnerAddress"" that returns the address of the song owner"
"A function named ""burn"" is defined, which can only be executed by the contract's owner"
The function calculates the number of tokens that investors are due to receive based on the current stage and price
"A function named ""destroyContract"" is defined, which can only be called by the developer and will delete the smart contract"
"The function ""commissionerAuctionCancelled"" is called when a commissioner auction is cancelled"
The code allows the owner to mint new tokens and transfer them to a specified address
A function named RoyaltysOwing is used to calculate the royalty amount owed to a specific account
This smart contract code allows for the disbursement of multiple authorized payments in a single transaction
"This smart contract code is for a function named ""migrateByAdmin_DQV"" that allows the admin to migrate users' balances from one contract to another"
"A function named ""getPermissionManager"" is defined, which takes two arguments: an address and a bytes32 value"
"Transfer the balance from token owner's account to ""to"" account"
The code allows the owner of a smart contract to transfer a specific amount of tokens to a designated wallet address
"The code calculates the number of tokens that can be purchased with a given amount of funds, taking into account any fees that may apply"
"The code removes an investor's address from a whitelist, checks that the address is valid, and refunds any remaining balance if necessary"
The code sets the release time for a specific address
"This smart contract function allows the primary user to set a new percentage for the neighbour reward, which will be stored in the contract's state and emitted as an event"
Starts an auction with a specified duration and returns a success value
Transfer and pay function calls the parent's transfer and pay method after checking that transfers are enabled
The code sets the owned bonus of a transaction originator to the value of the message sender if the message sender is equal to the fundaria token buy address
"A smart contract function named ""isValidDataHash"" takes in two parameters, a bytes32 hash and a bytes signature"
"The function ""hasEnded"" checks whether the current lot of a crowdsale has ended by comparing the current time with the end time"
The code sets a new period for the smart contract
The code checks if the number of cards in a game is correct by comparing the recovered address from the signature to the expected signer
Burn away the specified amount of VenusCoin tokens
The code removes a specific address from the whitelist
The code transfers the unclaimed token amount for a given token and address
"The smart contract code defines a function named ""soulBookPage"" that takes a uint256 parameter named ""page"" and returns an address"
The code removes an address' access to a specific role
The owner of the smart contract can transfer ownership to a new address
"Send ether to the contract address with at least 200,000 gas"
"The function ""isSuccessful"" checks whether the crowdsale has been completed successfully by returning a boolean value"
A function named pauseCrowdsale is publicly accessible and can only be executed by the owner
Investors can retrieve their tokens by calling the withdrawToken function
"The function ""tokensLockedAtTime"" allows users to view the amount of tokens that are locked for a particular address, reason, and time"
The code allows the token owner to transfer the entire balance of the smart contract's ETH to their own address
This smart contract code is a function named `_transfer` that transfers ownership of a token from one address to another
"The code checks if the number of transactions, the length of regular transaction times, the minimum investment amount, and the number of rate steps are all greater than zero"
This smart contract code enables the owner to distribute a specific amount of tokens to a designated address before the public sale begins
Transfers ownership of a property and resets its information
The code allows the owner to execute the token's destroy function
"The code defines a function called ""stageIndex"" that returns the current stage index, which is determined by checking the end date of the current stage and comparing it to the current timestamp"
"The code defines a function called `getPartReleaseAmount` that calculates and returns the amount of tokens to be released for a given stage, based on the total frozen amount and the current stage"
"A function named Approve is public and has three parameters: address _recipient, uint256 _amountToTransfer, and bool _isFinalized"
"The code sets a discount bonus for a mini-game, requiring the sender to be an administrator"
"The function ""redemptionCount"" returns the number of redemptions made by a specific address"
Function receives funds and calculates dividends
This smart contract code allows the owner to freeze multiple accounts from making any transfers
The code is a simple function that reverts the transaction
"The function checks if the sale has ended, if the wallet exists, if coins have already been received, and if the user is eligible for a bonus or not"
"A function named ""getDebitNonce"" is used to retrieve the current nonce value for a specific wallet"
"The smart contract code is a function named ""getLimit"" that returns the amount of tokens left for a participant based on their current purchase history and the cap set by the contract"
The code is a function that can only be executed by the owner of the smart contract
This smart contract function allows an administrator to update several key parameters that govern the behavior of the economy within a decentralized application or protocol
The code allows a user to authorize a casino contract address to access their funds by using an Ethereum signature
This smart contract code allows you to check if a specific operator is approved by a given owner
"A function is defined as ""public"" and includes a call to the ""revert"" function"
Get the address of a factory based on the input country
"The function ""standing"" is an external constant that returns a string value based on the current standing of the contract"
"The code defines a function named ""jackPotA"" that calculates the percentage of the prize fund and returns it as an unsigned integer"
"A function named trackContributions is defined, which takes two parameters: an address called _sender and a uint256 called _value"
"The code transfers 12500 tokens from the owner's account to a new DevTokensHolder contract, and then returns the address of the newly created contract"
The code transfers tokens from the marketing address to an investor
The code defines a function named `getUserQuery` that takes an unsigned 256-bit integer `id` as input and returns a string representing the user's query
The code allows the owner to manually set the current stage of a campaign
Sets the amount of gas allowed to investors
"The code defines a function named ""thisContractBalance"" that returns the Ethereum balance of the current contract"
Returns the total amount of Wei invested by a specific account
"A function named ""transferFrom"" is used to transfer tokens between addresses"
"The claimMethodABI function is a public, constant method that returns a string"
"Clearing the approval for a specific token ID involves checking if the owner of the token matches the inputted owner address, and then setting the approved address to 0"
"The smart contract code allows the manager to pay the evaluator a certain amount of DAI tokens for completing a job, after which the evaluator is paid using the transferFrom function on the DAI token contract"
"A function named ""getNoteLine"" is defined, which takes a single argument ""_pitch"" of type ""uint"""
The code defines a function called `getClaimable` that returns the total committed amount
"A function named ""claimFreeFirstCard"" is defined, which takes an address as a parameter and generates a random card for the user"
"The function ""getSaleContractTokensMinted"" returns the total number of tokens minted by a sales agent"
Receive dividends from Zethr and buy back in
Admin can mint tokens
The code allows the owner of the smart contract to update the address of an associated contract
"A function named setMinStartingPrice is defined, which sets the minimum starting price for a contract to be executed"
"The code sets the Ether price in USD to a specified value, with eight decimal places, and can only be executed by the contract owner"
"The function ""whoBuy"" returns the address of the user who placed a bid order"
This smart contract code contains a function named `indexOf` that takes an address and an array of addresses as input
This smart contract code defines a function called `getUidAsInteger` that takes an Ethereum address `_address` as input and returns the corresponding user ID as an unsigned integer
"The code defines a function named ""totalEthereumBalance"" that returns the total amount of Ether stored in the contract"
"The code is a function named ""mint"" that takes an address as input and returns a boolean value"
"The code defines a function called ""getOwnerCount"" that takes a storage reference to a WalletData object as an argument and returns the number of owners in the wallet"
"This smart contract function, ""giveTokens,"" allows the owner to mint new tokens and transfer them to a specified address"
A user can withdraw their own funds from the contract if the softcap has not been met
"The function ""isMinimumGoalReached"" returns whether the minimum funding goal for the crowdsale has been reached"
"The code sets the token's name and symbol to the values passed as arguments, with the ability to be called by the owner of the contract"
Queue up a dice session for processing by others
The code sets the initial allocation unlock for a given address
A user's contribution in Ether is multiplied by the exchange rate to determine how many tokens they will receive
The percentOfGoal function calculates the percentage of a fundraising goal that has been met by dividing the current balance by the minimum funding goal and multiplying by 100
"The code is a function named ""unfreeze"" that allows the owner of a smart contract to unfreeze an account that was previously frozen"
The code sets the bonus amount for a smart contract
The code is a fallback function that reverts any Ether sent to the contract
"This smart contract code adds a new distribution period, updates the total number of periods, and returns a success status"
"The code defines a function called ""changeTotalSupply"" that can only be executed by the crowdfund contract, and it updates the value of the ""totalAllocatedTokens"" variable by adding the input parameter ""_amount"""
Distribute presold tokens and bonus tokens to investors
"The function returns the count of buildings, houses, schools, hospitals, and amusement parks in a given city"
"A function named setSocialMultiplier is defined, which takes an unsigned integer _number as input and returns a boolean value"
"A smart contract function named ""unpauseTransfer"" is used to resume the transfer of assets that were previously paused by the owner"
"A function named ""get"" is defined, which takes an address as input and returns the cumulative score and total ratings for that address if it exists in the scores mapping"
This smart contract code allows an administrator to set the status of a property for a specific user
"The function ""isCurrentTierCapReached"" checks if the current tier cap has been reached"
"A function named ""isExisted"" that takes an address as input and returns a boolean value indicating whether the wallet associated with the address exists or not"
"The function ""getMaxOwners"" returns the maximum number of owners allowed for a wallet"
"The smart contract code contains a function named ""balanceOf"" that takes an address as input and returns the balance of that address"
Creates a new reference ID for an address if it doesn't already have one
"The function ""isUnrestricted"" returns a boolean value indicating whether the assignments are closed and there are no restricted tokens left"
Refunds the Ether balance of a user if the ICO does not reach its minimum funding goal
Anyone can transfer Moo tokens after trading has started
"The code allows the owner to change the start and end times of a crowdsale before it starts, as long as both times are valid and the new end time is after the new start time"
This smart contract code encodes the string representation of a uint8 into bytes
A function named recordDealCancelReason is used to create a record of a canceled deal that was not paid
Checks if the sender and recipient are not fund managers before calling the super
Burns a specified amount of tokens from the address provided
"The code defines a function named ""balanceOf"" that takes an address as input and returns the balance of IAC tokens held by that address"
"The code defines a function called ""safeAdd"" that takes two unsigned 256-bit integers as input and returns their sum, while also checking for overflows"
A smart contract function that allows the owner to airdrop tokens to a list of specified addresses
"A function named ""parseInt"" takes a public pure string parameter and returns an unsigned integer"
The code returns the ERC20 token balance of a given address
"The code allows the user to approve a transfer of tokens manually, returning a boolean value indicating the success or failure of the operation"
The smart contract code returns the immediate owner of a token
The code adds a specified amount to the total number of shares and updates the corresponding member's share balance
"This smart contract code allows the owner to lock up accounts by specifying a list of addresses and their corresponding Unix timestamps, preventing them from sending or receiving tokens until the specified time has passed"
This smart contract code defines a function named `getMonsterStats` that takes in a `uint256` parameter `_mID` and returns an array of 8 `uint8` values
Transfers tokens from one address to another if the account is not paused or locked
The code allows the owner of the contract to increment the month number by one
A smart contract function that allows an owner to approve or disapprove an address to manage their pixels
The code transfers the collected fees to the owner
A smart contract code with a fallback function that allows users to make deposits and receive blessings
"A function named ""withdraw"" is used to transfer a specified amount of money from the contract to the recipient, with the amount determined by the share of each owner"
"The smart contract code starts a crowdsale for contribution by checking the current state, balances of tokens, and transferring presale and platform tokens"
"A function named ""getFighter"" is defined, which takes a uint parameter called ""_tokenId"""
"Emit an event called ""ReceivedTokens"" when a user sends Ether to the smart contract"
The code returns the number of asset events that have occurred for a specific asset item
"The code calculates the minimum amount required to wager on a spin to ensure a profit, taking into account the cost of the Oraclize service and the multipliers applied to the bet"
"The function ""balanceOf"" is used to retrieve the current balance of a given address"
The code allows the owner to set a boolean value indicating whether or not new affiliates should be registered
"This smart contract code defines a function named ""strcat"" that takes two byte arrays as input and returns a new byte array that is the concatenation of the two inputs"
"A function named ""addTransaction"" is defined, which takes in three parameters: an address, a uint256 value, and bytes data"
"The code allows the owner of the contract to increase the number of drops, which will result in more Lemon Tokens being distributed to users"
"A function is created to emit an Ethereum transfer event from a child contract, which can only be executed by the child contract"
A smart contract code is a function that returns a string
The smart contract code calculates and returns the expected amount of fees in wei based on a given input
"The function ""etherToSendFund"" calculates the amount of Ether that is waiting to be sent to the fund in the contract"
"The code returns the total amount of LNC in circulation, which is displayed on the website during the crowdfunding period"
"The function ""softCapReached"" checks whether the total balance of both ETH and FIAT currencies added together has reached the soft cap"
"A function named checkAllowedTier checks whether a contributor's tier is less than or equal to the current tier, returning true if so and false otherwise"
"A function named ""finishMinting"" is defined, which can only be executed by the owner of the contract and can only be called when the contract is in a state where minting is possible"
Total supply is returned by the function
"A function named ""transfer"" is defined, which allows the owner of a ticket to send it to another address"
"The code defines a function named ""start"" that is publicly accessible and returns a boolean value"
A function that removes multiple addresses from a whitelist
The code extends a snake by setting its value to 1 and assigning ownership to the message sender
The code allows the current agency owner or the contract owner to change the Ethereum address of the agency
The code removes the Operator role from an account
"A function named ""receiveApproval"" is defined, which takes four parameters: ""_from"", ""_value"", ""_token"", and ""_extraData"""
Returns an array of pixels owned by a given address
"The function ""getRewardBalance"" returns the sum of two other functions, ""getInvitationRewardBalance"" and ""getLoyaltyRewardBalance"", which calculate the rewards earned by a member based on their invitations and loyalty"
WhitelistAddress is a function that allows the owner to add a list of addresses to a whitelist during an active crowdsale
WithdrawFunds is a function that allows the owner of a smart contract to withdraw funds from the contract
"The code defines a function named ""balanceOf"" that takes an address as input and returns the balance of TripCoin tokens held by that address"
"The code sends the balance of the current contract to a beneficiary contract if it exists, otherwise it reverts"
"The smart contract code allows the owner to withdraw a specified amount of ether from the contract, with half of the amount being transferred to one address and the other half being transferred to another address"
"The code is a fallback function for buying tokens, which checks if the sender is eligible to buy deferred presale tokens, and then calls the appropriate function based on the current time and start time"
The code calculates the total number of bets placed on all teams
"The function ""getCurrentTierHardcap"" returns the current hard cap for the current sale state"
"A function that returns a struct containing information about a security token offering, including the address of the STO contract, the auditor, vesting period, quorum, and fee"
The code transfers all Ether from the contract address to the owner's account
This smart contract code allows the owner to set a new minimum team size
Store an image string and get back a numerical identifier
"The code allows the user to burn a certain amount of tokens, reducing the total supply and removing the destroyed tokens from circulation"
"The code defines a function named `globalMinPurchaseAmt` that returns the keccak256 hash of the string ""sale_min_purchase_amt"""
"The code allows the owner of the contract to change the bonus, which is a positive integer greater than zero"
"The function ""transfer"" allows for the transfer of a specified amount of cryptocurrency to a designated address"
"A function named ""getSoftCapInWeis"" is used to convert the soft cap amount in CHF to weis"
Returns the address and delegation status of a user given their name
"A function named ""name"" is defined as an external view that returns a string representing the token name"
The code allows the owner of a smart contract to add an address to a list of allowed addresses for token transfers
The code allows the owner of a smart contract to withdraw funds raised by the contract to their wallet address
A function that calculates bonuses based on the current status of an ICO and returns a bonus value
"This code defines a function named ""selectGod"" that is called when a user wants to select a specific god from the game"
This code adds a new spender to the whitelist of approved addresses that can call the `approveAndCall` function
The code allows the owner of a smart contract to force an update to the Ethereum exchange rate with a specified delay
This smart contract code allows the msg
"The code is a function named ""increasePosition"" that takes in several parameters, including a bytes32 positionId, an array of addresses, and arrays of uint256 and uint32 values"
Burn function returns a boolean value indicating whether the burning of tokens was successful
"The function ""getDirectOffersComissionRatio"" is a public view that returns the value of the variable ""directOffersComissionRatio"""
"The function ""getWithdrawalAddress"" is a constant public method that returns the address of the withdrawal wallet"
Mint coins for a multiple accounts
The grantVoter function grants a voter access to the oracle and stores their public key in the pubKeys mapping
"The token owner can call the ""startDistribution"" function to initiate a new profit distribution round"
"A function named ""transfer"" is defined, which takes two arguments: an address and a uint256 value"
"This smart contract code adds a new NameTAOInfo to the blockchain, which includes information such as the name, address, parent name, and type ID"
"A function that takes a block number as input and returns the ID of the tier that contains it, or 0 if the block is before the start of the first tier or after the end of the last tier"
The code defines a function named `resolvePercentRate` that calculates the percentage rate based on the balance of the contract
"A function named ""tokensale"" is defined, which takes an Ethereum address ""recipient"" as a parameter"
"A function named ""exchangeBBDBalance"" is defined, which returns the number of BBD tokens currently held by the contract"
Players can deposit crystals into the pot by calling the share function and specifying the amount of crystals they want to deposit
"The code defines a function named ""getNumberByChoice"" that takes in a parameter called ""choice"" and returns a value based on the number of choices made"
The code calculates the amount of tokens rewarded to a participant in a specific round of an ICO
"A function named ""addGenesisCatGroup"" is only accessible to the owner when the contract is active"
"The code stops the crowdsale by changing the current state from ""Started"" to ""Stopped"
"A function named ""setAllowed"" is defined, which allows the owner of a smart contract to add an address to a list of allowed addresses that can call the ""transferIXT"" function"
"A function named ""noAdvert"" is defined as a public function that can only be accessed by whitelisted users"
The code calculates the total charity amount for all campaigns by adding up the balance of ETH for each campaign and multiplying it by the charity fraction
"This smart contract code allows the owner of a specific token to add a dedication message to the token, which is stored in the contract's state variable `dedication`"
"The function ""transferTokenOwnership"" allows the current owner of a smart contract to transfer ownership to a new address"
"The code is a function that allows the owner to start a crowdsale by granting ownership, setting an admin address, and checking the balance of a token"
Get the number of deposits made by a specific user
The code checks if the maximum goal amount has been reached by comparing the total amount transferred to the maximum goal amount
This smart contract code creates a new fighter and stores it in the blockchain
"The code defines a function named ""forbid"" that prevents a player from claiming all past rewards by setting the last reward for the given address to the current cumulative ratio"
A function that returns an array of community logic contract addresses
The function checks whether the user's purchase amount meets the minimum requirement for the current sale stage
"This smart contract code allows the transfer of NVTs to another address, with the option to specify a custom fallback function"
This smart contract code is a payable function that allows users to take a prize if they have made a bet and the outcome of the bet is in their favor
"A function named ""balanceOf"" is defined, which takes an address as input and returns the balance of that address"
Transfers tokens from one address to another
"The function ""allowance"" returns the amount of tokens left with the delegator (spender) by the owner"
"A function named ""setAllowed"" is defined, which takes three parameters: an address called ""_spender"", another address called ""_to"", and a uint256 value called ""_value"""
The function queryToken retrieves the price and last deal time for a given token ID
Use one super privilege to permanently own a company
"The exchange function allows for the transfer of assets between two parties, with the ability to specify the type of asset being transferred and the amount being exchanged"
Logs the data request with the requested ID
This smart contract code allows users to view the amount of tokens allocated to a specific player by address
This smart contract code is for a decentralized exchange and allows users to place orders on the exchange
"The code defines a function named ""recycling"" that allows the owner of the smart contract to transfer a specific amount of tokens from one address to another, while also updating the balances and total supply of the tokens"
The code returns the balance of a specific address
The code allows users to send Ether (ETH) to the smart contract
The code transfers a specified number of tokens from the token owner's account to a user account
"The function ""manageReferrer"" checks if a player has referral bonuses from a previous round that have yet to be recorded, and if so, it updates the player's total referrals and last referred round"
Transfers ownership of a smart contract and updates the balance of the new owner
"A function named ""pauseContract"" is used to pause the smart contract, and it can only be called by the owner of the wallet"
The function finaliseICO is a public function that can only be called by the owner when the smart contract is not paused
"A function named withdrawPayments is called, which checks the balance of the contract and sends a payment to the address specified in the function call"
"A function named ""devFee"" takes a uint256 parameter ""amount"" and returns the result of dividing the product of ""amount"" and 4 by 100"
"The code transfers ether from the user's account to the main pool in the parent contract, updates the bet on teams, and checks if the betting period has ended"
"The function ""getMarketsCount"" returns the number of markets as a uint"
"A function named ""allowance"" is used to determine the amount of tokens that a spender is allowed to spend on behalf of an owner"
The code transfers a specified amount of tokens from one address to another and returns whether the transfer was successful
The code returns the amount of tokens offered in an ask order
"A function named ""transfer"" is defined, which takes two arguments: an address and a uint256 value"
This smart contract code allows for the transfer of foundation tokens to a user's account after a certain time lock has been met
"The function ""getPurchaseLimit"" returns the current purchase limit, which is determined by the ""cap"
The code allows the owner of the contract to set the token address
"This smart contract code defines a function named ""getBlockNumSinceInit"" that returns the number of blocks since the core contract was deployed"
The function checks if the proposal code matches the expected hash
This smart contract code allows the owner to distribute tokens to multiple addresses
"This smart contract function allows the owner to whitelist many user addresses at once, ensuring that no more than 150 addresses are added to prevent block gas limit issues and DoS attacks"
Successful execution of the function indicates that the borrower has withdrawn excess collateral tokens for an open loan
"The code defines a public view function named ""balanceOf"" that takes an address as input and returns the balance of the owner's account"
"This smart contract code enables the transfer of tokens by setting a boolean variable called ""transfersEnabled"" to true"
The smart contract code allows the owner to set a new exchange rate for ETH to EUR
"A function named ""chargeProtocolFee"" is defined, which transfers tokens between two addresses"
Only the owner of the smart contract can call the `mint` function and mint a new token
"The smart contract code contains a function named ""totalSupply"" that returns the total token supply"
"The function ""finishMinting"" is called to stop the process of creating new tokens"
A function that allows the crowdfund contract to transfer a specified amount of tokens to a designated address
Get the dividend amount from the Hourglass contract
Sets the new conversion rate
The function finalize is used to disperse payouts after a timeout has been reached
A function named `_getDiscountTokenAmount` is used to calculate the number of discounted tokens that can be purchased with a given amount of Ether
"The code defines a function called ""minimalBalance"" that returns the value of the ""minimalBalance"" variable"
"The function ""getMaxTotalSupply"" returns the maximum total supply of a token"
"The code sets a jackpot for a game, with an admin-only function that adds the sent amount to the current jackpot if it is greater than zero"
Updates the current bet amount based on the total number of bets and a fixed percentage
"The function ""tgrStageBlockLeft"" returns the number of blocks left until the end of the current stage of TGR"
"The code updates the status of a node based on the sum of its child nodes' amounts, using a for loop to iterate through thresholds and checking if the referral deposit is greater than or equal to the threshold"
The code returns a boolean value indicating whether the crowdsale event has ended or the token cap has been reached
Withdraw collected ether from the smart contract to the designated ethWallet
God can set a new blind auctions contract
"This smart contract code allows the transfer of funds to another contract, with the ability to specify a custom fallback function and emit a Transfer event"
A function named `_forwardFunds` is defined as an internal function in the smart contract code
"A smart contract code enables the timelock of a token, ensuring that it can only be claimed after a specific date and time"
"If the crowdsale doesn't reach its goal, participants can withdraw their Ether"
"A function that checks if a specific address has permission to perform an action on a specific resource, based on the Access Control List (ACL) settings"
The code sets up an upgrade agent to handle the upgrade of a smart contract
Lock the vault for the three wallets
"This smart contract code includes a function called ""setMinInvest"" that allows the owner of the contract to update the minimum investment amount required for new investors"
"The code pauses the ICO by setting its status to ""Paused"" and logs the event"
"The function ""evolveGeneration"" updates the current generation of all stars based on the input parameter ""_newGen"""
Sets the main sale address to a new value
"The code sets a new bonus percentage for each purchase, with restrictions on who can set the bonus and what the minimum bonus amount should be"
"A function that calculates the fee for a transaction, taking into account any special promotions or discounts that may apply"
"The function ""viewCurrentPrice"" returns the current price of tokens based on the number of tokens sold, with different prices for different ranges of token sales"
Total amount of burned tokens
"The function ""remainOfStage"" is used to retrieve the remaining number of unreleased tokens in a specific stage for a given account"
Anyone can deposit money to the smart contract
"A function named ""tokenFallback"" is defined, which reverts the transaction when called"
"A function named ""removeWhiteList"" is used to remove addresses from a list of whitelisted addresses"
"The code defines a function named ""getTotalSupply"" that returns the combined total supply of two token contracts, ""drpsToken"" and ""drpuToken"""
This smart contract code defines a function called `getTransactionIds` that returns an array of transaction IDs within a specified range
A smart contract function allows a qualified crowdsale partner to purchase Star Tokens
"The function ""price"" returns the current price of a product based on whether a campaign is active or not"
"A function that attaches multiple addresses to multiple users by requiring the lengths of both arrays to be equal and then iterating through each element in the array, attaching the corresponding address to its user ID"
"This smart contract code allows the owner to set various values related to the game's economy, including the cost of upgrading gems, the conversion rates for different types of gems, and the range of event cards"
This smart contract code defines a function named `getVersionDetails` that returns various details about a specific version of a contract
"This smart contract code sets the variables related to a token, including its name, symbol, initial supply, and decimal places"
"When a user logs out or loses connection with the DApp, the ""logoutUser"" function is called and sets the ""freezeUser"" variable for that user to false"
A function named transferICO is written in a smart contract
Transfers tokens to a specified contract address and emits a transfer event
"This smart contract code defines a function named ""getFashion"" that takes a single argument, ""_tokenId"", and returns an array of 12 integers"
"This code defines a function called CONFIGURE that takes two parameters, _exec_id and _name, and returns an array of three bytes32 values"
"The function ""preSaleOpen"" returns a boolean value indicating whether the pre-sale is currently open based on the current time and the hard cap in wei"
"The function ""wnFromGas"" takes a parameter of type ""uint256"" and returns a value of the same type, indicating the amount of XRT tokens that can be emitted based on the input gas"
"The code defines a function named ""isContract"" that takes an address as input and returns a boolean value indicating whether the address is a contract or not"
"A function named ""influenceByToken"" takes a uint256 tokenId as input and returns the result of the _influenceAlgorithm, which is calculated based on the popularity and activeness values retrieved from the tavernContract"
"The function ""isRunning"" returns a boolean value indicating whether the game is currently in running mode, determined by checking if it is neither waiting nor stopped"
Anyone can transfer Reporter tokens after trading has started
"A function named ""listTokens"" is defined, which returns an array of uint256 values representing the IDs of all CryptoBeasties tokens held in the Storage Contract"
"The code defines a function named ""emitBegin"" which internally starts three other functions, ""r0"
This smart contract code allows for the transfer of Ether to a specific address
"This smart contract code allows the redemption of warrants by a user, with the following steps: 1"
"The function takes two 256-bit integers as input, performs a multiplication operation on them, and returns the high and low words of the result"
"A function named ""transferFrom"" is defined, which takes three arguments: the address of the sender, the address of the recipient, and the number of tokens to be transferred"
"The code is a function named ""lock"" that can only be executed by the owner of the contract"
The code updates the status of all maintenance contracts (MCs) if any have been applied
This smart contract code calculates and returns the unpaid percentage of a user's deposit
This smart contract code is a constructor function that sets the owner of the contract to the address that deployed it
The owner of the smart contract can withdraw a specified amount of Ether from the contract's balance
This smart contract code creates multiple instances of the ChildDeposit contract
The code adds a new contract address to the token fallback white list
"The code returns a boolean value indicating whether the registry is ready to be used, based on several conditions such as the existence of stores, the address of the manager and claimer being non-zero, and the registry not being paused"
"The function ""AuthEnd"" is used to authenticate the end of a process using safe keys"
A function named terminateContract is only accessible to the owner of a smart contract
Merchant or Monetha can initiate exchange of funds by withdrawing funds to the deposit address of the exchange
This smart contract code is a fallback function that allows users to send Ether to the contract and receive tokens in return
This smart contract code allows users to retrieve the current price of a specific video game item
"Participants can claim their rewards from the current round through the ""reward"" function"
"The function ""totalContributionsBySender"" returns the total number of contributions made by a specific sender"
"The code transfers Ether from the contract to its owner, stopping automatic updates"
The code updates the purchasing state of a beneficiary and adds the token amount to the total number of sold tokens
A function named listTransferableTokens is defined as a public view that returns an array of token IDs
"A function named ""transferOwnership"" is defined, which allows the current owner to transfer ownership of a smart contract to a new address"
"The code is a function that changes the scientist for an element, where the element is identified by its token ID and the new scientist is specified by their ID"
Exchange rate of ether is changed
"This smart contract code adds a function named ""add1Y"" that updates the locked balances and total supply for an account"
Whether the proxy is executed
"A function named ""balanceOf"" is used to check the balance of a Beercoin user"
"The code defines a function called ""myDividends"" that returns the current dividends of the contract, including any referral bonuses"
"The code defines a function called ""getLastTime"" that returns the ending time of the last bonus in an array"
"This smart contract code allows the contract creator to update the details of a Dragon Ball Z (DBZ) hero, including its name, owner address, and current level"
Remove a pool from the list of pools
