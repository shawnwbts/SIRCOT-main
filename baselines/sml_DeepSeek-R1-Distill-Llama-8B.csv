"The function allows the contract owner to transfer a specified amount of Ether from the contract's balance to their own account if the amount is less than the current balance, returning true upon success."
The function adds a wallet address to a list if it isn't already present and updates the list accordingly.
"The function allows users to transfer tokens and set a custom reserving percentage, ensuring a portion is reserved for a jackpot operation before transferring the remaining amount."
"The function iterates over an array of addresses and corresponding values, attempting to revoke a specified amount from each address if its balance is sufficient."
The function returns true if the game is in a stopped state by comparing the current block number to zero.
Withdraw accrued dividends and coupons to the message sender.
"The function starts multiple auctions for each hash in the provided array, calling `startAuction` iteratively."
"The function adjusts a pledge's delegation chain by removing the last q entries, creates a new pledge with the updated chain, transfers an amount to it, and returns its ID."
"The function returns true if indexBetPlace is greater than 0 and (indexBetPlace - index) is odd, with the betQueue at indexBetPlace-1 matching the sender, allowing cancellation of a specific bet."
"The function retrieves a list of vendor IDs and the next ID based on given parameters, utilizing the getNodes helper function."
"The function checks if the sender's contribution meets a threshold based on current cluster and segment data, returning true if they qualify."
"The function allows the contract's owner to incrementally increase the 'later' timestamp by adding a provided value, enabling delayed unlocking of actions."
Converts a uint256 to its corresponding decimal string representation by iterating through each digit and constructing the string in reverse order.
The function burns unsold tokens after the closing time by transferring them to a dead wallet.
"The function calculates the amount in wei based on the provided token amount and price-related parameters, returning the calculated value. [Calculate the amount in wei based on a given token amount and price parameters]"
"The function allows the contract owner to burn a specified number of tokens from a user, transferring them to a null address while reducing both the user's balance and the total token supply."
"The function `receiveApproval` approves a transaction, allowing an address to receive a specified amount of tokens with additional data."
Returns the total number of tokens available.
"The function finalizes the contract by transferring all tokens and funds to the wallet after the crowdsale ends or meets the cap, then sets it as finalized."
The function converts a given uint256 number into its hexadecimal string representation based on a specified byte size.
"This function sets the airdrop agent's status for a given address, allowing the owner to enable or disable it."
The function calculates the total balance for a given address by summing an initial balance with multiple locked values.
"The function allows the contract's owner to set a boolean state variable, enabling them to toggle or modify specific behavior within the smart contract."
Returns the number of Rick holders from portalGunInstance.
"The function sets the create, edit, and active_contract values of the prices struct, accessible only by the contract owner, returning a success boolean."
Sets the current passport logic implementation as per the given version.
Updates the current stage and returns true upon success.
"The function updates the tier 2 participant cap, allowing only the owner to modify it."
Get player's connected game info.
"The function creates tokens for an investor based on their contribution in other cryptocurrencies by calculating a bonus, summing the contribution with the bonus, recording the total, and minting the tokens."
"The function checks if a specific bit in `data` is set by using bitwise AND with `2^bit`, then applying `iszero` twice to return `true` if the bit is not set, and `false` otherwise."
"The function PreSaleZNA sets the paused state to true, likely halting contract operations during a pre-sale phase."
Returns a string from an external view function named name.
The function returns a boolean indicating whether a user has completed their KYC check.
The function checks if the transaction sender is the development account and updates the StopSell variable based on the provided boolean setting.
The function sets the token's price in ETH by multiplying the input value by 1 finney.
The function allows the owner to transfer the raised amount to the beneficiary upon successful execution of the send transaction.
"The function allows users to send ETH, destroying certain tokens in return."
The function retrieves the balance of a specified payee either directly from the main request or from a nested subPayees array based on the provided index.
Creates a new CSCToken instance by assigning initial balances to two addresses and emitting transfer events.
"The function allows users to set or update a secret note by providing a key and content, managing their notes and indices, and notifying when a note is updated."
The function updates the ICO start time to a new value if it is in the future and at least seven days after the previous start time.
Sets the exchange oracle after crowdsale.
"The function WithdrawAndTransferToBankroll calls ZethrContract.withdraw, transferring funds to ZethrMainBankroll, followed by WithdrawToBankroll, which moves these funds into the main bankroll."
"The function forwards ether from the smart contract to the owner if the transfer is successful, otherwise reverts the transaction."
The function allows the contract owner to update the website content by assigning a new value to the `website` variable.
"The function returns true if the set is non-empty and the given value exists either as an endpoint or is connected via next/previous pointers, indicating its presence in the set. contains ( uint256 value ) public view returns ( bool ) { return size > 0 && ( first == value || last == value || elements [ value ] . next != 0 || elements [ value ] . previous != 0 ) ; }"
Sets wallet for ICO ETH funds.
The function removes an address from the list of agents authorized to mint debt tokens by revoking their permission in the token creation context.
Creates a new centralized oracle contract using the provided IPFS hash and initializes it.
"The function sets the purchase price of tokens by the contract, allowing the owner to update it to any positive value."
"The function retrieves and returns a player's account details, including their ID, Ethereum balance, MFCoin balance, general vault balance, and affiliate vault balance, based on a given address."
The function allows the merchant to withdraw funds to the beneficiary's address through a transaction.
"The function checks if the crowdsale has reached its hard or soft cap, updates the state accordingly, and returns a boolean indicating whether the sale is completed."
The function checks if a ticket at a specified address is still valid by ensuring its contractor is 0x0 and its expiration time hasn't passed.
The getAdsLength function retrieves and returns the count of elements in the ads array. getAdsLength function returns the number of ads by retrieving the length of the ads array
The function updates the balance for a given address by adding a specified token value and ensures the address exists in an array tracking balances.
The function calculates the left child index of a given heap node by returning twice the input index plus one. function getLeftChildI ( uint256 index ) pure returns ( uint256 lcI ) { uint256 i = index * 2 ; lcI = i + 1 ; }
The function initiates the winding-up process by calculating rewards based on the token supply and updating the owner's holdings.
Returns the number of elements in the coins array.
The function reclaims ERC20 tokens mistakenly sent to a specific contract by transferring them back to the owner.
The function allows the contract owner to update the price of a gift to a specified value.
The function checks whether a transfer of tokens from a given address is valid based on the current time and the balance against locked amounts.
The function retrieves the bet amount for a specified team based on the caller's address.
"The function converts a uint into its string representation by extracting each digit starting from the least significant digit, storing them in reverse order within a bytes array, then copying the array in reverse to form the final string."
Returns true if buyer is whitelisted.
The function stops token minting irreversibly and can only be called by the owner.
"function approve ( address _spender , uint _value ) public onlyOwner { token . approve ( _spender , _value ) ; }"
"The function sells tokens to a beneficiary, allocating them along with potential bonuses, while updating contribution records and token sale metrics."
"The function allows upgrading committee room, share manager, and token manager by creating a new revision with current date and returning the revision ID."
Mint new tokens and send them to a specific address.
The function retrieves and returns the value of the usedAPI variable as a string.
"The function resets a lock for a specific address by setting its associated timelock value to zero, allowing the owner to unlock the address."
"The `unlockAccount` function resets the lock status of a specified address, allowing tokens to be transferred from that account, provided it's called by the account's owner and the destination is valid."
The function sends any leftover contract balance to a wallet and transfers remaining token supply to it if the sale has ended.
"The function sets a new admin wallet address, ensuring it's not the zero address, and triggers an event upon update."
"The function `release()` enables transfer capabilities by setting `releasedForTransfer` to `true`, allowing transfers after being called by the owner."
The function delistToken allows the contract owner to deactivate a specified token by verifying its existence and updating its active status to false.
The function `takeOwnership` transfers ownership of the token identified by `_tokenId`.
The function allows the owner to mint new tokens and returns a Boolean to signify successful minting.
The function allows the zone owner to set the sell price for their zone.
The function allows the owner to set the market fees.
The function returns the count of PublicSale tokens that are still available for purchase after some have been purchased.
Sets transferEnabled to false for owner.
"The function calculates the total number of carrots for a player by summing the carrots stored in H1, H2, H3, and H4."
"The function sets whether a specified address can burn tokens, controlled by a boolean parameter."
The function calculates the remaining possible sale contribution for a specified wallet by subtracting the invested amount from the maximum allowed contribution.
"The function returns the current state of a license based on whether it's completed, expired, or pending."
"The function calculates the total jackpot distribution after deducting fees and cascading percentages, returning zero values if the jackpot is insufficient."
The function transfers token amounts to other ICO platforms by summing specific token counts and transferring them to a designated address.
The function resolves an error report for a given requestId by transferring funds to the appropriate party based on the audit data and updating the audit state to Resolved.
"The function adds a specified address to a list of owners, allowing any contract or external entity to manage ownership through public access."
The function allows users to withdraw their available funds by transferring them back and emitting a withdrawal event.
"The function returns the amount that can be withdrawn on a specific date by checking each unlock date starting from the earliest and moving forward, returning the corresponding amount when the current date exceeds it."
"The function updates the `icoOverride` state based on the boolean `_icoOverride`, allowing the owner to set conditions for a secondary ICO."
The function retrieves the token balance of a specified user address from a lottery contract.
The function transfers tokens from the contract address to a specified recipient if the balance is sufficient.
"The function returns the index of the first tranche with a positive value in the tranches array, or MAX_TRANCHES + 1 if no such tranche exists."
"The function allows the owner to update and relist a genesis sale by adding it to a sorted sales list, updating its price, and emitting an event."
The function retrieves the Ethereum address of an affiliate associated with a specified investor from a predefined list.
"The function calculates the remaining tokens after distributing a total amount and subtracts costs based on bonus remainders, then returns both values."
The function pauses Round C by setting its status to RoundCPaused after verifying it was previously started.
"Transfer the WeTrust signer of an NFT contract to a new address, restricted to execution when not paused and by authorized callers."
The function validates parameters and initializes a crowdsale by setting start and end timestamps and funding address.
The function retrieves the owner's address from the smart contract.
"The function retrieves a list of users awaiting token transfers, which can only be called by the owner, and returns their addresses."
function receiveFunds() public { } - Sells ether to a wallet during an ICO.
The function checks if the sender has both a positive balance and block.
The function transfers ERC20 tokens from _from to _recipient upon successful execution.
"The function verifies whether the recipient address is a contract capable of handling an ERC721 transfer and returns true if it isn't or if the transfer is successfully processed. verify if _to is a contract or safely process the transfer, returning true upon success."
The function allows the owner to set a specific wallet address to hold unsold tokens at the end of an ICO.
"The function retrieves pixel data including its ID, owner, color components, price, and text for a specified pixel ID."
"The function adds the incoming transaction's Ether value to the `remaining` variable, likely used to track or accumulate funds."
"The function enables users to withdraw ERC20 tokens by checking against their withdrawal limits, updating their withdrawn amounts, transferring the tokens, and recording the transaction."
The function returns an array of unique addresses from the users struct.
The function returns a string representing the current state by using the result of currentState() as an index to access stateNames. returns the current state's name by converting its numeric value to an index and fetching the corresponding string from stateNames.
The function attempts to transfer a specified amount from one address to another and returns whether the transaction was successful.
The function returns the number of tokens sold by subtracting the contract's balance from the total available tokens for sale.
The function checks if all contributors' tokens have been successfully distributed by iterating through each contributor and verifying token distribution status.
The function starts Round D by updating the ICO status if certain conditions are met and logging the event.
"The function retrieves specific statistics for a given round index, returning the winner's address, their position, and the block number associated with that index."
Transfers tokens from contract to address.
Returns the ERC20 allowance from owner to spender.
This function updates the frozen status of a specified address based on the provided boolean value.
Transfers given amount of currency to the beneficiary.
"The function updates the presale end date, requiring it to be after the first stage and before the third stage."
The function returns the number of points for a given player from an array.
Transfers the current balance to the cash out wallet and terminates the contract.
"The function allows the contract's owner to update the status of a specified feature, ensuring the status changes before allowing the update and logging the change."
"""Mints tokens to a recipient, increasing their balance and the total supply by the specified amount, returning true upon success."""
The function returns the stored minimum amount.
The function retrieves the number of administrative signature requirements from the contract's storage.
"The function removes a specified jingle from an owner's tokens by swapping it with the last token in their collection and then deleting the last token, updating both the tokens array and their positions."
The function checks whether the pre-sale or main sale is active by returning true if either condition is met.
The function returns the sell price for a specified block ID using a mapping.
The function calculates the total dividends for a specified address by iterating over a range and summing contributions based on pool balances and token dividends per round.
The function returns the post-deployment state of the contract.
The function clears the approval for a given token ID if the caller is the token's owner.
The function checks if an account has pending orders by verifying if its value in pendingOrders is greater than zero.
Sets a public metadata entry by key-value pair.
"The function overrides `transferFrom` to facilitate emergency pausing, allowing transfers only when not paused."
"The function checks if the balance meets or exceeds the required threshold for success, returning true if the goal is achieved."
The function returns the vested balance of tokens allocated to a specified address.
The function approves a token allocation by transferring the specified tokens to the given beneficiary and resetting their allocated amount.
The function retrieves the approved address for a specified token ID from an array and returns it.
"The function removes a specified amount of beercoins from the sender's account and records them as burnt, ensuring the transaction is irreversible."
getPaycarnita() returns the value of toPaycarnita.
The function removes the allowance of a designated presale contributor by setting their status to false.
The function allows anyone to transfer Change tokens once trading has started by delegating the transfer to the parent contract.
"The function retrieves transaction IDs within a specified range, considering whether they are pending or executed."
The function executes the purchase by delivering tokens to the beneficiary.
"The burn function allows the contract's owner to transfer a specified amount of tokens to another address, reducing both the owner's balance and the total supply."
The function checks if a reference is available for the message sender and returns the result as a boolean.
"The function adds a member to the BS group by setting their address in the memberOfBS array to true, only callable by the owner."
The function calculates the sale return using the formula's calculateSaleReturn method with given parameters.
"The smart contract function allows users to place bets within specified limits, generating a random outcome to determine if the user wins a percentage of their bet or loses it along with a small fee."
The function configures a new era by updating mint price parameters and emits relevant events before returning associated indices and token identifiers.
The function updates the token price per ETH and notifies upon update.
returns Whether the paused state is active
Controls token transfers if trading is open or sent by owner/Community tokens.
"The function allows the contract's owner to update the admin address, with only the owner having execution permission."
The function checks if the given operator address holds a specified role by querying the roles mapping.
The function pops the first entry from a linked list in a specified direction by checking adjacency and removing the node.
The function updates the quantity of a specified consumable item in the narcoCore system when called by TokenContract.
The function allows the contract owner to withdraw the auction balance by calling a method on the DutchAuction instance.
The function retrieves the subsequent transcoder from the pool using the provided address. [Returns next transcoder in pool for given transcoder]
The function allows the admin to retrieve their balance from the adminPool by transferring it to themselves.
The function checks if the current time is within a specified batch period assigned to a beneficiary. isWithinPeriod checks if now is within the batch period for the beneficiary.
"""Removes a specified role from an address and emits a RoleRemoved event."""
This function safely sends the passed parameters' ETH to the specified receiver if conditions are met.
"""Validates purchase against minimum and maximum contribution limits for a beneficiary."""
The function verifies that the given hash corresponds to a valid signature by recovering the signer and ensuring they are not zero and are authorized.
The function checks whether an external block number has reached or exceeded the target block number corresponding to a specified internal block.
"The function updates the multi-signature address for a contract, allowing the owner to replace it with a new address, provided it's not zero, and triggers an event upon update."
"The `identify` function is an external, pure function that returns 0xDA4B055, a fixed hexadecimal value intended as a unique identifier within the smart contract's context."
The function transfers tokens from the message sender to a specified address and returns true if the transfer succeeds.
Returns the maximum amount.
"The function liquidate() allows the team to self-destruct the contract, transferring all remaining funds to the owner."
Checks if a given address has been refunded.
Transfers a part of the funds from the contract to the specified withdraw wallet address.
"The function burns a specified number of tokens from a user's balance by deducting them from both their account and the total token supply, updating the burned count, and emitting relevant events."
The function allows the owner to distribute tokens by updating the contract's state.
The function returns the number of elements in the `emptyIndexes` array as a uint256.
"The function adds a new activity account by assigning provided details to the next available slot in an array, with checks for capacity."
"The function transfers a specified amount from the message sender to a target address, updating balances and recording the transaction details."
The function calculates an extra amount by multiplying the given value with a bonus factor and dividing the result by 100.
This function returns the second-level referrer's percentage bonus.
"The function `getToken` selects between two tokens, `dbetV2` and `dbetV1`, based on the boolean `isV2`, returning the corresponding ERC20 token address."
"The function allows the owner to burn a specified number of tokens from a given address, updating both the user's balance and the total supply."
"The function unlocks tokens for TEAM1 or TEAM2 if their respective unlock conditions are met, transferring available balances to the respective team address."
The function allows the owner to set the maximum amount of ether they are willing to accept.
"The KyberNetwork function initializes the contract's admin address, requiring it to be non-zero."
The function allows the contract owner to update whether deposits are accepted and triggers a notification upon state change.
"The function distributes ether rewards to players whose choice matches the winChoice, calculating payouts based on winOdds and betAmount."
The function allocates a specified amount of tokens to an early contributor from the early contributor share.
"The function is an external method that can be called by another contract or account, potentially handling transactions or interactions involving funds."
The function allows the contract creator to set a lock end date for a specified account and then lock its funds accordingly.
The function `claimAllTokens` allows callers who have completed KYC verification to claim their deposited tokens by retrieving the associated value and initiating the claiming process.
The function sets the first element of the torchRunners array to the address of the caller.
"The function distributes rewards to account holders proportionally based on their contributions, ensuring the total reward does not exceed the provided balance."
The function allows the contract's owner to transfer a specified amount from the provided address to the caller.
The function checks if the beneficiary is not the default address (0) and that the weiAmount is greater than zero.
Retrieves the total number of tickets held by a specified account.
"The function updates the maximum processing capacity to a value between 5 and 15, controlled exclusively by the owner."
"The function allows the owner to update the maximum limit to a lower value, provided it's at least the minimum limit and doesn't exceed the current maximum limit."
Removes an address from the whitelist by setting its status to false.
"The function creates a TokenTimelock and mints 50,000,000 tokens to _teamFund."
"The function allows contributors to withdraw their funds if certain conditions are met, ensuring safe retrieval in emergencies."
Enables an avatar to receive ethers from msg.sender and msg.value.
The function initiates a poll with canonical configured parameters at pollID emitted by PollCreated event.
"The function collects tokens from a list of specified addresses, transferring each amount to the caller after verifying conditions like non-frozen status and sufficient balance."
The function sends ether from the caller's wallet to another address and returns true upon success.
The function sets the lockup contract if the crowdsale hasn't started.
The function calculates the number of development tokens allocated based on the ratio of tokens sold during an ICO.
"The function multiTransfer sends tokens to multiple addresses in a single transaction, returning true upon success."
"The `deposit` function processes a token deposit by deducting a fee, transferring the remaining amount to the contract, and updating user participation records. It ensures the token's allowance is sufficient and handles transfer failures, returning an error or success status accordingly."
Returns the balance of NTS for a given address.
Denies a transfer by marking it as denied.
"The function allocates a specified number of tokens to a beneficiary based on a given rate and stage, updating counters for total tokens per stage and tracking indirect investors."
The function returns the current number of commodities after subtracting one.
"The function retrieves the number of transactions associated with the txIndex array, returning its length as a uint256."
"The function generates a bytes32 hash by combining the contract's address, ""metaTransfer"", and specified parameters using keccak256."
The function initializes Prether as a Token with specified parameters and assigns the supply to the sender's balance.
"The function sets the verification status of a property for a specified user as an agent and signs it, allowing only authorized agents to update property statuses."
The function retrieves the last received timestamp for a specified address from an audit record. lastReceivedAt(address _address) returns the last timestamp when the given address was audited.
"The function allows users to deposit funds into a contract wallet, converting the transaction amount into in-game currency as recognized by the game server."
The function allows authorized users to set the minimum sale price for a smart contract.
Get all the ETH stored in contract
The function creates a vesting entry for a specified user by assigning the given amount and setting the vesting end time to 180 days from the current timestamp.
"The function `mDestroyTokens` allows the owner to destroy a specified number of tokens, likely for governance or supply management purposes."
"The function `setCrowdSaleStart` allows the contract's owner to set the start time of a crowd sale, which can only be done once after deployment."
"The function returns a uint64 value derived from shifting packedScannedCaps right by 192 bits, effectively capturing the higher-order bits beyond the first 64 bits. function scannedDiamondCaps ( ) public view returns ( uint64 ) { return uint64 ( packedScannedCaps >> 192 ) ; }"
The function withdrawTokens allows the owner to transfer a specified number of tokens from the contract to the sender during the Running or Migration state.
Transfers tokens from _fromAddr to each user in the users array via token.transferFrom.
The function allows a token transfer from an address that's not the owner by calling portalGunInstance.participate if _from isn't the owner.
"The function retrieves the owner of a ticket identified by `_num`, returning `0` if no tickets exist (`ticketsNum == 0`)."
cashin() allows a small amount of funds to be deposited before finalizing the contract.
The function allows users to withdraw their locked GNO tokens once the current time exceeds the specified endTime.
"setMessageMaxCharacters sets the maximum allowed characters for messages, callable only by the owner, updating the maxCharactersMessage variable and returning success."
The function allows the owner to retrieve tokens from the contract when available.
"The function retrieves the current owner of a specified token ID from `_tokenOwner` and returns their address, ensuring the owner is not zero."
"The function distributes tokens from the reserve supply to a specified address, updating balances and transferring the funds."
Retrieves the number of tokens by calling another contract's myTokens function.
The function clears the approval for a specified land ID by resetting its owner to address(0) and emitting an Approval event.
The function retrieves an address from a map based on the given address ID.
"The function extends a specific deal by a given number of days, contingent on the deal's prolongation status."
"The function allows the current owner to add a new grant for a specified address, initializing it with given parameters and updating the total vested value."
The function creates a token contract by instantiating ACNN with parameter 0x0.
The function checks if the total contributions have met or exceeded the ICO's maximum funding cap.
"The function ends the crowdsale by setting the stage to Ended unless token.unlock() fails, leaving it in InProgress."
"The function updates the IPFS multihashes for a specific certificate by assigning new values to `ipfsDataHash` and `ipfsCertHash`, then calling an update function."
The function allows the contract owner to accept a token's ownership transfer by calling `token.acceptOwnership()`.
The function returns the minimum of two unsigned integers.
"The function revokes the oracle role from a specified address, callable only by an admin."
"The function `convertNumSec` processes number conversion across sections by compressing data, calculating section tickets, and emitting an onEndTx event."
"The function calculates the number of tokens based on the deposited ETH, applying a base rate and adding a bonus."
"The function calculates the current referral percentage based on the contract's balance, increasing from 1% to 5% as the balance grows."
The function releases tokens from the contract to a beneficiary after a specified time has elapsed.
"The function `approveAndCall` checks if a spender's token approval request is successful and, if so, calls `receiveApproval` to inform them of the approval."
"The function calculates the remaining time until endTime, returning 0 if now exceeds endTime."
Verifies buyer's KYC status.
"The function delivers tokens to multiple users by iterating over an array of addresses, distributing their token balances and resetting each user's balance afterward."
"removeWhiteList function removes an address from a contributor's whitelist if certain conditions are met, including active status and presence in the wallet list."
The function enables token purchase by allowing users to send ETH and calling buyTokens for the sender.
"The function pauses Round A by updating its status to RoundAPaused after verifying it's in the started state and logging the action, accessible only to the manager."
The function calculates the discount value for a given amount by iterating through discounts and returning the applicable discount if the amount meets or exceeds it.
"The function iterates through phases, returning the current phase index if now falls within that phase's date range; otherwise, it reverts."
"This function allows the owner of a token to adjust its price based on specific thresholds, ensuring it meets minimum starting criteria depending on the token's identifier."
This function calls procureTokens with the message sender.
The function updates the xIPFS public key for the protocol.
"The function allows the owner to lock emission, preventing the contract from accepting new ether."
Refunds contributions if the crowdsale is finalized and the contributor has made contributions or received tokens.
Transfers token ownership from Pre sale to Sale
The function getBonus calculates the current bonus in tokens based on the provided amount sold. getBonus ( uint256 sold ) constant public returns ( uint256 );
The function retrieves the vanity URL associated with a given wallet address from a mapping.
Changes ownership to a new address.
"The function adds a specified value to an investor's account if they have previously invested, updating the best investor status and returning true."
"The function sets both paused and finalized states based on the input boolean, with an additional check to update finalizedTime if finalized is true."
"The function buyMFCoins converts a given amount of ETH into MFCoins, updates the pool and total supply, increments the user's balance, emits an event, and returns the received coin count."
The function calculates the total price of a token by adding its base market price to a fee component derived from the price and the market maker fee.
Checks if an address has a specific permission.
"The function getMaxPeriodTransitions returns the maximum possible value for a uint64 type, which is 2^64 -1. getMaxPeriodTransitions returns the maximum uint64 value."
The function allows the contract's owner to update the sale state by assigning a new value and logging the change.
"The function determines the current state of the contract based on block number and balance conditions, returning states such as BEFORE_START, PRESALE_RUNNING, WITHDRAWAL_RUNNING, CLOSED, or MONEY_BACK_RUNNING."
Collects payout for specified address.
The setup function initializes the token and ensures configuration is only executed once by creating an ERC20 token instance from the provided address and setting a flag to prevent reconfiguration.
Sends funds by transferring msg.value to the wallet.
Returns the transferable balance for a specified address by subtracting locked tokens from the total balance.
The function checks whether the contract has ended by comparing the current block number with a specified endBlock value.
The function retrieves the kudos given by a list of users to a specific project and returns an array of these values.
The function updates the release period of an account's stage by iterating through its stages and modifying the relevant one based on given parameters.
The function enables token transfers by unfreezing assets under the manager's authorization.
The function approves the specified address to transfer a given token amount from the sender's ERC20 token balance.
The function returns the start time of the next game.
"""BURNS a specified amount of tokens from the given contract and transfers them to 0x0, only executable by the owner."""
"The function allows a user to claim tokens if the sale is finalized and they have remaining tokens or weiBalance, transferring the tokens to their account and marking them as claimed."
Withdraws owner's balance from contract.
"The function allows the contract owner to withdraw a specified number of tokens from the 'edg' contract, ensuring the amount does not exceed the available balance in the 'bankroll'."
"The function `incTotalSupply` takes a uint `_val`, is accessible externally but only by the owner, and returns a boolean. Currently, it always returns `false` without modifying any state."
Adds a single address to the whitelist and triggers a notification upon addition.
"The function transfers an amount of TMX Global Tokens from the message sender's address to a specified Ethereum address, subject to balance checks and safe addition validation."
Overrides ERC20 interface to control token transfer before finalization.
Creates a new Security Token and saves it to the registry.
"The function allows the owner to transfer tokens to any address and records the transaction as part of the total sold, scaling the value by 10^18."
The function checks if a given buyer has exceeded their approved amount for a specified API ID in the last payout.
"The function sets the rate of one Ether in dollars, allowing the contract owner to update this value."
"transferTokensFromVault transfers tokens from vault to account if called by salesAgent, updating balances and recording the transfer."
"The function calculates the total number of tokens available during the presale period, considering both the exchange rate and a bonus multiplier applied to the provided amount. function getTokensForPreSale ( uint256 _exchangeRate , uint256 _amount ) internal returns ( uint256 ) { uint256 noOfToken = _amount . mul ( _exchangeRate ) ; uint256 preSaleTokenQuantity = ( ( 100 + getPreSaleBonusRate ( _amount ) ) * noOfToken ) . div ( 100 ) ; return preSaleTokenQuantity ; }"
"The function transfers a specified amount from one address to another via the ledger, accessible only by the token."
Transfer token to wallet
The function retrieves the loyalty reward balance for a given member based on their eligibility duration and stake balance.
The function allows the contract's owner to transfer a specified amount of Ether to another wallet via `wallet.transfer(weiValue)`.
The function calculates the total balance by adding the contract's ETH balance to the result of a dividend calculation.
"The function releases all bets back to bettors by distributing their total stakes proportionally from the contract's balance, ensuring each receives a portion based on their total bets."
The function retrieves the ticket values held by each of the three winning castes for a given round ID.
Returns the current AI42 INDEX value.
"The function retrieves transaction details using a hash-based lookup in a ledger and returns issuer, receiver, amounts, chains, timeout, and contract address."
Returns the balance of the sender's address.
The function calculates the developer's share by multiplying the given price by a specified percentage (devCutPromille) and then dividing by 1000 to determine the portion allocated to developers.
The function checks if a linked list has any elements by verifying its length is greater than zero.
"The function converts the given address into a byte array using assembly-level operations, involving bitwise manipulation and memory storage. converts address to bytes"
The function retrieves the current balance of the contract.
The `deposit()` function requires a positive ETH value to be sent by the caller.
Send tokens from the contract's owner to a specified beneficiary.
The function calculates the rate with a bonus in the public sale phase based on the current timestamp and token raised amounts.
The function reClaimBalance allows the admin to transfer all unclaimed tokens from the smart contract to a specified wallet.
"This function mints additional tokens, transferring them to the owner."
"The function allows the owner to update the PicopsCertifier address, emitting an event upon change, and setting the new address after validation."
The function allows the owner to burn tokens that haven't been sold in a crowdsale by reducing both their balance and the total supply by a specified amount.
The function updates the total saved amount for a given safe and removes it from the user's safes list while maintaining the order of other entries.
"The function allows the owner to transfer any ERC20 token held by the contract to a specified recipient, ensuring the token isn't the same as the contract and the transfer is successful."
The function updates the contract's token sale count after a purchase.
"The function checks if initialization is complete and always returns false, indicating no changes are detected."
The function retrieves the fees and reward amounts for a specified week based on the provided index.
"The function calculates the number of eggs purchasable using provided Ethereum and contract balance by calling another function. calculateEggBuy buys eggs using given eth and contractBalance, determined via calculateTrade with marketEggs rate."
The function allows the owner to update the signer's address.
The function allows the owner to remove the contract and invalidate all associated signatures by selfdestructing.
The function allows the contract's owner to self-destruct after verifying that the reward has been withdrawn.
"The function returns the index of the first document whose `validFrom` is greater than or equal to the provided Unix timestamp, iterating through an array of documents."
The function allows the owner to update the maximum cap for USD within a smart contract.
The function transfers ETH from the contract to the owner if the contract has a balance and the transfer is successful.
The function allows the owner to withdraw STAKE tokens through a smart contract.
"The function creates a new token with a unique identifier, assigns it to a specified address, and transfers it, updating the total supply and balance accordingly."
"The function creates a note with specified metadata, title, content, and public key, assigns ownership to the caller, records the note in mappings, and emits an event upon creation."
"The function retrieves information about a specified series, including its name, root hash, and count metrics."
The function retrieves the token ID corresponding to a given UUID by checking its existence and returning the mapped value.
"The function adds a new game to the system if it's not human, assigns a unique ID, updates the games array, and triggers an event."
The function ends the sales process and begins refunding funds to participants.
The function executes a confirmed transaction by checking its status and invoking an event upon success or failure.
"The function transfers a specified amount from one address to another, subject to balance checks, non-zero value, valid recipient, and user role restrictions."
"The function retrieves dividend information for the contract, considering referral bonuses if specified."
"The function checks if a given address is a controller by returning true if it exists in the contracts mapping, otherwise false."
Returns the total number of bets placed in the specified game.
"The function is a public method that immediately reverts without performing any actions, preventing any ether from being transferred."
"The function enables the owner to set canFinalizeEarly to true, allowing early finalization of a crowdsale or offering."
"The function calculates the total amount of tokens vested for a given user by summing all amounts where the vesting date has passed, returning the cumulative amount."
The function returns an array of factory IDs corresponding to a given user ID by accessing the userToFactories mapping.
"Transfers a specified amount to a beneficiary, only executable by the contract owner."
"The function checks whether a given address has a balance sufficient to cover a specified value, ensuring the value is positive and does not exceed the account's balance. hasEnoughBalance checks if an address's balance meets or exceeds a specified value, requiring the value to be positive."
The function retrieves the deposit address at a specified index from an array.
"The function calculates the interest earned over a specified time period, scaled by the given rate, and determines the real-time delta applied."
The function retrieves the highest miles owner for a specific medal leader based on the given index.
Returns the address of the supported token
The function returns the number of pixels in an array.
"The function approves a specified number of tokens from the message sender to another address, updating their allowed token count and emitting an approval event."
return true if the transaction can buy tokens from ICO
Reduces the locked balance of a given account by a specified value.
The function retrieves the number of tokens owned by a specified address.
"The function returns true when the sale ends, either due to time exceeding endTime or tokensLeft reaching zero."
The function allows the contract's owner to transfer the balance from the associated wallet to another address.
"The function marks the current contract as deprecated and updates its address to a new one, callable only by the owner."
The function adds a new approver only if the admin calls it and the newApprover isn't already approved.
Get pool balance
Deletes a specified member from the memberAddresses array if called by the owner.
"The function sets `globalLock` to `false` and returns `true`, unlocking all functionality."
Returns the amount of ether converted into eUSD.
Adds SUPER_ADMIN role to specified address.
Gets the balance of a specified account.
The function allows the owner to set the pool address for investment transfers in business transactions.
"The function allows the owner to transfer the contract's remaining balance to a specified wallet address, ensuring the recipient isn't address(0)."
The function retrieves the owner of the highest price for a specified medal leader index.
The function updates the allowed value that the message sender can spend through the specified address and returns true upon success.
"The function processes multiple accounts, requiring at least one, and iterates over each to claim tokens."
The function allows the contract's owner to set a new minimum waiting period before users can withdraw funds from an unfinished game.
"The function allows updating the number of styles by a minter, requiring the new value to be greater than the current one."
Investors can claim ether refund if total raised fund doesn't reach our softcap.
"The function approves a specified token amount to be spent by another address on behalf of the sender, provided certain conditions are met."
"The function checks if adding _value to tokensSent[_tier] exceeds TIER1_CAP (for tier 0) or TIER2_CAP (for tier 1), returning false if it does, and true otherwise. For other tiers, it returns true without further checks. checkTierCap ensures that token usage for specific tiers doesn't exceed predefined limits, preventing overuse while allowing higher tiers to bypass these checks."
"The function returns whether adding the specified amount causes the counter for the given ID to reach or cross its target value, then updates the counter accordingly."
The function verifies if a given address is associated with the NTRY Token by checking the associateContracts array.
The function continues the ICO by updating its state to 'Started' and initiating the sale process.
"The function calculates the total number of knights by summing values from an array for each dragon type up to a specified limit. [summarized as ""return the number of knights""]"
"The function initializes an AVY Token contract with specified parent address and sets its symbol, name, and decimals."
Sets new allowed address; only admin can call.
The function returns true if the transaction can buy tokens during the presale period with a non-zero value meeting the presale limit.
Sets the fee to charge on each purchase.
The function retrieves preliminary game results by calculating a random number using a block hash and fetching related game data from an array.
Transfers an item and increments its transfer count.
"The function retrieves the base buy rate if `buy` is true, otherwise returns the base sell rate for the given ERC20 token."
Returns the balance of a given player.
The function overrides `transferFrom` from the parent contract to allow its functionality to be frozen in case of an emergency by modifying the beneficiary and calling the parent method.
"The function allows the owner to extend the end date of a running crowdsale, ensuring it remains in the future."
Transfers token to the specified address.
The function retrieves the last timestamp associated with a specified address from the audits array. [Time of the last sent transaction]
The function returns the KYC expiration timestamp in seconds for a specified address.
"The function checks if the caller has an upcoming deposit that hasn't been canceled or skipped, calculates the reward amount based on token balances, and returns true if a positive amount is found."
"The function allows the owner to set the hold duration for a specified address, storing the time value associated with that address."
return true if user has sufficient balance of tokens
"The function retrieves the current balance of the contract address where it is deployed, allowing users to check the funds available in the smart contract."
Sets the token's base purchase rate when the contract is paused.
The function allows the owner to transfer any unused ETH from the contract to themselves after ensuring sufficient funds are available for token purchases.
"The function calculates the education level per citizen in a city based on the number of schools and population, capping the result at 10."
The function retrieves the current block number and returns it as a uint256.
"The function allows the contract owner to add a new game address to an array, marking it as active."
"The function allows the owner to update individual rates for up to four periods, setting each rate only if it's positive and within a specific index range. When updating the current period's rate, it updates the contract's main rate variable."
Returns the amount allowed for the spender by the token owner.
The function returns the total number of tokens that have been emitted by the contract.
"The function sets the specified address as the whitelisting administrator, allowing the contract owner to assign a new admin via a public call that can only be executed by them."
The function transfers ownership of a proxy's administration from one address to another.
The function returns the balance of ERC223 or ERC20 tokens held by a specified address.
"The function allows the owner to update the gas amount allocated for Oraclize queries, ensuring only authorized changes can be made."
The function returns true if the contract is in the WhitelistApplicant period.
Retrieve the available tokens from a specified pool using its ID.
"The function accepts ether to contract for oraclize queries and direct funding by checking msg.value, assigning sender, validating direct[_sender], processing funds via _order, and transferring them to a wallet while reverting unauthorized access."
"The function returns the collected ore balances for a specified asset ID, detailing iron, quartz, nickel, cobalt, silver, titanium, lucinite, gold, cosmyst, allurum, platinum, and trilite."
The function retrieves and returns the current value of the `counter_` state variable as a uint32.
The function updates the address assigned to nameTAOPositionAddress with a valid address not equal to zero.
"The function initializes the `GainmersTOKEN` with a specified total supply, sets its end time by adding `AfterSaleTransferableTime` to `endTime`, and assigns it to the `TeamWallet`."
The function returns predefined share values.
All incoming transactions will transfer funds to purchaseTokens.
Transfers a specified amount of ether from the contract account to another address if the contract's balance is sufficient.
The function initializes tokens and sets a withdrawal limit based on the provided cap_in_wei.
Public function allowing owner to add multiple addresses to a whitelist.
"The function constructs and returns a JSON string containing payment details including payId, time, pType, currencyUSD, payValue, totalToken, tokenWithoutBonus, tokenBonus, bonusPercent, usdAbsRaisedInCents, and refund status."
"The function handles ERC223 transfers by routing to a contract if 'to' is one, otherwise performing a standard transfer."
"The function returns Ether and a token to a contributor after verifying their successful contribution, updating total balances, and resetting their contribution records."
The function allows the owner to retrieve a user's address based on their index in the userIndex array.
The function allows any caller to send funds to a recipient.
Get the current balance of tokens return uint256
Authorises an account for participation.
The function removes multiple users from an allocation list by iterating over each provided address and calling a removal function for each.
"Sets the houses contract address, callable only by God."
The function retrieves checkpoint times and returns them as an array.
"The function approves a specified amount of tokens to a third party address, updates their allowance, and logs the transaction."
The function returns the count of pending rewards assigned to a given user.
Returns unsold tokens to the development account after the crowdsale concludes if certain conditions are met.
The function retrieves the later timestamp between the last received and sent transactions for a given address from the audits contract.
The function retrieves the remaining tokens in the contract from the token wallet.
Returns the remaining FUEL allowance for a given address.
Enables transfer functionality by setting transferEnabled to true and approving a token sale address with zero value.
The function allows the contract owner to burn a specified number of tokens by calling the super.burn method.
"The function forceVoidExternal allows the contract owner to trigger forceVoidRace and notify listeners of an ""Inaccurate price timestamp"" error."
The function returns an array containing the addresses of all tellers.
The function allows the contract owner to set the enforceAddressMatch flag.
Creates a new instance of IcoToken.
The function calculates bonuses based on whether the current time is within the ICO period.
The function checks if a specified poll exists and returns whether a given voter has revealed their choice in that poll.
Declares a new master at another address.
"Transfer tokens from one address to another by agents within allowance limit, return true."
Returns the number of tokens locked for a given address and reason.
The function allows the sender to withdraw their contributed Ether by transferring it back and resetting their balance.
"Sets the address responsible for creating deposits, ensuring it's not zero."
The function calculates the sum of 64-bit segments obtained by right-shifting a 256-bit value. It reconstructs and returns the original value as a uint64. function producedCaps ( ) public view returns ( uint64 ) { uint256 caps = packedProducedCaps ; uint64 amount = uint64 ( caps >> 192 ) ; amount += uint64 ( caps >> 128 ) ; amount += uint64 ( caps >> 64 ) ; amount += uint64 ( caps ) ; return amount ; }
The function allows purchasers to withdraw leftover wei from their purchases by transferring the remaining amount and returning true upon successful withdrawal.
The function returns true if the value of `a` is greater than or equal to `b`.
The function retrieves the amount associated with a specified address and count from the lockedAddresses structure.
The function claims ERC20 tokens sent to the Crowdsale contract by transferring them to the owner if the token isn't the native currency (address 0).
The function retrieves the owner's address for a specified TTM token ID using the tokenIdToOwner mapping. [Return the owner of an TTM return Give The address of the owner of this TTM]
The function `approve` allows the caller to grant spending permission to another address for a specified token value.
"The function allows the owner to set a new gas price limit for the auction, ensuring it's greater than zero, and updates the contract's state while emitting an event upon the change."
"The function returns detailed information about a ticket, such as balance, type, validity, creation and expiration times, contractor details, and review status."
The function allows the owner to update the rarity multiplier for feed items.
"The function `setWhitelisted` updates the whitelist array by assigning a specified zone code to a given purchaser, restricted to authorized callers only."
The function retrieves the current stage details by returning the stage value from a data structure.
"Initializes global token configurations including maximum supply, balance allocation, token details, and developer assignment."
Sets the minimum wei and bonus percentage for the contract.
"The function allows users to claim an airdrop by meeting certain conditions and successfully minting tokens, provided they cover associated gas costs."
The function allows the owner to transfer fees from the contract's collected funds to an approved wallet address.
"The function `fundingActive` sets `buyLimit` to a maximum 64-bit unsigned integer value, potentially indicating no purchase limit or referencing a specific address."
"The function allows the owner to set the start time for Stage 3 of an ICO, requiring a positive value, updating the stored time, and emitting an event with the new and old times."
The function checks if an address owns a specific base by querying the ownsBase mapping.
"The function allows the contract owner to withdraw a specified amount of ether from the caller, triggering an OnWithdraw event."
"The burnTokens function allows a sender to burn a specified number of their own tokens if they have sufficient balance, updating both their remaining balance and the count of burned tokens."
The function retrieves the total amount of tokens repaid by a specified position to the lender from a state variable.
The function pauses unpaused player token contracts in a specified range by iterating through them and calling pause() if they are active. It can only be invoked by the owner or referee.
"The function allows purchasing a specified number of packs, with the referrer possibly earning a commission."
"The function adds a vendor to the list by pushing a direction and assigns them an ID, then creates a Vendor object with their details and returns the ID."
Adds an address to the whitelist.
"The function calculates the maximum deposit in ether based on the total investment, with each tier returning a higher amount up to 20 ether."
Sets start and end times for the crowdsale and indicates it's open.
The function retrieves the balance of a specified address from the balances array.
"The function unreserves an investor at a specified index by verifying their reserved status, decrementing the reserved count, releasing their tokens, and updating their reserved state to false."
The function retrieves the total count of tokens purchased across all sale periods and returns this value as a uint256.
"The function checks if the current time is within the sale period and if the transaction value is non-zero, returning true only when both conditions are met."
The function parses a JSON array string to extract the first element following the opening bracket and converts it into a uint value.
Indicates sale started.
The function allows the owner to transfer any leftover tokens after the sale closes.
"The function checks if the investor's contribution meets the minimum required and ensures the remaining balance does not fall below this threshold, returning true only if both conditions are satisfied."
The function adds unique participants to receive an airdrop by assigning an array of valid addresses.
"The function sends tokens to a specified address based on the provided amount, converting the value into token units and updating relevant records."
The function sets the balance of the sender to the specified value.
"The function calculates a bonus (bon) based on the value of y divided by 1e18 and returns it, with specific ranges determining the bonus amount."
The function retrieves the total supply of tokens by returning the stored value _totalSupply.
"The function allows the contract's owner to modify the winning probability, ensuring it remains between 1 and 9999."
The function removes an entry from the linked list and returns the removed node as a uint256.
The function mints multiple NFTs not for sale by iterating over provided token IDs and generating corresponding URIs.
Checks if the manager can perform an action and returns True if allowed.
The function transfers tokens from a user to the contract and creates an order for selling them based on given price and amount.
registerAddress[_addr] is set to true if _addr is not zero and not already in the array.
This function verifies that only the contract admin can call it by comparing the caller's address to the stored admin address.
The function retrieves multiple resource balances for a specified wallet address and returns them as an array.
mainPlayer collects fee when called by themselves.
Retrieves referrer and referrer reward information from the registrar.
The function takeEth transfers ethers from zebiwallet using msg.sender and msg.value.
"The function checks if a given address exists in the list of investors and returns true if found, otherwise false."
The function returns true if the approval of _value by _spender is successful.
Returns the invitation reward balance of the specified member.
"Deposits funds into a balance upon meeting the ether limit, with the amount kept in the contract for interest."
"The __callback function processes a response from Oraclize, updates query information, and emits an event based on the result."
Returns whether the transfer limit was successfully set for the sender.
"The function allows the Hydro API to sign up official applications by hashing the application name, ensuring it's unique, and recording it along with metadata in the officialApplicationDirectory."
"The function retrieves metadata for a specified image ID, returning the creator's address, extra data, final seed, IPFS hash, timestamp, and an array of potential assets stored as bytes32 values."
The function retrieves the number of reserved tokens assigned to a given group. getReservedTokens ( uint8 group_ ) returns the reserved tokens count for the specified group.
"The function sets the URI for a given token ID, provided the token exists."
The function verifies the status of a specified loan and updates it by adding interest using the current block timestamp.
The function updates the multisig address to the provided new address.
The function returns the current total supply of tokens stored in the smart contract.
"The function returns the price of an aToken in wei, calculated using fracExp when the initial sale is complete, otherwise returning the ICO's asking price."
The function creates a new StandingOrder instance with specified details and adds it to mappings for tracking by owner and payee.
The function increases the approved spending amount for a given address from another address by a specified value and records the approval.
"The function checks if the pre-ICO event has concluded, returning true when it has ended."
The function retrieves the owner's address from the given name using a mapping.
"The function is an external method that accepts ether from the message sender, likely processing the payment."
"The constructor initializes the presale with token details, distribution parameters, and pricing variables based on ERC20 token decimals."
The function returns true if the total Wei contributed meets or exceeds the base target in Wei. function baseTargetReached ( ) public constant returns ( bool ) { return totalWeiContributed >= baseTargetInWei ; }
Only the owner can set jpMinBet.
The function retrieves the address of a token contract based on a given index from an array.
"The `emergencyThaw` function is an external method that sets `isFrozen` to `false`, likely enabling an override of a frozen state in specific scenarios."
Retrieves and returns the balance associated with a given account address.
The function allows the contract owner to destroy a specified number of issuer tokens.
The function allows contributors to collect their allocated tokens for all periods after a preiod deadline by iterating through each period and distributing the collected tokens based on contributions.
The function WithdrawAndTransferToBankroll withdraws funds and transfers them to the bankroll.
The function allows the manager to update the quick buy path by assigning an array of IERC20Token instances.
The function parses a currency rate from an Oracize response using a specified currency ticker symbol and returns the corresponding price as a string.
"Transfers tokens from _from to _to, checking if _from has enough balance and allowance."
The function mints DRC tokens from several specific wallet addresses upon owner approval.
"The function calculates the current segment count by determining the difference between the current block number and an initial block count, then subtracting the product of the current cluster count and 1000 from this difference."
"The function mints a specified amount of tokens to a beneficiary from a bounty pool, ensuring the amount doesn't exceed available tokens and confirming the transfer is successful before distributing them."
"The function converts a uint8 value into a byte by allocating memory, storing the value, and returning it."
The function checks whether the contract can mint agents and if the current agent is set to be released.
Generates a random uint64 number by adding 1 to random(19).
The function _shiftLeft shifts a 32-bit value left by 'n' bits and returns the resulting 32-bit value.
The function checks whether the crowdsale event has concluded by comparing the current time with the end time or evaluating if the token sale has reached its maximum cap.
The function allows the Hydro API to link to the Hydro token by setting its address via the onlyOwner modifier.
"The function allows the contract owner to withdraw accumulated CashReserveFund funds to their wallet, ensuring funds are only transferred when available."
"The function checks whether a specified token exists in an array of mounted children and returns true if it does, otherwise false."
"The function verifies that the transfer requirements are satisfied by checking if the destination is not null, tokens are released, current time exceeds the global timevault, sender's timevault lock-up period has passed (if applicable), and the sender has enough balance to transfer."
Adds a new token ID to the owner's list and updates ownership mapping.
"The function returns true if the contract is within the ICO period, defined by not exceeding the hard cap and being between the start and end timestamps."
"The function updates the total supply and user balance by subtracting the specified amount, then transfers the tokens to an address (likely a burn address), indicating the operation's success."
The function returns the end time of the presale.
"The function calculates the total reward by summing the balances of Bitcoin (BTC), Ethereum (ETH), and Litecoin (LTC) associated with horses."
The function retrieves the balance of the bonus token in the specified vault.
"The function returns true if the crowdsale has not yet closed, indicating it is still active."
"The function calculates a transfer fee for a given address, ensuring the fee is at least minFee and does not exceed the balance of the address, then transfers the fee to the transferFeeOwner."
The function retrieves and returns the campaign name specified in the smart contract metadata as a string.
The function returns the total number of cards minus one.
The function allows the owner to unlock tokens for trading.
"The function `ownerkill` allows the contract's owner to trigger a self-destruct, rendering the contract inoperable."
The function adds new investors to the investors list and approves their status.
"The function deposits Ether into another address, facilitating transfers without the contract holding the funds."
"The function allows the owner to mint new Tokens to a beneficiary up to a specified limit, ensuring the total Token supply does not exceed this limit."
"The function returns the number of diamond caps produced, calculated by dividing the packed value by 2^192."
The function converts a given amount in USD to its equivalent value in ETH using a predefined exchange rate and returns that value.
The function processes the claiming of tokens by checking conditions and transferring tokens or ether accordingly based on whether claiming is enabled.
Sets sub developers and initializes Phoenixes creation.
"Adds an address to the whitelist, setting its status as whitelisted."
"The function calculates the number of tokens and bonus amounts based on the investment value in wei, considering the current stage's parameters and ensuring sufficient token availability."
The function allows the owner to add ETH to the contract.
"""Creates a token for the specified owner if the corresponding index hasn't been initialized."""
The function `close()` allows the contract to self-destruct by transferring its remaining balance to the owner when called by the owner.
"The function closes the minting process by verifying ownership, stopping further minting, and returning a success status."
"The function refunds ether to the message sender if the contract's state changed, otherwise reverts."
The function calculates the number of tokens corresponding to a specified amount of wei by dividing it by a fixed course.
The function enables ETH deposits for users sending transactions with positive values.
The function allows the owner to update the gas price limit by setting a new value.
Checks if an address corresponds to a valid contributor ID.
The function adjusts the freezing time for a specified unicorn by subtracting an amount calculated from the sub-freezing price and the provided count.
"The function retrieves the minimum and maximum stats for a specified class ID from a mapping, returning these as arrays."
"The function multiplies two uints, returning their product unless an assertion fails when division doesn't match the original multiplier."
The function checks whether a given address is whitelisted by accessing the allowedAddresses array.
Sets the minimum transferable amount for distribution.
"Sets the treasury address to a new value, requiring authorization from the contract's owner."
The function `setTokensContractAddress` allows the owner to update the contract address responsible for token operations.
"The function allows the owner to send ether to the token contract, converting the amount into dividend points based on a multiplier and total supply."
Retrieves the identifier for a given address from a mapping.
The function closes a specified window by deactivating it and transfers the contract's balance to a wallet address.
"The function allows the contract's owner to withdraw all available DTH tokens from a specified address, ensuring the transfer is successful."
"The function transfers tokens from a specified contract address to another address, intended for recovery of accidentally sent tokens."
"The function calculates the minimum and maximum ETH values for deals by converting token values from getTokenDealRange() into ETH, then applying predefined min and max bounds using SafeMath functions. getEthDealRange() calculates ETH deal bounds by converting token values to ETH and applying MIN_ETH_DEAL_VAL and MAX_ETH_DEAL_VAL limits."
The function starts the next phase of an ICO by updating the current phase's end time and the subsequent phase's start time.
The function returns the current amount held in escrow.
"""Function acts as a fallback, immediately reverting without performing any actions."""
"The function allows the owner to burn a specified number of tokens from a user's account, reducing both their balance and the total token supply."
The function returns an array containing the indices of all CrySol objects in the game.
"The function transfers ownership of a Vanity URL from the message sender to a specified address, updating mappings and emitting an event upon successful transfer."
buyFromPartner buys tokens from a partner by allocating available tokens based on predefined limits and transferring them to the recipient.
"The function transfers tokens from a specified address to multiple investors, adjusting token amounts by multiplying with 10 raised to the token's decimals."
"""Calculates the purchase price by dividing 'price' by 'precision_factor'."""
"The function retrieves detailed room night information including vendor ID, room plan details, token, price, timestamps, dates, IPFS hash, and name using a given room night ID."
This function allows the contract creator to add a new video game item with specified details to the list of available games.
"The function checks if `targetToken` is not address(0) and transfers `_value` from it to the owner, returning true or false based on the transaction's success."
The function returns true if the event has ended.
Sends collectedFee to bribedCitizen if msg.sender matches.
"The function determines the winning proposal by comparing weights, prioritizing higher weights, and using the first proposal as a tiebreaker if weights are equal."
"The function updates the total supply and main wallet balance by adding a specified amount, logs a transfer, and returns true upon successful minting."
Returns true if the given promise has been confirmed by the recipient.
"The function `emergencyPay` allows sending Ether to the contract externally, as it's an external payable method without parameters. emergencyPay ( ) external payable { }"
"The function updates or creates user reward entries for multiple addresses, ensuring each has a valid entry in the system."
Removes a specified address from the whitelist by setting its whitelistedTransfer status to false.
The function updates the payout for the estates owned by a given address by calculating the total owed from a pool and distributing it to each estate.
Returns an array of token identifiers owned by a specified address.
Instantiate a new Trezor Multisig 2 of 3 contract owned by the three given addresses.
"""This function processes ether transactions, updating bids and tracking the highest bidder while ensuring badge availability."""
"The function retrieves specific information about a token by ID, including its type, name, URL, and whether it's snatchable."
"The function calculates the number of blocks remaining until the next dividend payment based on the current block number and given parameters, returning 0 under certain conditions."
The function allows the owner to mint a specified number of tokens to an address without exceeding the project's hard cap.
"The `killContract` function allows the contract's owner to self-destruct, transferring control to them and rendering the contract inoperable."
"""Updates NFT contract metadata with new hostname, name, and symbol for WeTrustManager."""
The function retrieves the state associated with a specific request ID from the requests mapping and returns it.
"The function burns a specified amount of tokens from both the sender's balance and the total supply, transferring them to another address."
This function calls buyBlockCDN.
function setICOover ( ) public onlyOwner { ICOover = true ; }
TransferTokenOwnership function allows the current owner to transfer token ownership to a specified new address.
"The function allows the owner to add specified addresses to a whitelist, setting their status to whitelisted and assigning them a remaining balance of 15 ether."
The function retrieves a registered EOS address from the original EOS crowdsale by querying the contract associated with the given address.
The function determines whether a UTXO can be redeemed by verifying its hash against a given proof.
"The function allows the bid publisher to cancel an accepted bid by updating its state, adjusting the advertiser's bid count, and logging the cancellation."
"The function allows updating the delegate address for the contract, requiring the caller to be either the owner or minter, and records changes while notifying about them."
The function calculates the basic token amount by multiplying the contributed ether amount with a predefined conversion rate.
"The function checks if a given address has been marked as a holder at any step between `transferStep` and 1, returning true if found. checkHolderStep (address _funderAddr) public view returns (bool ) { bool returnBool = false ; for ( uint8 i = transferStep ; i >= 1 ; i -- ) { if ( holderStep [ i ] [ _funderAddr ] ) { returnBool = true ; break ; } } return returnBool ; }"
The function transfers token ownership to the owner after the PreSale ends if the soft cap hasn't been reached.
The function returns a boolean indicating whether a given username has been claimed by checking if its hash exists in the userDirectory with an initialized status.
"The function delegates bonding to an oracle on behalf of a holder, returning the total ZAP bound to the oracle."
The function adds multiple users to the whitelist by iterating over an array and calling addToWhitelist for each user.
"The function transfers a specified amount from the contract's wallet to the buyer's wallet, provided the contract has sufficient funds, and records the transaction with an event."
"The function creates verified users from an old contract by iterating over old usernames, assigning them to a new users array, and updating mappings."
"Transfers ownership to another address, only executable by the current owner."
The function allows an admin to update or create a defined game by setting specific parameters and emitting an event upon successful modification.
The function returns all users as an array of addresses.
This function distributes Xinfin tokens to specified addresses by subtracting corresponding values from `onSaleTokens` and updating each recipient's balance.
The function checks if a user is registered by determining if registration is active and whether the user is on the allowed list.
"The function transfers tokens from the message sender to a specified contract address, updating balances and invoking token transfer logic through a receiver contract."
"The function finalizes the bonus sale phase, adjusts token caps for the main sale, and transitions to the main sale stage."
Sends a full refund of wei and resets committed tokens to zero.
The function allows the owner to withdraw all available funds from the contract to their wallet.
Approves an address to mint tokens by setting its status as a manager.
Registers the ERC165 interface during initialization.
"The function 'allowance' checks that the transaction payload has exactly two elements and delegates the allowance calculation to a parent contract, returning the remaining allowed amount."
Returns the remaining allocated bounty tokens.
The function removes a specified signer from an entity by invoking `internalRemoveSigner` with the provided arguments.
"The function checks whether a given address exists within an array of addresses and returns true if found, otherwise false."
"The function `stopInEmergency` checks if the received ether is below a specified threshold; if so, it reverts the transaction, otherwise, it triggers a purchase."
The function retrieves an array of token addresses associated with a given owner through an external view.
Sends purchased ERC20 tokens via minting or transfer.
"The function allows the contract owner to set the primary Tottle address, ensuring it isn't zero."
Returns the minter's allowed allowance.
The function allows the owner to change the whitelist component address.
The function retrieves the current version name as a string.
The function allows the contract owner to assign an affiliate setter address.
The function returns the total supply of tokens by outputting the stored _supply value.
The function pauses the pre-ICO by updating its status to PreIcoPaused after verifying it's in the PreIcoStarted phase.
"The function transfers tokens from the caller's balance to a specified address, ensuring sufficient funds are available, and updates both parties' balances accordingly."
"The function inserts a new node into a sorted list of nodes based on the given amount, positioning it correctly to maintain order."
"The function calculates tokens by converting USD to ether and applying a scaling factor based on soldTokens, cap, and an additional value."
Transfers limited before sale closure unless sender is admin or holds sale tokens.
The function returns an array of tree identifiers currently on sale.
"The function `batchTransfer` sends tokens to multiple recipients in a single transaction, transferring `_value` tokens to each of the provided addresses in `_receivers`, with checks for frozen accounts and sufficient balance."
The function retrieves and returns the address of the holder corresponding to the provided index.
The function creates tokens by updating the member's balance and transferring them.
"The function retrieves various details about the current round, including its ID, state, Ethereum balance, prize pool, key count, leading team, Ethereum per key rate, last activity time, gap between rounds, dead key rate, dead keys count, alive teams count, tracking ID, and start time."
"""Initiates the release process for the caller."""
The function converts a byte array into an address by adding its length to 20 and reading the result from memory.
"Generates a random number using the hash of the previous block and a given seed, then applies a cryptographic hash function to produce a 32-byte value."
The function transfers a portion of the contract's balance to specified parties based on predefined percentages.
"The function initializes a security token with specified parameters including name, ticker, total supply, decimals, owner, max poly, lockup period, quorum address, and related token and customer addresses."
"The function is a public constructor that reverts immediately upon being called, preventing any further execution."
"The function allows the owner to set a new maximum investment amount, which must exceed both zero and the existing minimum amount."
"The function approves a pixel for a given address under specific conditions, updating the approval status when necessary and emitting an event upon approval."
The `transferFrom` function allows transferring a value from one address to another if the sender has sufficient balance and allowed transfer capacity.
"The function allows the contract owner to withdraw a specified amount from a given address, ensuring only the owner can execute this action."
The function allows the owner to destroy Beercoins by removing them from the system irreversibly.
"The function returns true when maxSupply is less than or equal to redeemedSupply, signaling the sale has concluded."
The function adds multiple addresses to the security token whitelist.
The function updates the system's reserves for a given token address by adding a specified amount and lists the address if it's new.
The function allocates tokens from an advisor's pool to specified beneficiaries in given amounts.
"The function checks whether a transaction payment for MCW has a non-zero timestamp in the registry, returning true if it does."
The function batchTransferSame enables a single sender to transfer the same amount to multiple recipients simultaneously.
"The function grants additional tokens to an address if they already hold some tokens and the required time lock has expired, updating their token balance and triggering a transfer event."
The function receives a player's name list by updating their status if called by the PlayerBookMain contract.
The function updates the USD value of tokens based on the provided ETH price by converting it into cents. updatePrice calculates USD value in cents using the given ETH price.
"The function allows changing the founder's address for a specified ID by updating the corresponding entry in the distributionAddresses array, ensuring the new address is not zero."
Removes MINTER role from address
"The function returns the last winner address based on campaign activity, defaulting to 0x0 if no campaigns exist."
The function pauses the pre-sale round by setting its status to PreSalePaused after verifying it's in the PreSaleStarted phase.
"The function withdraws Ethereum when a fund is closed by checking timestamps, funding status, balance, and sender authorization before allowing the transaction."
"The function allows the contract's owner to set a new exchange rate agent, provided they are not address 0."
"The function updates a compliance proof by replacing the existing Merkle root with a new one and provides additional proof data, returning whether the update was successful."
The function returns the staking balance of a specified user by accessing the stakeBalances mapping.
The function distributes fees for multiple claims associated with a given job ID by iterating over an array of claim IDs and calling distributeFees for each.
The function checkAllowance verifies that the user's remaining allowance (after a commission) is at least equal to the specified _tokens.
The function executes a sell order based on input parameters and verifies the order's base currency is ether.
"function processCooldown calculates the cooldown duration for a child pony based on its generation and the specified target block, returning the time until the cooldown ends."
"The function retrieves the address authorized to move an asset, returning true if the asset has been approved by the holder."
The function retrieves the balance of an ERC20 token for a specified address.
"The function transfers tokens from the sender to _to if not paused, not blacklisted, and the value doesn't exceed the sender's balance."
The function changeStartTime allows the contract's owner to manually update the start time for an event or process.
"The function executes a token transfer from the superclass, checks if the recipient is a contract, and if so, calls a fallback method with additional data before emitting a transfer event."
"The function `freeMem()` retrieves the memory pointer stored at address `0x40` and returns it as a `bytes32` value, aiding in memory management by indicating the next available allocation location."
"The function recordDeposit updates the balanceForDividendsHistory with the provided amount, recording a deposit."
The function collects a payout from `msg.sender` by transferring their balance to them and updating the total payouts accordingly.
Sets up initial balances; must be called after token ownership transfer to the crowdsale.
The function allows the owner to transfer a specified amount of ERC20 tokens to themselves.
"The function retrieves specific data for a given setting ID, including identifiers, names, types, and status flags, from a structured storage system."
"The function allows the owner to transfer AIB tokens to investors in exchange for payments made in currencies other than ETH, ensuring valid investor addresses and positive values are provided."
"The function checkExist returns true if the provided user address exists in the whitelist, indicating their presence."
"The function checks if the current block's timestamp exceeds the last auction time plus the remaining seconds, reverts if not, determines the winner from the latest auction entry, updates game data, starts a new round, claims rewards, and emits an end event."
The function allows the contract's owner to transfer a specified amount to another address.
"The function transfers all available funds (etherRaised) from the contract to the owner, requiring that funds have been raised before transferring."
"The function computes a hash of the provided parameters by combining them with encodePacked and applying keccak256. function getParametersHash ( bytes32 _voteParams , IntVoteInterface _intVote ) public pure returns ( bytes32 ) { return ( keccak256 ( abi . encodePacked ( _voteParams , _intVote ) ) ) ; }"
refundETHtoDonors after successfulICO
"The function checks if the current stage is payable and matches the Pre-Ico stage, returning true only if both conditions are met."
function addMember ( address member ) public onlyOwner { memberAddresses . push ( member ) ; }
The function retrieves the updated version ID of a specified document by its ID.
The function returns an array indicating the amount of outcome tokens held by the specified owner for each token.
The function converts a given amount of USD into Wei by multiplying it with WEI_PER_ETH and dividing by USDEtherPrice. function usdToWei ( uint usd ) view public returns ( uint ) { return WEI_PER_ETH . mul ( usd ) . div ( USDEtherPrice ) ; }
The function adds a specified token amount to the sender's locked vesting if they have a vesting record.
The function retrieves metadata for a specified token ID by checking its validity and returning the name of the associated human.
"The function allows the admin to withdraw a fee (admin_profit) by transferring it to the caller, provided admin_profit is positive."
The function retrieves the token balance of a specified address from an array.
"Resumes operation by resetting halted state, callable only by owner."
"The function executes a limited number of options for an address, deducting the executed count from both the address's balance and the total supply."
The function asserts the sender's ownership of tokens after the vesting period ends by claiming them.
The function checks whether tokens sold meet the total supply or if combined fiat and ETH balances reach the hard cap.
"The function sets the sell rate for tokens per ETH sold by the owner, requiring a positive value and emitting an event on rate changes."
"The function allows the owner to update the maximum distribution value for coins, ensuring it is greater than zero and at least as large as the coins already raised."
"Returns true if tokenController is 0, sealing the campaign."
The function enforces that an operation can only occur if the current time is within the specified window defined by `contract_start` and `contract_finish`.
The function returns the total balance of the contract.
"The function sends collected funds and remaining tokens to the beneficiary upon reaching the soft cap, finalizing the process."
"The function determines the insertion point for a new token by iterating through nodes from last to first until it finds one with fewer tokens than the specified amount, returning its ID."
The function retrieves the API ID associated with a specified hostname by returning the corresponding value stored in the apiIds mapping.
"The function allows the caller to withdraw their deposited balance if they are the designated beneficiary and the contract has a positive balance, transferring the funds to the specified account."
The function updates the minimum ETH income and triggers an action upon setting.
"The function converts incoming Ether (msg.value) into tokens using purchaseTokens, with refAddress possibly indicating where they're stored or transferred."
"The function allows the owner to withdraw accumulated funds meant for the Founders Team and Advisors, transferring them to their wallet and resetting the balance."
"The function enables users to transfer tokens and participate in a Jackpot operation by setting a custom reserving percentage, affecting the net transfer amount."
The function updates the main player address when the message sender matches the current main player.
"The function initializes a Robincoin ERC20 token with specified initial supply, name, and symbol."
Returns address of the first token holder.
The function calculates the total ETH a user has paid in the current round by summing payments across multiple days if they haven't received any ETH back for this round.
The function checks whether the current time exceeds the last price update time plus twice the update interval. Check if current time is past last price update plus double interval.
"The function allows transferring contract ownership to a new address, which must be accepted by the new owner, and can only be initiated by the current owner."
"The function calculates the converted value from USD to another specified token (ETH or POLY) using the retrieved exchange rate. convertFromUSD calculates the converted value from USD to a specified token based on the exchange rate, returning the amount in ETH or POLY."
The function allows the contract owner to transfer a specified amount of tokens to themselves under emergency circumstances.
"The Bakt function initializes the registry name and sets the trustee based on conditions, defaulting to the message sender if necessary, before joining the trustee into a structure."
A public function that emits a Payment event with sender and value from message.
"The function allows a minter to burn some of its own tokens by validating the caller is a minter, the sender isn't blacklisted, and the amount is within the sender's account balance."
"This function sets up a race by initializing its parameters, including the start time, betting duration, and race duration."
The function retrieves and returns the address of the ERC20 token stored in the contract.
The function sets the rewards hash and starts the validation process once rewards are ready.
The function allows the owner to set a new URL for retrieving world population data via Oraclize and returns a success status.
"The function reverts all incoming ether, preventing any funds from being accepted by the contract."
Sets the upgradeability owner's address.
The function enables migration by designating an IMigrationTarget for future updates.
Calculates and returns fees using feeCalculator.calcFees.
The function retrieves the donation amount made by the caller using their address.
The function withdrawTokens retrieves any ERC20 tokens accidentally sent to the contract and transfers them back to the caller.
The function allows the owner to set the default airdrop amount and emits an event upon execution.
Returns whether the refund for a partner was successful.
The function withdrawAll allows the contract owner to transfer their entire balance to themselves and then reset it to zero.
"Sets bonus amounts for specified USD values, ensuring they are provided in descending order."
The function checks whether a given address has the poweruser role and returns a boolean indicating the result.
"The function calculates the difference between totalEthBankrollCollected and totalEthBankrollRecieved using SafeMath.sub and returns this value as a uint256. function etherToSendBankroll ( ) public view returns ( uint256 ) { return SafeMath . sub ( totalEthBankrollCollected , totalEthBankrollRecieved ) ; }"
Allows the owner to transfer a specified amount of ether to the caller.
Returns the amount of tokens allowed to be spent by another address.
The function transfers unsold ICO tokens to a specified wallet by subtracting sold tokens from the total cap and using the token contract to send the difference.
"The function sets isInvisible[docid] to false, making the document with the given docid visible, and triggers an InvisibleDocumentEvent."
"The function returns the length of the `libraries` array, likely intended to represent the total token supply but currently does so incorrectly."
The function checks if the current block timestamp falls within a specified tier's active time window and ensures the tier has not been finalized.
"The function `getTokenAmount` incorrectly causes infinite recursion by calling itself without returning a value, leading to an error. function getTokenAmount ( uint256 _weiAmount ) public view returns ( uint256 ) { return _getTokenAmount ( _weiAmount ) ; }"
"The function allows transferring tokens from an address to another, subject to the contract's pause status and additional checks specified by modifiers."
"UseRedEgg converts red eggs into snails for a player, updating their progress and potentially winning a round."
"The function locks a specified amount of tokens for a given beneficiary by creating a TokenTimelock, ensuring no prior lock exists and the beneficiary is a valid address, then transfers the tokens to the lock."
The function initializes a four-way split by assigning given addresses to indices of a beneficiary list.
"The `transfer` function allows transferring a specified value from one address to another, returning whether the transaction was successful."
The function transfers a custom amount from the contract to a specified address upon successful execution.
The function returns the remaining tokens allowed by the tokenOwner for the spender to transfer.
"The function allows the owner to mint tokens to a specified address, updating balances, total supply, and transferring tokens while tracking holders."
Returns the address of the RareCoin contract.
"The function iterates over frozen portions, unfreezing eligible ones based on a time condition and transferring their tokens."
"The function checks whether a provided address is non-empty and not equal to the message sender's address, returning true if both conditions are met."
The function retrieves the first redemption request ID from the redemptionsQueue and returns it.
"The function allows an administrator to update a specific ballot option if the ballot isn't sealed and the option ID is valid, ensuring only authorized edits."
"The function allows the owner to simultaneously whitelist up to 150 user addresses at once, preventing potential gas limit overuse and DoS attacks by limiting the number of address additions in a single transaction."
"The function initializes the portal gun mechanism, allowing external activation."
"The function checks whether the amount of Ether raised, converted to USD using a specified exchange rate and scaled by 10^20, meets or exceeds a defined cap. capReached ( uint256 raised ) internal view returns ( bool ) { return raised . mul ( ETHUSD ) . div ( 10 ** 20 ) >= USD_CAP ; }"
The function verifies an account by ensuring the provided name isn't already in use and updates the account's details with the given information.
The function attempts to send a refund to the specified address and returns whether the transaction was successful.
"The function setOwnerCut allows the contract owner to update the owner cut value, provided it does not exceed 10,000."
"Ends the current sale by setting its end time, updating its status, and recording the total funds raised along with the current round number."
The function adds an admin by setting their status to true in the admins array and triggering the AdminAdded event.
The function retrieves and returns the current ticket price associated with a bet.
"The function changes the allowance for a specified address, toggling its ability to mint."
"The function burns a specified amount of tokens from the caller, updating total supply and distributed amounts, and emits a Burn event."
Constructor initializes the owner's account during deployment.
"The function checks if a purchase is valid by ensuring the amount raised is below a cap, within a specified time period, and not zero."
"The function allows a holder to lock a specified value into their account's current interval if they are either the message sender or transaction originator, updating the `locked` mapping and calling another function."
"The function sets `lockAccount[_to]` to true if called by `marketor`, indicating that `_to`'s account is now locked."
"The function allows deducting specified amounts from the caller's balance and transferring these amounts to multiple users, provided each user has enabled direct debits."
"The function initializes the contract's stage as Deploying, likely preparing for a token sale or crowdfunding phase."
"The function retrieves the locked amount for a contributor, returning it if the current time is within 90 days after their countdown date; otherwise, it returns zero."
"The function deploys an Oracle contract for a specified maker, taker, and index, checks for prior deployments, initializes the contract with given parameters, updates tracking, and emits an event."
The function adds `obolValue` to `totalObol` and transfers it from `charonsBoat`. [adds to total obol and transfers]
The function allows an investor to purchase tokens using another cryptocurrency during the ICO phase by creating tokens and logging the transaction. [Issues tokens for users who made purchases in other cryptocurrencies]
Returns the name associated with a given user address.
"The function overrides `transferFrom` from a parent contract, using the `tradingOpen` modifier to handle value transfers between addresses."
The function triggers a raise mechanism that likely involves accepting ETH and distributing tokens. **Summary:** Fallback function receives ETH and sends tokens back.
"The function burns remaining public tokens after verifying conditions, updating total supply, and resetting token allocations."
"The function retrieves the index of a specified developer address within an array, returning the first occurrence found."
"The function allows the contract owner to send their balance to themselves, returning a success boolean. [Owner withdraws Ether in contract]"
The function approves a setting update for a given `_settingId` by verifying the proposal TAO ID's advocacy status and emitting an approval event.
"The function changes the authority to a new address, requiring the caller to be the current authority."
Returns the OneledgerToken instance stored in token.
"The function transfers remaining tokens to the MIND FOUNDATION WALLET only if hasEnded() returns true, allowing the owner to return unsold tokens once the condition is met."
The function calculates the winnings for a given bet and percent by returning (bet * percent) divided by hundred.
The function calculates and returns the total supply of the token. Function to return the total supply of the token
The function transfers an amount of ACE Equity Tokens from the message sender's address to a specified Ethereum address.
return true iff operation was successfully completed
The function returns the deposit amount that the transactee has to send to fulfill the transactor's request.
The function retrieves and returns the count of signatures needed for minor transactions.
"The function sets a new cost per character for renaming, which only the contract owner can modify externally."
The constructor initializes the contract's state and may accept Ether upon deployment.
"The function approves the specified address as a recipient of tokens, allowing it to transfer up to the given amount from the provided token contract."
The function retrieves an array of message IDs that have not been opened by a specified user.
The function throws if called after a specified block for founders.
"Retrieves data about an MC at a given index, including player address, time metrics, and status."
The function returns true if the investment state is active and either there are no restrictions or the investor's investment is allowed by the restrictions contract based on available tokens.
The function appends valid address and uint256 arrays to storage after verifying their lengths and non-zero elements.
"The function initializes balances for multiple addresses by transferring funds from the owner to each address, then deducts the total transferred amount from the owner's balance."
The function transfers data layer authority from the current owner to the newOwner address.
The function checks if a contribution is valid by ensuring its value falls within a defined range and returns this validation result.
"The function `finalizeLastRound` retrieves the latest round and calls `_finalizeRound`, concluding the process. FinalizeLastRound: Anyone can finalize a finished round."
The function retrieves and returns the last block number mined by the caller (msg.sender).
"The function issues adjusted tokens to a director, ensuring the total does not exceed the token cap."
"The function retrieves a main account address from an array using the provided index, ensuring the index is valid."
Crowdsale owners can collect ETH any number of times
"The function retrieves and returns the market identifier, stock symbol, quantity of shares held, and average price paid per share for a specified holding index."
The function allows the owner to update the address of the eternal storage contract.
"The function generates a pseudo-random integer between 1 and max using a SHA3 hash of blockhash and timestamp, adjusted by a seedswitch, then modded by max and incremented by 1."
The function transfers funds from a specified address to the smart contract and returns true upon success.
Mints tokens to winners or prize funds via DAO access during worktime.
"The `migrate` function allows the contract owner to transfer its balance and assets to a new contract, facilitating an upgrade by self-destruction."
The function allows the contract owner to remove their committed destination address from the `ownerCommitedAddresses` mapping.
"The function reverts without altering the blockchain state, preventing unintended changes."
"The function is a public, payable method designed to accept Ether payments."
"The function retrieves or calculates the share value for a specified address and round ID, adjusting parameters as necessary."
"The function retrieves the quota, index, and level of a whitelisted user."
"The function allows the owner to set a one-time price in wei, capped at 2000 szabo."
"The function transfers a specified amount from one address to another, updating their balances and emitting a transfer event."
The function allows the owner to update the minimum and maximum burnable amounts for TrueVND users and notifies the contract of these changes.
The function retrieves the number of locks for a specified address by returning the length of the locks array associated with that address in the tokenLocks data structure.
The function retrieves the info URL for a specified Chibi token ID from an array.
return true if the transaction can buy tokens
"This constructor initializes ownership, sets the latest logic address based on a given version number, and records these mappings in an array."
Get payer of a request return payer address
"This function retrieves the details of a specified team, including its name, owner address, and current price, using the provided team ID."
Changes the owner of a token to _newOwner.
"Sets HIGHER_PRICE_RESET_PERCENTAGE to a value between 1% and 99%, allowing the owner to adjust it."
The function refunds invested funds if the softcap wasn't met and the sale period has concluded.
"The function initializes the CurrentToken by setting its address, allocating an initial total supply, transferring it to the ICO address, and pausing operations."
"The function returns true if the current time is within the ICO's start and end dates, indicating the ICO is ongoing."
The function `getOwner()` returns the address of the current owner of the smart contract.
"The `reloadTickets` function reloads tickets for an affiliate based on the provided `_affID` and `_eth`, ensuring the caller meets activation, humanity, and ether limits, then updates the ticket system and emits an event."
The function retrieves the total supply from a contract and returns it as an unsigned 128-bit integer. [Total Supply View Total Supply Return Total Supply]
"The function `acceptOwnership()` allows the proposed new owner to transfer ownership by calling it, after which they are set as the owner and their address is reset to zero."
The function generates a random number by computing maxRandom with given parameters and returning its modulo result relative to _upper.
"The function creates a new token contract based on the parent token and returns it, allowing for token cloning with specified parameters."
"The function returns true if the current time is within the specified start and end times, otherwise false."
The function checks whether a specified address is whitelisted by verifying if its entry in advisorsWithEntitledSupply is non-zero.
The function verifies that the provided signatures correspond to the given signers and returns the number of valid signatures or 0 if invalid.
"The function allows the contract to be funded, enabling it to cover costs such as Oracle call payments."
The function transfers collected ether to a specified beneficiary address.
The function retrieves the remaining count of blocks for a promotion from another part of the contract and returns it as a uint256. getBigPromoRemainingBlocks()
The function pays out tx fees by allocating a portion to the artist and the remainder to shareholders.
"The function `naturalUnit` is an external view that returns a uint256, representing a specific natural unit of measurement or value."
Retrieves a list of policy addresses associated with the contract.
"The function multiplies two uint256 values safely and returns the product, ensuring no overflow occurs by verifying the division result matches one of the inputs."
"The function creates a new post with the provided link, assigns it a unique ID, updates tracking mappings, and returns the new post's ID."
"""Updates startTimePreIco with a new value, ensuring it's positive, and emits an event upon change."""
"The function converts a uint to its string representation by calculating its length, then iteratively extracting each digit starting from the least significant digit and constructing the string in reverse order before returning it as a string."
"The function updates the congress address to a new value, provided it's not zero, with the onlyCongress modifier restricting usage."
The function distributes funds to all districts by adding a portion of the input value to their weed and coke pots.
Puts a specific cat up for adoption by offering it to another address with a given price.
Retrieves the customer's TxRegistry address from a mapping.
"The function retrieves and returns the current pending admin address, ensuring it's set correctly."
"The function allows an Oracle to withdraw a value after deducting fees, transferring the remainder to a specified address, while updating period tracking."
The function checks whether a given address is equal to the owner's address and returns a boolean indicating the result.
The function retrieves the buy price from the BigSisterToken contract and returns it as a uint256. Returns the buy price from the BigSisterToken contract.
"The function implements the standard transfer method with an authorization check, ensuring transfers occur only from permitted senders."
"Returns the total tokens sold, either from the finalized state or via minting."
"The function `emergencyExtract` allows the owner to transfer the contract's balance to themselves, effectively extracting the ether."
"The function `_isContract` checks if an address corresponds to a smart contract by verifying if the address has code stored, which is determined using `extcodesize`."
The function calculates the number of unallocated tokens in the pool by subtracting the allocated tokens from the total balance of the contract in the token.
The function retrieves and returns an array of address values representing every registered channel.
"The function changes the owner's share per thousand for buying transactions, restricted to being called only by the owner."
Returns the total number of deeds stored in the contract as a uint256 value.
The function getOAR is a constant function that returns an instance of OraclizeAddrResolverI.
"The function `safeToAdd` returns `true` for all non-negative values of `a` and `b`, as the condition `a + b >= a && a + b >= b` is always satisfied."
"The function sends tokens from the contract to a specified sender, requiring the transaction to be successful and only allowing the owner to call it."
"The function `mintTokens` allows the contract owner to mint tokens to a specified holder, ensuring the transaction is valid before proceeding."
The function retrieves the owner address for a given token ID from a mapping and ensures the owner is not zero.
The function allows users to transfer pharmcoin tokens from one address to another by checking the sender's balance and ensuring valid parameters before updating the balances.
"The function tracks a reverse stock split by dividing the total quantity into shares based on a given divisor, selling any extra shares, updating the position's average price, and emitting an event."
"The function updates the top 20 referred addresses by replacing the smallest current value with the new one if it's larger, then shifts the list left."
The function returns the total number of tiers by retrieving the length of the tokensPerTierTotal array. numberOfTiers
The function allows the contract's owner to set the pre-sale status to false.
Contribution function for DCORP members handles transactions.
"The function batchBuild processes a batch of token data, including geolocation coordinates and popularity levels, for creation or updates within a single transaction."
The function allows a participant to sign a contract by verifying the contract ID's validity and ensuring it hasn't been signed before.
Returns TRUE if there is an open commissioner auction for a realWorldPlayer identified by _md5Token.
The function returns all ETH and tokens to the original sender by transferring tokens to the multisig and sending the contract's ETH balance back.
The function adds a specified value to a shop's balance at a given address.
"The function 'curse' transfers tokens from a specified address to a cursed token contract, updating balances and emitting a transfer event."
Returns the combined stake and reward balances for a member.
"""Creates a new app instance linked to this kernel and sets its base implementation if needed, returning the AppProxy instance."""
"The function 'ownerPutCapital' allows the owner to deposit a positive amount of capital into the contract, subject to initialization and pause status, with funds assigned to finalizedCapital."
The function retrieves the allocation for a specified preminer address at a given index. getPreminerAllocationByIndex
"The function extends a bond's expiration time for a specified number of blocks if certain conditions are met, including not being stopped, being claimed by the correct beneficiary, and not exceeding the extension limit."
"The function allows the depositManager to send a deposit by verifying their authority, checking the value limit, transferring the funds, and emitting an event."
"""Adds a lock on _target until _frozenEndTime, releasable after _releasePeriod."""
"The function allows owners of tokens to decrease their price or, if there's no owner, the coo can adjust it."
The function accepts ether contributions and returns the received amount.
The function allows withdrawal of shares from a specified coin pair using its index.
"This function retrieves the company ID, owner address, and current price of a share based on its unique identifier."
Sets a new exchange rate with a positive value.
The function retrieves the item category details for a given class ID by returning its associated class ID and category array.
Removes a specified address from the whitelist and emits an AddressRemoved event.
"""Updates token reward for a specified address and adjusts available tokens."""
"The function _pushLandId adds a new LAND ID to an Estate, updating associated storage variables after validating ownership and registry controls."
The function returns the number of locked tokens associated with a given address. [Checks the amount of locked tokens return Number of locked tokens]
"The function allows contributors to purchase tokens by sending ETH, checks if the contribution doesn't exceed the funding goal, transfers the funds, calculates the token amount, attempts to transfer tokens to the beneficiary, updates records, and logs the transaction."
The function checks if the given address is whitelisted and has sufficient funds to purchase tokens.
The function calculates the next bid amount by adding a fixed value (potato) to the current highest binding bid.
"The function transfers ERC20 tokens from a wallet to a specified address, ensuring the transfer respects balance and period limits before executing."
"The function configures the smart contract by validating and assigning configuration parameters, including setting the executor admin to the message sender if not explicitly provided."
The function reclaims ERC20-compatible tokens from the contract to the root address.
"The function allows the owner to mint tokens to a specified beneficiary during a crowdsale, with defined token limits ensuring non-zero values and preventing zero-address recipients."
The function retrieves the number of kudos given by a user identified by their address from a data structure and returns it as a numerical value.
Allows the current owner to transfer control of the contract to a new owner.
The function retrieves the remaining tokens that a specified spender can use from an owner's allowance.
"The function allows the owner to mint tokens for a specified receiver, increasing both the receiver's balance and the total supply, with a maximum limit enforced by maxSupply, ensuring no further mints once frozen."
"The function allows the contract owner to set the address of an external exchange contract, updating the contract's state with this address."
The function updates the owner's balance with `reservedTokens` and transfers them from address 0 to the owner.
"The function sets the team's address, requiring the campaign state to be advanced and the new address non-zero, then initializes the token vault for the team."
Refunds tokens to a specified address by transferring them and emitting a confirmation event.
"The function adds a wallet address for a specified ID, only allowing the contract's owner to execute it."
The function retrieves the token balance for a given Ethereum address from the `_balances` mapping.
"The function adds a new tier by specifying a discount and available supply, updating both the discounts structure and the Tier contract instance."
The function retrieves the current points of the king from the players array and returns them as an unsigned integer.
"""Mints specified amount of tokens to target address and updates total supply."""
"The function allows the current signer to transfer control of the contract to a new address, with only the original signer having the authority to perform this action."
Emergency Pause is called by Owner in case of Emergency.
The function returns true if the current time is within the specified sale period. returns ( bool ) { return ( now >= startTime && now <= endTime ) ; } Returns true if current time is within open sale period.
"The function `isOMICrowdsaleContract` is a public pure method that checks whether the current contract is an OMI Crowdsale Contract, returning `true` to confirm its role."
The function retrieves and returns the number of pieces stored in a variable named `piecesLength`.
"The function allows sending an amount and block number to lock STE tokens, ensuring the sender's balance, block timing, and vesting requirements are met before updating their vesting parameters."
Upon successfull ICO Allow owner to withdraw funds
"Sets the minimum token distribution amount, controlled by the owner."
"The function changes the `topWithdrawable` status for a specified round, toggling its value if certain conditions are met."
"The function returns the token rate corresponding to a specified tier, with tier 3 having an additional condition based on a timestamp."
"The function calculates the unlocked balance for an account by iterating over locked amounts, adding them if the current time meets specific conditions relative to their lock times."
"Sets token price and Ethereum USD rate, requiring both to be positive."
"The function allows an authorized user to delete their account by hashing their username, checking for existing entries, and confirming ownership before removing the entry from the directory."
"The function generates a bytes32 hash by hashing the provided address with keccak256, combined with 'script_exec_permissions'."
Starts an ICO by updating the stage and setting the start date.
The function allows the winner to withdraw the entire balance from the contract to the specified recipient.
The function reverts all incoming Ether transactions immediately.
The function returns whether the approval of `_value` by `_spender` for eBlock Coin was successful.
"The function allows users to mint tokens to a specified address by updating their balance and the total supply, provided the sender is authorized."
"Sets the presale start, main sale start, and end dates, ensuring they are valid and in order."
"Sets the gas price for Oracle queries, requiring a minimum of 20 billion wei, and is only callable by the owner."
"The function allows the contract's owner to burn a specified number of their own tokens, reducing both their balance and the total supply, with the tokens sent to address 0."
The function enables token transfer functionality when called by the contract's owner.
"The constructor initializes the list of owners and sets the minimum number of confirmations required, validating each provided owner is not already an owner and not the zero address."
"The function retrieves the deed ID for a specified owner at a given index, ensuring the inputs are valid before accessing the data."
The function checks if a specified address exists in the list of royalty partners.
The function checks if selling is possible by comparing the contract's balance against the converted value of BBD.
"The function converts a byte array with an offset to an address by loading the 32-bit value at that offset. function _bytesToAddress ( uint _offset , bytes memory _input ) internal pure returns ( address _output ) { assembly { _output := mload ( add ( _input , _offset ) ) } }"
The function returns an array containing the addresses of previous winners.
"The function transfers ownership of a knight to a new address by verifying the caller's role, transferring balance, and updating the ownership record."
"Pauses the contract, preventing further transactions."
"The function allocates tokens to an address based on the current sales state, calculates total tokens considering discounts, updates token supplies, and tracks fundraising metrics."
Overrides ERC721Token's setApprovalForAll to enable emergency freezing functionality.
Storing predictive event participation information The contract owner updates the event's attendance hash and emits an event.
"The deposit function allows the owner to receive ether, requiring at least 1 wei."
The function adds a new order entry to the specified owner's list with given parameters.
The function retrieves the note associated with a given account address from a data structure and returns it as a string.
Mints a new token with given tokenURI for specified address.
The function unregisters a DSP address from the registry and returns its unused deposit to the sender.
"The function releases tokens to an investor if certain conditions are met, including checking the stage and issuing additional tokens using CryptoCopyToken."
"The function transfers an amount from _from to _to only if _from has sufficient balance and the transaction increases _to's balance, with no fees charged, callable exclusively by the owner."
"The function checks if the purchase time is valid and processes early purchases, updating records accordingly."
"The function computes the integer square root of x using an iterative method that narrows down the value through successive approximations. sqrt(uint x) internal pure returns (uint y) { uint z = add(x, 1) / 2; y = x; while (z < y) { y = z; z = add(x / z, z) / 2; } }"
"The function updates the payout for each token owned by the given address based on its type (CITY, LANDMARK, or OTHER) and adds the total payout to the owner's balance."
The checkBalance function retrieves and returns the balance of the smart contract's address.
The function adds ETH received via `msg.value` to a specified player's balance if `msg.value > 0`.
"The function increases the certified assets by `_units` and updates the storage with the new total, emitting an event upon execution."
The function revokes the address's permission for a specified kind by removing it from the permissions list.
"The function allows the owner to transfer ERC20 tokens to another address, emitting an event upon withdrawal."
The function creates a currency by recursively calling itself with the same parameters and an additional empty string argument.
"The function retrieves and returns the details of the individual with the largest recorded ""dick"" size, including their name, notes, size value, timestamp, and address."
"The function calculates and distributes subscription bonuses to an investor based on their token balance, ensuring the correct number of tokens are issued or throws an error if issuance fails."
Withdraws outstanding divs to internal balance
The function transfers unsold JointToken tokens from the current contract to the RewardPoolAddress if available.
"The function returns true if the current timestamp falls between START_WEEK_1 and SALE_END_TIME, indicating the crowd sale is active. Return value: Returns true if the public sale is currently running."
"The function allows the owner to validate and execute a coin sale by the seller, updating balances and transferring the sale proceeds."
The function sends ether with different values by explicitly calling ethSendDifferentValue.
The function allows the admin to transfer money to a specified user address when called from the admin's account.
"The function allows the admin to transfer any remaining tokens from the contract to themselves if called before the token sale closing time plus 61 days, ensuring timely recovery."
"The function updates the official address if necessary, only callable by the owner."
Sets the exchange rate for one ether in terms of tokens.
The function allows the owner to set the minimum bet value.
The function adds a specified amount of tokens to a given address's balances and updates the total balance accordingly.
"The function sets the exchange rate from USD to ether using _weiValue, callable only by the oracle."
"The function decrements the token lock count for a voter and, if it reaches zero, calls an unblock method on another contract."
"The function `sendSurplusTokens` sends excess tokens from the contract to `gatFoundDeposit` if authorized by the owner, provided there's a sufficient token surplus."
"The function calculates the duration for a specific tier by hashing the index, the string ""duration,"" and a list of sale tiers using keccak256, returning the result as bytes32."
The function sets the valueInUSD to the provided ETH amount.
"The function sets the address of the relay contract, which can only be modified by the owner after verifying it's not zero."
The function bulk updates the verified status for multiple Monetha users based on provided addresses and statuses.
"The function checks if the pre-ICO is active by ensuring the current time is within the period, tokens sold are below the hard cap, and the process isn't paused."
"The function retrieves and returns the token balance for a given address, adding owed tokens if reward generation hasn't been completed."
Retrieves the join time and invitor of a specific group member.
"The function retrieves the last non-published pull request from a queue array using an index, returning 0 when no more requests exist. getLastNonPublished() returns the last non-published pull request or 0 if none remain."
"The function calculates the total resource points for a specified player by summing the balances from multiple contracts, each multiplied by specific multipliers."
The function extracts the lower 16 bits from the higher-order part of _hGame after dividing by 2^48.
Get EXH token balance for provided address in lowest denomination.
"The function transfers tokens from one address to another, verifying compatibility and non-frozen status while updating balances and allowances."
"The function adds a new contractor to the system, associating them with a specified manager and creation date."
The function `revealNumber` checks if the transaction sender can reveal a number for a specified requestor and then proceeds to do so.
The function removes specified users from whitelist A by setting their entries to false.
The function returns the maximum profit as decided by the token bankroll for the message sender.
"The function allows the contract owner to set the number of tokens generated per ether, enabling control over token creation rates."
The function retrieves the locked balance for a specified user by invoking _syncLockedDepositsAmount with the given user key and returns the result.
The function returns the token balance of the Fees contract.
The `approve` function transfers tokens owned by another address to the `_spender` address.
The function allows the owner to freeze or unfreeze a target account and notifies others via an event.
"The function calculates the amount and fee for a given time period, applying fees when necessary and handling edge cases like zero start amounts or single-day periods."
"The function allows the owner to update the whitelister address, preventing it from being set to zero."
Pays out to a DRCT token via the specified interface.
The function returns whether the token sale is currently paused. [Returns true if tokensale is paused]
"The function returns the total authorized supply, a numerical value representing the total amount of an asset."
MainContract used this function to verify game's contract.
The function calculates a portion of the token's total supply based on the given percentage relative to a fixed sales percentage. function poolTokensByPercent ( uint256 _percent ) internal returns ( uint256 ) { return token . totalSupply ( ) . mul ( _percent ) . div ( salePercent ) ; }
"The function `claimBitNauticTokens` allows contributors to claim their BTNT tokens by passing `msg.sender` to `grantContributorTokens`, returning a boolean indicating success."
"The function calculates the owner's cut based on predefined thresholds, returning a percentage of the sale price depending on its value. If the price exceeds 5000 finney, the owner receives 2%, increasing progressively to 5% for prices below or equal to 250 finney. CalculateOwnerCut returns a portion of the price based on its value, with higher-priced items yielding a lower percentage for the owner."
The function retrieves a list of insurance units set to expire by iterating over a defined period and mapping each unit based on its expiration date. getExpiringUnitList() returns a list of expiring insurance units by mapping each unit based on its scheduled expiration.
The function allows the owner to set the total value to a specified amount.
"The function updates the token's price upon owner or admin action, requiring a positive value, and emits a change event."
The function transfers tokens from teamAddress2 to an investor after one year following the end of the crowd sale.
The function adds a new cashier by setting their status to true and notifying about the addition.
The function setFounder allows the owner to assign a new founder address.
The function emits an event to trigger proof registration for atomic swaps.
"The function calls `contribute()`, initiating a public contribution process."
Returns the deadline of the latest campaign.
The function initializes the advisor's vault by setting its status and minting the required tokens.
"The function allows users to purchase KWHs using Ether, ensuring sufficient funds and availability before transferring the energy units to their account."
"The function `withdraw` allows the contract's owner to transfer its remaining balance to a specified address, ensuring the recipient is not the zero address."
Registers a new passport version with its logic implementation address.
The function 'decimals' returns the value 8 as a uint8 type.
The function transfers a specified amount of tokens from the message sender to another address if the sender's balance is sufficient.
The function withdrawAffiliateBalance transfers the sender's affiliate balance to a specified receiver after verifying the balance is positive.
"The function allows the owner to set the maximum gas refund, ensuring it's positive, and returns true upon successful update."
"The function allows the contract owner to add a specified amount of ETH to an address's balance in the ethTellerBalance array, returning true on successful addition."
The function allows the owner of the contract to withdraw all ether collected by transferring the contract's balance to themselves.
The function initializes a new snapshot by incrementing the snapshots array length and setting its tokens count and first address before creating the snapshot.
"The function checks whether the current block's timestamp is before the ALLOCATION_LOCK_END_TIMESTAMP, returning true if so."
"The function allows the contract owner to burn a specified amount of PLUTUS from a given address, updating balances and totals while emitting an event."
Retrieves the contract's token balance from a specified token contract.
The function sets the next game rules by assigning verified parameters to the game state.
"The function retrieves the balance of the contract on a specified token, likely Ether, using another method."
"The function retrieves the price of a specified player from a predefined data structure, returning the associated value based on the player's ID."
"The function sets a new multisigned wallet address for receiving ether, requiring it to be non-zero."
"The function ends the pre-ICO stage, resetting the balance for the current address and transitioning to the next stage, possibly adjusting the token supply."
"The function allows the owner to update the exchange lock time, ensuring it is greater than zero before setting it."
"""Updates the current round index that is actively being processed by the contract."""
"The function refunds a user's tip if their last tip was more than two weeks ago and their username hasn't been verified, then transfers the amount to the sender."
"The function allows beneficiaries to withdraw their contributions from an ICO after it has concluded, ensuring the sender is authorized and transferring the specified amount or their full contribution if eligible."
"The function allows users to place bets within a 5-day window after a betting round starts, recording the number of tweets as their bet and incrementing counters for different bets and total bets in the current round."
The function takes the first byte from the input bytes argument and returns it as a bytes1 value.
"The function allows a sender to sponsor a job by transferring DAI tokens from their address to the contract, updating sponsorship details, and incrementing related variables."
The function allows the owner to transfer any mistakenly sent ERC20 tokens back to themselves.
The function updates the balance for a given address and increases the total investment by a specified amount.
"The function adds a specified value to a given address's locked balance, ensuring valid inputs and constraints are met before updating the contract's records."
The function allows the admin to set a new rate for the crowdsale.
Sets the ether-to-USD conversion rate.
The function allows the owner to transfer a specified amount of tokens from their balance to another address during the presale phase.
"The function allows the owner to transfer coins from a specified marketing vault to another address, ensuring only the owner can perform this withdrawal."
"The function calculates the difference between totalEthBankrollReceived and totalEthBankrollCollected, returning the amount of ether to be sent to the bank roll."
Appoints new sales agent
The function updates the status of a specific board identified by `boardId` using the provided `newStatus`.
Allows anyone to transfer SelfPayToken tokens once trading has started.
The function allows the owner to update the `mainEndTime` timestamp.
"The function freezes multiple specified addresses at a given address until a certain point, logging each freeze event."
The function withdraws the jackpot deposit from the participant and adds their address to the jackpot participants list based on the transaction amount.
Withdraws tokens from Foundation reserve to a specified address.
The function creates a new fashion item with specified attributes and returns its unique identifier.
The function sets the address of an ERC20 token and initializes a token object with this address.
"The function changeMaxCap updates the contract's maximum allowable cap, ensuring it remains at least equal to the total amount already paid, and can only be called by the contract owner."
"The function generates a random number by hashing the block's timestamp and difficulty, then applying modulo operation."
"The function allows the CEO or CFO to withdraw a specified amount from the contract, contingent on the balance being sufficient, with the transfer destination determined by the 'who' parameter."
The function checks if an address is approved to manage another's pixels by verifying the stored approval in the operatorApprovals array.
"The function allows the owner to set a new dex address, validating it's not the current one and must be a deployed contract."
Returns the allowance allocated by _owner to _spender.
"The function adds an address as an administrator, with only the owner able to execute this action."
The function allows the owner to pause purchases during the landsale by setting paused to true.
Transfers a specified number of tokens to a beneficiary.
"The function sets the address of an ERC20 token contract, allowing the owner to update it, with modifiers ensuring only the owner can call it and it's not paused."
"Returns the current rate of the crowdsale if inPreSale, else the main rate."
Allows someone to send ether and obtain the token.
The function retrieves the total number of CARDS currently in the game.
"The function allows the maker or owner of a specified order to remove it from the orderbook by verifying its for-sale status and calling an unlist process, then emitting a removal event."
"""Enable token transfer to specified address by owner."""
"The function returns the count of elements in the connectorTokens array, cast as a uint16."
"The function allows the contract owner to withdraw a specified positive amount, provided the voting date hasn't occurred."
"This function allows the contract's owner to terminate the crowdsale prematurely, setting its state to ready."
Grants access to a specified role for a given address.
"The function allows the owner to update the base Eth cap per address before the general sale starts, ensuring it can only be modified during this period. [Updating the base Eth cap per address before the general sale starts.]"
Removes an address from the blacklist.
The function returns true if the specified address is an accepted member of the DCORP group. [Return Whether the DCORP member is accepted or not]
"The function immediately halts execution upon being called, preventing any actions from occurring."
"The function updates the base tokens per ether value, accessible only by the team when the contract state is Waiting."
Cancels a specific battle identified by battleID.
"The function allows the contract's owner to close a specific game when it's frozen, updating its state and result, then emitting an event."
The function retrieves a list of permission flags and returns them as an array.
"The function allows users to place bets on either Philadelphia (team 1) or New England (team 2) by validating the team selection, ensuring timely placement, and updating respective bet counts."
The function returns the frozen balance associated with a given account address.
The function returns the count of bets by checking the length of the bets array.
"The function retrieves the total tokens released in the current year (yearSum), on the current day (daySum), and identifies the current year (currentYear) based on the current timestamp."
The function calculates the current reserve and rate of the destination token based on the provided source token and amount.
The function updates the property status for a given user and emits an event upon status change.
The function converts a given amount in ETH wei to mill units by dividing by the conversion rate.
Pauses the contract when called by CLevel when not paused.
"The function accepts Ether payments in a public, payable method."
"Sets the duration of Phase 4 of the ICO by updating its start and end times, ensuring _start < _end, and emitting a ChangeIcoPhase event."
The function connects the contract with the CrowdsaleContract and approves it to spend tokens equal to the owner's balance.
The function allows the owner to check if the landsale is paused by returning a boolean value.
The function retrieves and returns the current count of players.
"The function returns true if the investor is not the owner, ensuring that only non-owners can proceed."
The function calculates the private sale end date by adding 30 days to the start time and is only accessible to the owner.
The function initializes the DelphyToken contract by distributing tokens to specified owners and verifying the total supply matches the expected value.
Returns the total number of bags stored.
The function returns the length of the allocations array.
"The function unConfirmPayment reverts the confirmation status of an investment to false, allowing the manager to manage investor confirmations."
The function checks if an address is registered by returning a boolean from the registeredAddress mapping.
The function burns a specific amount of tokens from the target address and decrements their allowance.
The function allows a merchant to transfer funds to a specified beneficiary address.
The function updates a user's balance by adding a specified amount to their account.
"The function logs incoming ether transactions, capturing the sender's address and the amount received."
"The function checks if the raised USD meets the goal, handles successful or failed finalization, burns remaining tokens, transfers ownership, and updates the state based on multicurrency finalization."
"The function pauses or resumes operations based on the current paused state, controlled exclusively by the owner."
"Sends a special taster package to recipient contract, ensuring token supply is sufficient."
The function retrieves the affiliate rate for a specified level by accessing an array with the provided index.
"The function retrieves a list of supported digital currency tokens within a specified range, along with their total count."
Triggers token purchase for the caller via buyTokens.
Retrieve all YUM tokens from contract and transfer to owner.
The function calculates the number of CAK tokens to mint by dividing the received wei by a specified rate.
The auctionsSetOwner function assigns ownership of a house to a specified address after an auction.
The function retrieves specific buyer information from a structured data storage using a given buyer address.
The logStage function logs the current stage for a given sender using the onlyActivePoaToken.
The function retrieves the block number associated with a specified token ID and returns it.
Enables access for everyone when called by the owner and when not everyone is disabled.
The function retrieves profile information from a map using the provided key and returns the corresponding value.
The function allows the owner to set the end time of the contract to a specified value. setEndTime updates the contract's end time to _newEndTime.
The function resets the change attempt count for a specified user by setting their original address's attempt count to zero.
The function initializes a distribution contract by setting its address and ensuring it hasn't been added before.
"The function initializes a user's kingdom by setting their resources and map coordinates, increments totalCities, and logs the action if they haven't been initiated before."
The function withdraws remaining ETH and DAS tokens from the contract to designated recipients after the crowdsale deadline.
The function retrieves the amount of ether corresponding to a given token amount by calling _getEthAmount.
The function allows the owner to unpause a specified PoiToken by invoking its `unpause` method.
The function updates the rates contract and emits an event upon the change.
The function transfers pieces of art or tokens from one address to another.
"The function allows the contract owner to withdraw a specified amount, not exceeding their available balance, from the contract's funds."
The function retrieves the subsequent redemption request ID following a given current ID from the redemptionsQueue.
The function allows the contract owner to withdraw a specified amount of Ether from the contract balance and send it back to the caller.
The function retrieves a list of animal IDs currently in the egg phase.
"The function allows the contract owner to update the ETH price feed address, ensuring it is not zero and emits an event upon change."
The function ensures that minting cannot be reactivated once finished by checking if minting is already concluded before proceeding.
The function returns the adjusted balance of the next campaign or the current campaign's final balance based on its finalized status.
The function safely adds two uint256 values and returns their sum after ensuring the result meets a condition.
The function transfers the raised funds to the target wallet upon successful completion of the ICO when the soft cap is met.
Returns the start time of a specific tier.
"The smart contract function allocates tokens based on the current time within specified tranches, with each tranche having a cap, and transfers them to the sender while deducting from the total supply."
The function converts an ECDSA public key into an Ethereum address by hashing it with keccak256 and applying a 16-byte mask. function pubKeyToEthereumAddress ( bytes pubKey ) public pure returns ( address ) { return address ( uint ( keccak256 ( pubKey ) ) & 0x000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ) ; }
"The function overrides `transferFrom` to transfer tokens from `_from` to `_to`, ensuring the destination is valid."
The function transfers the balance of saleAuction and breedingAuction contracts to the Core contract.
"The function retrieves whether each address in `addressToCheck` is an approved token, returning an array of boolean values."
Sets the available balances of two tokens (ZNT and ZLT) for this contract.
The function cancels a specific security token offering proposal by index and returns whether the operation was successful.
The function allows the owner to set a reserve pricing value that can only be modified by them.
"The function removes specified addresses from a VIP list by setting their status to false, accessible exclusively by the owner."
"The function retrieves the number of rewarded tokens, a specific contribution status, and whether an address is a contributor."
The function checks whether the maximum Ether cap for a presale has been reached and returns true if it is met.
"The function processes a buy order by validating the base currency, creating an order, processing the trade, updating volume, and deducting fees if the volume threshold isn't met."
The function retrieves the minimum and maximum token deal values from the core module and returns them as a pair.
The function updates the gas price limit for the owner.
The function checks if the current time has exceeded the loan's activation time plus the total duration of all terms. isTermOver
The function retrieves the number of signatures needed for administrative changes stored in WalletMainLib's WalletData.
"The function calculates the percent variance between two values, returning 100% if either is zero."
"The function returns the total count of payments that were ever authorized, including any that were subsequently canceled."
The function returns the number of items in the registry.
Adds ERC 20 tokens to user's token list
The function updates the expected start time and sets betting close time to expected start minus 60 seconds.
The function makes coins tradable between users in a irreversible manner.
The function checks the current tokens allocated as a bounty and returns the calculated total amount.
"The function generates a random number by combining the hash of a specified block and a seed, then modulating the result with a given range to produce a value within that range."
Calculates and returns the total supply of CTN coins.
Returns the highest bid or pending returns for a given address.
"The function finalizes the ICO by updating its status to IcoFinished, records the timestamp, and logs the completion."
The function retrieves the deposit address for a specified sales agent from a predefined mapping.
Sends ETH from the contract to an address.
The function checks whether the owner allows a transfer transaction from the given address. Checks if the owner allows a transfer from the specified address.
"The function calculates the required token balance by multiplying the total price by the token rate, scaling down by 10^18, adjusting by a percentage, and then scaling again to determine the necessary token amount. Calculate the amount of tokens required based on the given parameters."
The function reserves a vanity URL for an owner by updating mappings and emitting events based on its current usage status.
The function returns the amount of ETH that the specified address can withdraw from the contract.
The function calculates the remaining Ether intended for charity by subtracting the received amount from the total collected.
The function allows receiving Ether via a public payable method.
"The function allows the owner to distribute tokens by minting a specified amount and triggering another distribution process, provided manual distribution limits are not exhausted."
The function allows the owner to update the extensions contract address by assigning a new valid address.
"The function emits an event upon receiving ether, recording the sender's address and the transaction value."
The function withdrawBalance allows the owner to send a specified amount of cash back to themselves if the contract's balance exceeds that amount.
The function allows a user to withdraw a specified amount of tokens after verifying they have sufficient holdings and meet a holding period requirement.
"Modifies the URI for a token by its ID, callable only by moderators."
Transfer token balance to beneficiary
The function returns the number of contracts by accessing the length property of the contracts array.
"The function retrieves the main wallet address of a specified contributor by their ID, ensuring the contributor is active."
The function retrieves the trade balance for a specified account.
"The function attempts to transfer coins from one address to another, conditional on sufficient balance and allowed amount."
Stores a spender's minimum token purchase amount for a given whitelisted tier.
return true if presale is active
"The function extracts three components from a byte array: r as the first 32 bytes, s as the next 32 bytes, and v as the 65th byte."
Creates a new NTToken instance with a total supply of 1e27 tokens assigned to a specified wallet address via a transfer event.
The function transfers all backer tokens from a given sender after verifying they have tokens and the lock period has expired.
The function retrieves and returns the balance associated with a specified address from an internal array.
"The function retrieves investment details (end time, address, lock status, and amounts) for a specified investor using their address from a map."
"The function returns the price for one token, either from a specified bid or the first bid if none is provided."
"The function checks if the mantissa of the given Exp is zero, returning true when it is exactly zero."
Retrieves delegate details for a specified address.
The function checks if the maximum allowed ether has been raised and returns true if it's reached.
"The function `releaseBonus` allows the contract owner to set `isBonusLocked` to `false`, unlocking a bonus that can then be released."
"Burning a set amount of tokens from both the sender's balance and the total supply, then transferring them to a burn address."
The function allows the manager to distribute a specified number of tokens to a given contract as rewards.
The function allows the owner to send a partial amount from the contract to the CJ Team wallet and reduces the remaining available funds.
The function ensures an order is valid by validating its hash with a signature and returns the hash.
The function calculates the additional ETH required by the owner to adjust the sell price based on the proposed value.
The function transfers tokens to a beneficiary and updates the total delivered tokens.
The function adds multiple wallet addresses to a collection by iterating over an array and calling addWallet for each address.
The function accepts completed work on a project by updating its status to CLOSED after verifying the work is done.
"The function updates contributor details, adds token rewards, allocates tokens to marketing supporters, and withdraws contributed tokens, ensuring only valid contributors receive rewards."
"The function sends cryptocurrency from one blockchain to another using Oracalize, with the transaction's result sent back to a specified return address."
Accepts ETH dividends from Zethr token contract.
Transfers ownership of the LLG token to a new owner.
The function returns the total number of registered ZTK checks by retrieving the length of the ZTKCheckAccts array.
"This function returns detailed information about the current game, including its status, timestamp, block start, remaining jackpot duration, queue length, total investments, multiplier, jackpot amount, and the last member who won the jackpot."
Retrieves the current value of unitsOneEthCanBuy.
Revokes the ban on transfers for given addresses.
"The function approves a manual token swap for a specified address, updating their balance and emitting a transfer event."
The function transfers tokens from the RetailersAddress to the specified investor.
Withdraw tokens from the reserve.
"This function allows the current owner to transfer ownership to a specified new address, ensuring the new owner is valid."
"The function sets the release manager to a specified address and updates the system, accessible only by the owner under certain conditions."
"The function sends tokens from the contract to a specified address upon owner authorization, utilizing the ERC223 token's transfer method."
"The function checks if the maximum funding cap has been reached, updating the state to success and calculating the token amount if the cap is met, then notifying the owner."
"The function creates a loan using an array of parameters and metadata, returning the loan's ID."
"The function burns all remaining tokens of the caller, setting their balance to zero and updating the total supply to zero."
The function disables purchase functionality for a specified IERC20Token based on a boolean flag while allowing continued selling operations.
The function allows the admin to deposit tokens from a specified address after verifying the balance is positive.
The function replaces the specified animal with the last one in the array by updating indices and decrementing counts.
The function retrieves the stake value corresponding to a specified round number or uses the current round count if zero is provided.
The function claims vested tokens for a user by transferring them to a specified address.
The function calculates artwork ID and index by adjusting a random number according to probability thresholds and mapping it within a defined range.
"The function `transferFrom` allows a contract to transfer tokens from one address to another, subject to checks on token freezing, sender privileges, balance sufficiency, and allowance limits, updating balances and allowances upon successful transfer."
"The function calculates a bonus value based on the proportion of tokensold relative to 10^23, returning 90 if no tokens are sold and adjusting the bonus downward as more tokens are sold."
The function retrieves and returns the address of the token store.
"The function overrides `StandardToken.transferFrom` by calling `takeSnapshot` on both `_from` and `_to`, then executes the transfer."
"The `addHolder` function adds a new address as a shareholder, updating internal records for tracking ownership or rights within the contract."
The function checks if a given address is either opsAddress or adminAddress and returns true if it is.
"The function iterates over three orders, calling a specified method on each corresponding address, and reverts if any call fails."
The function removes a specified smart contract from a list by calling `ContractRemoved` after verifying the caller is authorized.
The function adds tickets for a specified draw date by validating groups of five balls and updating the draws structure.
The function returns the total amount of capital allocated by calling a method on the capital ledger.
"The function calculates the reward for a user based on their holding duration, ensuring they exist, and returns the capped reward."
"The function returns the current mining difficulty, a measure of how challenging it is to validate blocks on the blockchain."
Returns the token ID corresponding to a given blockhash.
"The internal function mGenerateTokens generates specified tokens for the given owner, likely minting new digital assets within the smart contract."
function getAnimalIdsWithPendingCostume ( ) public constant returns ( uint [ ] ) { return animalIdsWithPendingCostumes ; } The function returns an array of animal IDs that have pending costume approvals.
Stores ETH funds for customer in the given address upon function call.
Returns the total supply of ECH tokens.
Checks if a user is invested by verifying their presence in the investor list.
"The function retrieves specific investment details for a given group, round, and investor index, ensuring the index is valid and returns the investor's address, their investment sum, and the time of their investment."
Returns the token balance of user
"The function updates the signed deals count for multiple Monetha users in bulk, ensuring each user's address corresponds to their updated deal count."
The function returns the deadline by which employees must exercise their options.
The function retrieves the balance of tokens allocated during the presale phase from the smart contract's address. [Check remaining presale tokens after presale contract is deployed]
"The function burns a specific token by clearing its approval, removing it from the owner's balance, and transferring ownership to a null address via an event."
The function retrieves the balance of a given account from the balances array. function balanceOf ( address _owner ) constant returns ( uint256 balance ) { return balances [ _owner ] ; }
"The function calculates and returns the remaining subsidy for a given block, reducing it by half each time until the maximum allowed halvings are reached."
The function setPaused allows the contract owner to pause or resume an ICO by updating a state variable and returning true.
"The function sets an affiliate relationship between `_pepeReceiver` and `_affiliate`, then calls `buyCozy` with provided parameters to facilitate a purchase."
"The function transfers tokens from `_from` to `_to`, deducting `_value` from `_from`'s balance and adding it to `_to`'s, if allowed by `_from`'s balance and the sender's allowance."
This function allows the contract's owner to unlock a user's previously locked tokens by setting their account state to unlocked.
Transfers token balance from contract to owner after sale.
The function retrieves the position of an item based on its unique identifier and returns it if the item exists.
"The function sets the maximum number of LANDs allowed per bid, ensuring it's greater than zero, and updates the contract's state with the new value."
Accepts ETH transfers as contributions.
The function returns the total number of participants in a transaction by retrieving the length of the allParticipants array.
"The function retrieves a position and calculates the amount owed to the lender for an increase in position based on the given timestamp, ensuring the timestamp meets the position's start criteria."
Sends specified tokens from the contract to another address.
The function sets the contract's donation recipient address.
The function retrieves the total balance for a given request ID by summing the main payee's balance with those of associated subpayees.
The function retrieves a specified poll and returns the result of processing a ballot using an RLP helper.
The function retrieves an array of token addresses and their corresponding weights.
Sets the Fundaria pool address.
The function allows the owner to set the BNT converters address to wherever the contract registry currently points to.
Transfer tokens from one address to another by checking the sender's allowed balance and executing the transaction.
The function calculates the ether reward for burning a specified number of tokens by multiplying the contract's balance with the amount burned and dividing by the total token supply.
"The function allows the contract owner to transfer the mint key to a new address, ensuring it's not zero, and records the change via an event."
"The function processes incoming ETH, allocating SBI tokens to the sender according to their bonus stage. [Processing all received ETH and distributing SBI tokens to the sender based on current bonus stages.]"
"The function allows a trustee to revoke an earlier issue offer by removing the offerAmount and offerExpiry from a specified holder's record, returning true upon success."
"The function transfers a specified amount from the message sender to a contract address, updates balances, and triggers token fallback or other contract logic upon successful transfer."
The function retrieves and returns the address of the manager of the smart contract.
The function pauses pack sales by setting `isPausedForSale` to true and emitting an event.
The function returns the amount of tokens that can be unlocked for a given address based on a specific reason provided.
The function retrieves the quantity and average price of shares corresponding to a given stock key from a storage object.
The function allows the owner to set the minimum contribution for a specified round during the setup phase.
"function createPromoTeam ( string _name , address _owner , uint _price ) public onlyOwner { _createTeam ( _name , _owner , _price ) ; }"
"The function allocates a restricted token to a partner, callable only by the owner, with an emergency stop mechanism."
Returns current XRM to ETH rate based on stage of pledgeOpen.
"function receiveEtherFromRelayAddress ( address _originatingAddress , uint256 _amount ) internal returns ( uint256 _amountSpent );"
"The function unfreezeTeamTokens transfers frozen tokens from FreezeAddress to unFreezeAddress upon verification that the current time meets the release criteria, updating balances accordingly."
The function allows the admin to finalize the crowdsale by transferring token ownership and setting the finalized status.
The function updateEtherBalance() requests the outstanding ether balance from the target crowdsale.
"The function sets a special bonus percentage for a specified address, requiring the sender to be either the owner or minter and ensuring the percentage is non-negative."
release the locked tokens owned by a number of accounts
The function calculates the number of ONL tokens equivalent to a given uint256 value in ETH by scaling it according to token decimals and dividing by price. [Calculate amount of ONL tokens received for given ETH value return uint256 Amount of received ONL tokens]
"The function returns the address of the Multisig Wallet contract, which is associated with the multisig variable."
The function calculates the available bonus amount for withdrawal based on the specified distribution date and share percentage.
"This function allows the owner to withdraw a specified amount of ERC20 tokens from the smart contract to another address, provided the recipient is not the zero address."
The function allows the owner to set the callback gas limit for a specified currency and emits an event upon updating.
Performs a sell order at the exchange return Amount filled in this order.
"The `donate` function uses a modifier `isOpenToPublic` to check if the contract is accessible by the public, allowing donations via `donateToWhale(msg.value)` only when open."
"The constructor initializes the owner and assigns portions of the total supply to specified addresses: 80% to the founder, 10% each to AirDrop and LongTerm."
"The function updates the API calls contract address to a new address, ensuring only the owner can call it and preventing the address from being set to zero."
"The function allows the contract owner to transfer a specified amount of ether from the contract to another address, ensuring the recipient is not the zero address and the transfer does not exceed the contract's available balance."
The function is an external and payable function.
The function retrieves the token ID at a specified index for the requested owner's list of owned tokens.
Retrieves the total bounty count from the smart contract.
The function allows the BondWriter to toggle the status of a specific bond's extension by setting StopExtension to either stop or continue based on the _change parameter.
The function returns the maximum Beercoins a user can spend on behalf of another.
"The function retrieves the tier ID based on the current block number, returning zero if before the start or the last tier if after finishing."
"The function retrieves the active hero's identifier for a given owner and returns their associated genome data, returning zero if no hero is assigned."
The function calculates the hash of an event and returns it. [Calculates and returns event hash return Event hash]
"The function returns true if the purchase is valid based on timing, non-zero value, token limits, meeting minimum requirements, and having available balance."
"The function calculates the locked token amount for a given address, adjusting the return value based on the number of days elapsed since a specified date."
"The function attempts to send any recoverable funds back to the message sender, retrying on failure."
This function allows users to purchase UC Coin tokens through an external call.
The function returns the total number of tokens available in the smart contract.
The function checks whether a sale is active by comparing the current block number with start and end blocks. Check if sale is currently active.
"This function retrieves details of a specific Video Game Item, including its name, owner address, current price, and parent video game."
The function approves an address to have admin power to use `transferFrom` by updating the allowed amount for the spender.
"The function checks if the sender holds at least 10 CBCTokens and updates their investor status to ""increasedPercent"" while allowing them to burn 10 tokens via the MainSale contract."
The function allows the salesAgent to transfer a specified number of tokens from a vault to another address if sufficient tokens are available in the vault.
The function clears approval for a given token ID and transfers its ownership from one address to another in a specified contract.
The function distributes bonus tokens to addresses listed in _bonusList who have bonus tokens available.
Sets the initial price and triggers a change notification.
The function checks if a specified account is frozen based on its frozen status.
Closes the presale period by deactivating both presale1 and presale2.
"RefundTokens sends tokens to a given address and all registered voters, returning true upon completion."
"The function allows the caller (msg.sender) to transfer their current balance to a specified beneficiary if they match and have a positive balance, sending all funds to the beneficiary's address."
"""Triggers token purchase for the message sender."""
The function deposits payment amount into a contract after verifying it's signed by the beneficiary and handling any associated fees.
The function retrieves and returns the balance of _owner in AfriHealth Coin.
Allows only the contract owner to transfer ownership to someone else.
The function retrieves the name of an asset type based on its 32-bit integer identifier.
The function retrieves and returns a list of addresses associated with brokers that have been tracked.
Buys CHR tokens.
The function DadaPresaleFundCollector collects funds for a presale phase with a lock-up period.
The function returns the total amount of early purchases in Chinese Yuan.
The function allows the owner to transfer a specified amount of ether from the contract to themselves or another address.
"The function calculates the total number of carrots purchased by summing the carrots from horses H1, H2, H3, and H4. calcTotalCarrots() view returns (uint256) { return horses_[H1].totalCarrots.add(horses_[H2].totalCarrots).add(horses_[H3].totalCarrots).add(horses_[H4].totalCarrots); }"
The function setHaltSale allows the admin to halt or resume a sale by updating the haltSale state.
"The function allows the owner to increase their token balance by transferring tokens from another address, subject to the total supply limit."
"The function checks whether adding a specified number of tokens to a stage's total sold tokens exceeds its capacity, returning true if under the cap and false otherwise."
The function retrieves the available token amount for a specified price level by iterating through an array of levels and returning the corresponding value when a match is found.
The function calculates the maximum number of vested tokens available for withdrawal after considering disbursement records and subtracting previously withdrawn tokens.
"The function allows the owner to set a minimum balance in Finney units for accounts, ensuring they have sufficient funds for transactions."
allows token holders to withdraw their dragons after timelock expires
Converts a uint256 value to its corresponding string representation by extracting each digit and constructing the string in reverse order.
"The function calculates a bonus value by multiplying the input _value by 15 and dividing by 100 if the ICO status is in the PreIcoStarted phase, otherwise returns 0."
Sets the gas price limit for a fundraising function.
The function returns the smaller of a and b.
"The function _preValidatePurchase delegates validation of purchase conditions to a parent contract, ensuring necessary checks are performed before proceeding with a transaction."
The function sets the ICO status to finished and distributes tokens to multiple funds based on predefined allocations.
Returns the terms contract address of a given issuance.
The function allows board members to reject a pending proposal by removing the PENDING_PROPOSAL flag from the proposal's associated account.
The function sets tokenZNT and tokenZLT from specified addresses and invokes setAvailableToken().
The function allows the smart contract's owner to set whether a specified address can transfer tokens before trading begins.
The function returns the subset of registered holders within the given range who have a positive balance if posOnly is true.
"The function allows the owner to upgrade the converter by transferring ownership to an upgrader, upgrading the contract, and accepting the new ownership."
The function allows the owner to withdraw funds from the smart contract by transferring its balance to a specified wallet and emitting an EtherWithdrawn event.
The function preDistribute() internally distributes tokens from opentokenAddress and tokenmanAddress to their respective claimants.
"The function approves a specified amount from the caller to another address, requiring sufficient funds in the caller's balance."
The function retrieves the token balance for a given address and returns it as a uint.
"The function retrieves the burn lot information for a given ID, including the lot ID, owner address, and token amount."
"The function `revokeEditorRights` updates the `isEditor` mapping for the given `editor` address, setting it to false, thereby revoking their editing rights."
"The function retrieves and returns the creatorTAOSettingId, creatorTAOId, and settingId for a given creatorTAOSettingId from an array of CreatorTAOSetting structs."
"The function checks if a specified token amount can be used by verifying it against the available, non-frozen tokens for a given wallet owner."
The function bulkWithdraw processes multiple withdrawals by iterating over an array of addresses and performing a withdrawal for each address in the list.
The function retrieves investor details for a given address and returns them as a structured record.
The function retrieves the number of stored UUIDs by returning the length of the uuids array.
The function allows the contract owner to withdraw accumulated dividends from themselves.
The function calculates and returns a discounted rate based on a specified percentage applied to the current rate.
The function checks if the funding goal is met after the deadline and either notifies the beneficiary or closes the campaign.
"The function allows the owner to update the preIcoStartTime to a future date, ensuring it is after now and that there is at least a seven-day gap before icoStartTime."
The function transfers ERC20 tokens from the specified address to the owner.
"This function retrieves detailed information about a specified character, including their attributes and optional traits."
The function retrieves the current count of articles stored in the contract.
Token holders can call this function to cancel a redemption request they previously submitted using requestRedemption when trading is enabled.
"The function updates the contract's minNAC state to a specified non-zero value, accessible only via the onlyEscrow modifier. updateMinNacStateToSpecifiedNonZeroValueWithOnlyEscrowAccess"
"The `approve` function delegates the approval of a transaction to the parent contract when not paused, allowing the token holder to grant spending authority."
The function checks if a minting time limit is enabled.
The function allows the dealer to withdraw their remaining ether from the contract after a bet is closed or refunded.
"The constructor initializes sale parameters, validates input values, sets token prices, creates a DealToken instance, calculates maximum and minimum sale balances, and updates the contract's state to Deployed."
"""Returns the buyOutFeePercentage value stored in s."""
Grants admin access to a given address and notifies via AdminAdded.
Returns the user id associated to a wallet.
The function allows a new manager to officially take over by updating the current manager and resetting the new manager's address.
The function retrieves the total contribution allocated as the prize pool size.
"The function allows the owner to set the start and stop times for a crowd sale, ensuring the stop time is in the future, and initializes these times while keeping the sale open."
"The function updates the debating period to the input value in days, allowing only the manager to adjust it."
"The function calls `invest(msg.sender)`, likely depositing funds or tracking investments from the transaction sender."
Ends the ICO by burning remaining tokens and concluding the process.
"Starts an offering process, returning whether it succeeded."
"The function verifies that the caller's address matches the associated user in the balances mapping and returns their current balance, throwing an error on mismatch."
"The function retrieves various attributes (owner, body, feet, head, mouth, extra, birthBlock) of a token identified by the given ID."
"The function invalidates a specific crowdsale purchase by setting its amount and rawAmount to zero, marking it as invalid, and notifying listeners."
This function disables token transfer functionality upon deployment on the Avalanche Blockchain.
The function returns the remaining allowance for the spender given the owner address.
"The function allows upgrading an address's token balance by transferring their tokens from one contract to another, ensuring a non-zero balance before proceeding with the upgrade."
Returns the permission address for the specified kind and index.
Joining a community allows the community to credit or debit your AVIV and VIP balances.
"The function `emergencyERC20Drain` allows the contract's owner to transfer a specified amount of an ERC20 token to themselves in an emergency situation, ensuring quick access to funds under controlled conditions."
Transfers tokens from a user's balance to their investment balance.
"The function mints tokens to a specified address, potentially adding ether funds if the recipient is unknown or part of the team, while ensuring certain conditions are met and emitting relevant events."
The function updates the price per message and notifies of the change.
The function checks if a note exists at a specified pitch and place in the composition.
"The function allows the owner to distribute beercoins to users who have scanned valid bottle cap codes by iterating through paired user addresses and cap codes, ensuring each pair is processed."
"The function transfers a batch of different amounts from the caller to multiple recipients, ensuring each recipient receives their specified amount and the total transferred does not exceed the caller's balance."
"The function transfers any pending Ether to the Croupier if available, resetting the pending balance after the transfer."
"The function checks if an address exists in either the gold or silver whitelist and returns the corresponding status; otherwise, it returns ""None""."
"The function creates an invitation by recovering the public key of the invitee using a signature, checks if the invitee is not already invited, updates their status as pending, and emits an event upon successful creation."
Returns the difference between the contract's balance and the sum of bankroll and collateral.
"The function adds a specified address to the blacklist, callable only by the owner."
"The function allows the owner to set the pre-sale rate during a crowd sale, ensuring it is greater than zero."
The function allows the owner to set token details and notify of updates.
The function transfers any remaining tokens from the contract to the TeamWallet account only if it's called by the owner after the crowdsale ends.
"The function checks whether a specific SHA256 hash is registered and returns true if it has been used before, otherwise false."
"The function retrieves data from `_storage` using `_exec_id` and `tokenName`, returning a bytes32 value via the `GetterInterface`."
Refund sends `_weiAmount` to `_buyer` if they bought something and is only callable by the owner.
This function reverts to prevent unintended actions.
The function allows the owner to set the minimum required Wei value for transactions.
The function retrieves the purchase record for a specified address.
The function returns the count of frozen cells associated with a specified owner. [Return the number of frozen cells for a given owner.]
The function burns all remaining tokens with the sales contract after the sale has concluded.
"The function transfers ownership of a specified token from the current owner to a new address, with administrative control over who can initiate the transfer."
The function allows the current owner to grant control of the contract to another account by setting their ownership status to true and notifying through an event.
The function retrieves the balance of a specified address from the `balances` array.
The function calculates and distributes dividends to a user based on their share of total supply across multiple dividend periods.
"The function allocates tokens to a beneficiary, converting token amounts into Euros and updating sales records, with pre-sold allocations handled via a vault and others via direct transfer."
The function allows the owner to transfer ownership to another address.
"The function checks if a given address is listed as a manager by iterating through an array of manager addresses and returning true if a match is found, otherwise false."
The function returns the number of boost tokens available for purchase by the contract.
Get array with owner addresses that confirmed the transaction.
Allocates tokens from the starbaseCrowdsale contract to a specified address during a crowdsale or early purchaser allocation process.
The function allows the owner to transfer any remaining tokens held by the contract back to themselves.
The function sets the TAO family address and initializes the corresponding TAO family instance.
"Sets the address of the INNB token, requiring it to be non-null and callable only by the owner."
The function returns the larger of two uint values using a ternary comparison. Returns the maximum of two uint parameters using a ternary operator.
"The function updates a subject's role within an access control system, allowing the role controller to modify the subject's role using a specific identifier and status."
The function returns the number of entries in the swap_balances array for a specified address.
"The function dispenses Jcash tokens to multiple investor addresses based on specified values, deducting the total from the contract's balance and updating each recipient's balance accordingly."
The function updates the costs for various types of visits based on the provided parameters.
The function retrieves the number of members by returning the length of the memberKeys array.
Withdraws contract's Ether to a multi-sig wallet; only callable by owner.
The function converts an array of uint256 values using TicketCompressor and emits an onEndTx event with the compressed data and other parameters.
The function retrieves the balance of a specified token at the contract's address.
"The `transfer` function checks if the recipient is the current contract and swaps tokens accordingly; otherwise, it delegates to a superclass transfer."
The function returns the total number of collections by retrieving the length of the collectionNames array.
Checks if tokens are being transferred from 'from' to 'to' with the specified amount.
The function checks if a given day is allowed by verifying its status in the allowedLocks array.
"The function extracts two values from `_hGame`: `arbTok` as the result of `ArbTokFromHGame`, and `lowWords` as the lower 32 bits of `_hGame`."
The function returns whether the token is locked.
"The function updates the required KYC verification amount to a specified value, which must be positive, and can only be modified by the owner or an authorized oracle."
"The function checks if a voter's last access time plus seven days is less than or equal to the current timestamp, allowing them to deregister if true."
"Adds multiple addresses to whitelist, callable only by owner."
"The function transfers ownership from the current owner to a new address, transferring their token balance and updating ownership records."
"This function sets the memberId for a specified member address, accessible only by the owner."
"The function ends the migration period by setting `inMigrationPeriod` to false, accessible only to users with `LEVEL_3_ROOT` permission."
The function allows the requester to cancel their adoption request by transferring the associated price back to them and updating the request's status.
Sets the minimum Ethereum investment value and updates the state.
The function sets the tradeable status of an asset based on a given boolean value.
The function transfers ETH from `ethFundDeposit` to the contract's balance if certain conditions are met.
The function calculates the bonus amount based on the contribution date by applying different percentages depending on the elapsed time since the crowd sale started.
The function returns the amount of unsold tokens available in the contract's balance.
The function approves a specified account to spend up to a defined amount sent by the message sender.
The function allows the contract owner to burn tokens from their account by deducting a specified amount from both their balance and the total supply.
"The function investHappened records an investment made by a specified investor with a given amount, restricted to being called only by the manager."
The function creates a CrowdsaleProxy instance and returns its address after triggering an event upon creation.
The function allows the owner to retrieve ERC20 tokens mistakenly sent to the contract by transferring them back.
Retrieves the index corresponding to a given address from the addressToIndex mapping.
The function retrieves the integer value associated with a given hash and returns it from the storage location specified by `s._int[h]`.
"The function `finishMinting` allows the owner to stop minting new tokens by setting `mintingFinished` to true and calling `MintFinished()`, returning success."
"The function updates the content data of a specified pixel, allowing only the pixel's seller to modify it and logging the change via an event."
"The function calculates the order price as determined by an order, multiplying buy quantity by 10 raised to the number of decimals in sellAsset and dividing by sell quantity. orderPrice is calculated as mul(buyQuantity, 10 ** getDecimals(sellAsset)) / sellQuantity."
The function checks the amount of tokens an owner has allowed a spender.
Refunds invested amounts to sender if ICO finished and soft cap not reached.
The function allows the owner to stop the crowdsale at any time by setting the stopCrowdsale flag to true.
Sells specified P3D tokens for ETH.
The function checks if a specified position is closed by looking up its status in the closedPositions array using the provided positionId.
The function retrieves indices of auctions where a user has claimable tokens and their respective balances for those auctions.
The function returns the maximum amount of `makerToken` available based on the provided parameters.
The external function checks if the transaction's gas price is within a limit and verifies no data is attached before allowing the purchase of HORSE tokens.
"Retrieves information for each season, returning the number of seasons, their match times, and results."
The function updates the contract's registered wallet address.
"The function checks if the contract is upgraded, verifies the caller is the next version, ensures the latest round is finalized, and attempts a transfer using the jackpot seed."
Allows users to sign up with their own address after meeting minimum HydroStake requirements.
The function allows the owner to decrease the house fee percentage by setting a new lower value and updating relevant records.
Returns the balance of the CryptoTorchToken_ contract.
"The burnInvestorTokens function allows an investor to withdraw a specified amount of tokens from their balance after the crowd sale period has ended, updating both their balance and the total token supply."
"The function tokenTotalSupply returns the keccak256 hash of ""token_total_supply"", which is a 32-byte identifier for the total token supply within the contract."
The function returns the number of tokens in the array.
The function collects information about Doge Farm dividends and retrieves the token balance.
The function allows the owner to set the start time of the pre-funding period by adding a given value to the current time.
The function updates the `infoUrlPrefix` with the provided `_url` and returns `true`.
Withdraws a specified amount of Snowflake tokens from the sender's balance to an external address.
"The function deactivates whitelist filtering and sets the maximum participation amount to 30,000 ether when called by the owner."
Gets the total token supply return uint256 representing the total token supply
Returns the token balance for the specified token owner.
Triggers the sale finalizations process
The function returns the list of top winners once the current time meets or exceeds a specified end time.
"The function initializes variables for minting, setting the rate, minimum investment, and enabling or disabling minting based on the provided parameters."
The function returns the minimum number of votes required for a proposal to pass.
"The function checks if the caller is the executor and sets minCapReached to true if they are, otherwise reverts."
"The function determines the current stage of a sale by checking the block number against predefined thresholds and returning 'Crowdsale not started yet', 'Presale', 'Discounted sale', 'Crowdsale', or 'Sale ended' based on these conditions."
The function allows the owner to transfer a calculated dividend payout and unfreeze an account for the target address based on a specified percentage.
The function allows the manager to update the exchange rate without setting it to zero.
"The function receives approval and transfers tokens from the caller to the contract, then distributes them based on a cost parameter."
"The function is an empty public method that reverts any call, preventing external interactions and providing no meaningful functionality."
"The buyTokens function reverts all transactions, preventing any minting operations from proceeding."
Returns the amount of tokens approved by the owner that can be transferred to the spender's account.
"The function allows users to place bids on items, updating highest bids or purchasing items based on value and conditions."
Returns the total token supply available in the contract.
The function returns the number of signatures required for major transactions as self.requiredMajor.
"The function checks if the current time is after or equal to the crowdsale start time, indicating whether the sale is open."
The function allows the contract owner to update the expiration date for a specified service provider ID in the spEntries array.
The function upgrades or interacts with an EvilMorty instance by checking its bytecode length and performing necessary actions.
Retrieves the update timestamp in seconds for a specified board ID.
Allows merchant to withdraw funds to its own account.
The function sets the authorization status of an operator for a specific token holder and returns true.
"The function calculates the maximum number of tokens an investor can currently claim based on their remaining balance and the time elapsed since their last claim, considering a potential rate of tokens claimed per second."
Transfers a specified value from the contract to another address if not paused or locked.
"The function allows creating and transferring a promotional pixel if owned by the contract, within a promotion limit, with a text under 101 bytes."
The function checks if the given address owns all specified card IDs and returns true only if ownership is confirmed for every ID in the array.
"The function checks if the current time exceeds the maximum allowed interval after the last price update request, returning true if it has expired."
"The function closes the contract if it is called by the preTgeManager, ensuring only authorized actions can trigger the closure."
The function refunds a participant by transferring their swap balance from the token contract and updating their status in the swaps mapping.
The function allows purchasing a bond on the secondary market by transferring ownership and updating balances.
The function `totalSupply()` returns the total number of tokens in circulation by fetching and outputting the value stored in the `totalSupply` state variable. totalSupply()
"The function retrieves up to 10 ads starting from a specified index, returning their IDs, types, expiries, and clients."
"The function retrieves the token balance for a specified account, returning the number of tokens held by that address."
The function allows the owner to set a new safe gas value for Oraclize operations.
"The function computes a checksum by hashing the estate ID and XORing it with hashes of each associated land ID, resulting in a combined bytes32 value."
"The function calculates the number of eggs hatched by an address since the last event, returning the product of the elapsed time and the rate per shrimp."
The function allows the owner of an animal to update its name and description by verifying the caller's ownership before modifying the records.
"The public function reverts immediately when called, preventing any further execution."
"The constructor initializes the owner's balance with `totalSupply` tokens and sets them as whitelisted for transfers and burns, transferring tokens from a dummy address to the owner."
"The function triggers when a player meets the snail requirement, awards them their earnings, and pauses the game for 12 hours by resetting the active state."
Deploys a new CDPer instance and sets its custom owner.
The function allows the owner to withdraw ERC20 tokens from a contract to another address if there's a positive balance.
"The function overrides the approve method, checks if the payload size is exactly 64 bytes using the onlyPayloadSize(2 * 32) modifier, and returns the result of the parent contract's approval."
The function scannedBronzeCaps returns the total number of bronze caps scanned so far as a uint64 value.
"This function calculates and returns fee shares for transcoders and delegators based on the earnings pool, considering whether the caller is a transcoder."
"The function returns true if the loan status is 'lent' and adding seven days to its due date does not exceed the current block timestamp, indicating a default."
The function returns the last token ID by subtracting one from the total number of tokens in `allTokens`.
"The function transfers sales agent permissions to another account, restricted to use by the owner."
The function retrieves the terms contract parameters for a specified agreement ID from the registry.
Resumes the crowdsale if called by the owner.
"The function checks if the current time exceeds the start time of the crowdsale, returning true if it does."
The function rewards a referrer with a 2% bonus from the sender's investment if the referrer is different from the sender and has an existing investment record.
"The function `unlock` is called by the owner to enable a method and emit an ""Unlocked"" event."
"The function allows the contract owner to set a new VIP rate, provided the rate isn't finalized and is greater than zero."
"The function updates the balance, total supply, and purchase records while emitting relevant events upon a purchase made by an authorized address."
"""Function allows public, payable Ether acceptance as fallback."""
The function retrieves and returns the last dividend period for a specified wallet address as an unsigned integer.
"The function returns the total supply value, a constant accessible via an explicit getter."
"The function returns the current difficulty level, allowing users to check its status without modifying any state."
The function sends profits to multiple games by iterating over an array of game hashes and corresponding profit amounts.
"""Purchases tokens for a beneficiary using msg.value, validating and processing the transaction, with token calculation based on tokenPriceInWei."""
"The function allows the owner to transfer ERC20 tokens to a specified address, excluding the tokenWallet, ensuring accidental transfers are avoided."
The function rewards a referrer address from a given amount of funds by splitting them into taxed and non-taxed portions based on whether the referrer meets a minimal stake condition.
The function converts a bytes32 value from MakerDAO's Medianizer contract into the wei per USD rate by dividing the MAKERDAO_FEED_MULTIPLIER by the provided value.
The function returns the number of unprocessed betting records remaining to be handled.
The function forwards investment to the target contract if the message has positive value and the contract hasn't been stopped. It tracks the total Wei volume and executes the buy operation on the target contract.
"The function registers an address to a uint, assigning it an index based on its position in the registry array."
"The function retrieves the total token supply from the contract, returned as an uint256 value."
"The function adds a specified address as a controller if not already present, updating the status and triggering an event."
The function returns the start time of the crowdsale in seconds since the epoch.
The function checks if a specified address has its funds frozen on token creation.
"The function computes a bytes32 hash using keccak256, combining the destination address, ""numtokens"", and reserved destinations, likely serving as an identifier for token counts associated with each address."
"The function retrieves the price and description of a specified Gift from an array, returning zero and an empty string if the ID is invalid."
The function transfers tokens from an approved account to another address upon meeting specific conditions.
The function retrieves the KYC state of a specified address.
"The function `emergencyERC20Drain` transfers a specified amount of ERC20 tokens from the provided token address to the owner, logs the event, and returns true."
The function returns `true` if either the parent `hasClosed()` method returns `true` or the difference between `cap` and `weiRaised` is less than `cap`.
The function is a constant method that retrieves and returns the total allocated tokens from another contract.
"The function allows an investor to withdraw tokens, requiring the caller to be the token offering address and the investor not to be blacklisted, then updating their balances."
Owner can withdraw any amount of ETH up to the contract's available balance.
The function allows the owner to reclaim ERC20 tokens transferred to the contract address by transferring them back to the owner.
"The function adds a list of specified addresses to the whitelist, marking each as whitelisted and potentially triggering an event upon addition."
The function retrieves the price and availability of a level from an array using the provided index.
"The function parses a byte array representing a number, converting it into a uint256 while handling decimals by stopping further processing upon encountering a decimal point."
The constructor function pauses token transfers immediately after deployment.
"Withdraws Ether from the contract to the caller, only if the amount doesn't exceed the contract's balance."
"The public function uses revert() to abort the transaction, preventing ether from being sent, effectively halting execution when certain conditions aren't met."
The function initializes funding for the contract.
"The function adds a new NFT to storage by assigning it to the receiver, setting its traits, type, owner, and metadata, then updates ownership records."
The function allows the contract owner to transfer a specified amount from its balance to a designated fund address after verifying the amount does not exceed the available balance and records the transaction.
"The function retrieves an array of channel manager addresses corresponding to each token in a given list, mapping each token address to its associated channel manager address using a registry."
The function returns the wei balance of an investor from a map.
"The function freezes or unfreezes an address's token accounts based on the boolean parameter `_freeze`, updating their status and freeze time until `blackListFreezeTime` has elapsed."
Property owners can update the clickable link for their properties.
"The function allows the admin to set the registry exec id, which is used to initialize applications."
Adds an address to the whitelist; only the owner can mark it as whitelisted.
"The function creates tokens for an investor based on their contribution and a calculated bonus, then mints these tokens. [Investors receive tokens based on their ETH contributions plus bonuses.] investors receive tokens based on their eth contributions plus bonuses"
Retrieves token price for specified period
The function calculates the number of alive chickens for a user by subtracting dead chickens from the total.
Returns the number of tokens owned by the specified address.
The function retrieves the owner address from an array using the provided index plus one. [Retrieves the owner address from an array using the provided index plus one.]
"The refund function transfers a portion of the specified value back to the sender after deducting a fee, updating balances, and reducing the total token supply."
The function checks if the message sender is the eUSD contract address.
Returns the actual token price in wei based on the given _tokenAmount and _proposalID.
The function removes a global constraint associated with an avatar and returns whether the operation was successful.
The function calculates the total price for minting a composition by summing the prices of each specified layer and then scaling the total by 105/100.
"The function sets a specified address as an admin of the SEEDWhitelist contract based on a boolean value, with only the current admin able to call it."
"The function calculates the total amount of tokens that can be released by a specified address based on its vesting agreements, summing each vesting's releasable amount. releasableBalanceOf calculates the total releasable tokens for an address by summing each vesting's releasable amount."
The function approves token transfers from token holders to specified ERC20 wallets.
"The function checks the status of both the BlockLord and Crowdsale by returning the funds raised from each, the total amount, the goal requirement, and whether the goal has been achieved."
The function `proposalAvatar` retrieves the assigned avatar address for a given proposal ID. function proposalAvatar ( bytes32 _proposalId ) external view returns ( address ) { return ( proposals [ _proposalId ] . avatar ) ; }
"The function sets the `isRedeemed` flag to `true` for a specific pre-sale collectible item based on `_tokenId`, only allowing calls from addresses in the `approvedAddressList`."
The function retrieves and returns the address of the contract owner.
The function allows the sender to set the allowed value for the spender.
The function `giftToken` sends purchased tokens to a specified address during an ongoing token sale (ICO).
The function checks if the current contract is set as the staking contract for RTI tokens and returns true if it is.
"The function distributes tokens by transferring them from `_from` to multiple recipients specified in `_bits`, with each transfer using two consecutive elements for address and value."
"The function allows the CEO to assign a free vineyard plot to another address, ensuring each recipient receives only one plot."
The function returns the count of investors by fetching the value stored in numPlayers.
The function allows the owner to withdraw a specified amount of available tokens from the contract and transfer them to another address.
"The function reverts incoming Ether transactions, preventing them from being processed."
Allows owner to record a purchase made outside of Ethereum blockchain.
The function retrieves the remaining allowance for a specified _spender relative to the _owner from an internal mapping or array.
"The function edits the active state of an item class by its class ID, only allowing moderators to modify this setting."
"The function executes `purchase()` when the contract is not paused, serving as a fallback for incoming Ether."
The function ends the bounty by minting tokens to the recipient and resetting the remaining supply to zero after ensuring the bounty hasn't been supplied yet.
The function processes contributions sent by callers through `msg.sender` and `msg.value`.
"The function retrieves information about each registered auditor, compiling their addresses, karma values, and ownership details into respective arrays."
"The function iterates over a range of orders, selling tokens from a sender to buyers, accumulating the total revenue, and returning it after attempting to send it back."
Mints a specified number of tokens to the owner and returns whether the transaction was successful.
"The function converts a string to a fixed 32-byte array, padding with zeros if shorter than 32 bytes and truncating longer strings."
"The function retrieves a uint64 value from a database using a hashed key derived from 'subscriptions', providerAddress, subscriberAddress, endpoint, and 'dots'."
fallback function to receive ether and update weiAmount
"Mints tokens to a specified address, updates balances, and emits transfer events upon successful minting."
The function changeVeredictum updates the verdict based on the provided address and returns whether the update was successful.
"The function enables users to sell a specified amount of KWHs for Ether, calculates the revenue, verifies transaction feasibility, and executes the transfer upon successful execution."
The function transfers ownership to `_newOwner` and self-destructs the contract upon completion.
The function withdraws all ether from the contract's wallet to the owner's address.
The function ICOTokenDelivery is an onlyOwner function used to deliver tokens to ICO investors by transferring a specified value from the sender to the recipient address.
"The function transfers `_value` tokens from `msg.sender` to `_to`, notifying a controller callback, and delegates the transfer to the parent contract."
The function retrieves a record from an array using a hash of the provided data and returns both the data and its associated timestamp.
The function retrieves the total Ethereum (ETH) contributions made by a given address. getContributionOf (address _owner ) returns the total ETH contributed by _owner.
"The `withdraw` function allows the contract's developer to self-destruct the contract when called, destroying all associated funds and functionality upon execution."
Returns the current block timestamp.
"The function retrieves specific check details for a given address, returning account number, routing number, institution, full name, amount, check file path, and digital fingerprint."
Sets the registry value with the live BountyRegistry address.
The function returns the refundable balance of Ether associated with a given owner's address.
"The function transfers a specified amount from the message sender to a recipient address, subject to approval by allowTransfer, and returns true if successful."
The function overrides the base `transferFrom` method to include a vesting requirement check before transferring funds.
"The function returns a fixed `bytes32` value generated by hashing 'sale_tokens_unlocked', indicating whether token transfers are enabled."
Adds a property for a user by an administrator and returns true upon success.
The function approves a specified address as a transfer manager during the lock-up period.
"The function calculates the total cost in ETH by multiplying _price_ (per unit) by _amount_ (number of units), then returns this value as the cost of the order."
"The function finalizes liability by confirming the success of an action with a verified signature from the liable party, returning whether the process was successful."
"The function allows the owner to update lists determining which addresses can receive minting, burn, are blacklisted, or have no fees for TrueUSD transactions."
The function allows a new controller to be added by verifying its address is not zero or the owner's address and ensuring it isn't already present before pushing it into the controllers array.
The function refunds contributors if the crowdsale did not reach its soft cap by destroying their tokens and transferring their contributions back.
The function returns a boolean indicating whether the proposal was ordered and the specified amount was sent.
"The function calculates a bonus percentage based on the specified ETH sum, applying tiers that decrease as the amount increases."
The function allows the owner to permanently disable minting functionality.
"The function allows a player to withdraw tokens after verifying that each lock's time condition is met, up to 50 locks, and ensures sufficient token balance before transferring the withdrawn amount back to the sender."
The function returns the total number of tokens available for sale as recorded by the smart contract's balance.
"The function initializes a managed utility token named ""KATM Utility"" with the symbol ""KATX,"" having 8 decimal places, and configured as an ERC20 token."
Sets up roles for a new Sgame token by adding the newOwner as pauser and minter while removing the current sender from those roles.
The function retrieves the number of elements in the artworks array.
"The function returns 1 if loyaltyPart is true, otherwise 8."
Withdraw all profit calculated as this.balance minus getBetWaitEndEther() to the owner.
Returns the balance of tokens from the doge farm.
The function sets the price for a specific pixel block at given coordinates and requires the price to be greater than zero.
Checks if a SHA256 hash is registered.
"Sets the current week's token pool to a value greater than zero, which can only be updated by the contract's owner."
"The function sets the current funding round and assigns its rate, ensuring the funding round exists in the prices array."
The function checks if the current address is the core contract.
The function updates the token's price by setting its USD value based on the provided numerator and denominator.
The function determines if a sale is canceled by checking if the total valuation is below the minimum raise or if the current time exceeds the sale end date plus 30 days and the sale isn't finalized.
withdrawal can only occur after deposit time is exceeded
"The function startMigration verifies that the migration agent is set and the contract state is running, then updates the state to migration and triggers a state change notification. startMigration verifies migration agent setup and active state before transitioning."
Triggers the success callback when the crowdsale is successful.
Returns the address of the trading token.
The function updates the contract to move to the next sales period when specific conditions are met.
The function counts the number of chickens owned by a specified user by iterating over an array and checking each chicken's owner address.
The function allows the owner of a specified emoji to update its price and triggers an event upon the change.
The function sets the start date for stage 0 if it hasn't been set yet and emits a StageBegin event upon successful assignment.
"The function deletes a specified phase by shifting subsequent phases left and reducing the array length, ensuring the index is valid."
"The function allows the owner or current manager to replace themselves with a new manager, provided the new address is not zero."
"The function checks if a purchase is valid by ensuring it occurs within the specified time period and involves a non-zero token amount, while also verifying the user's allowance. validPurchase ensures purchases are made during an active period with non-zero tokens and sufficient allowance."
The function allows contributors to withdraw their contributed funds after the ICO phase if the soft cap wasn't reached and they still hold some balance.
The function returns the number of tokens available in the contract by querying the balance of the current contract address. tokensAvailable() returns the number of tokens available in the contract.
The function checks if two input strings have equal byte lengths and returns true only if their keccak256 hashes match after encoding.
"The function retrieves the amount of tokens, their availability timestamp, and KYC requirement for a specified cell owned by a given address."
"The function calculates a bonus based on the percentage of weiRaised relative to the cap, applying different rates depending on the range."
The function checks if the crowdsale's ETH fund meets or exceeds the minimum required and returns true if so.
The function returns the address of the beneficiary who will receive the campaign payout.
Returns the count of outcome tokens.
"The function allows the owner to resume the token sale by unpausing the contract, subject to certain conditions."
Maps the seed to the value within the execution id's storage using a mapping function.
"The function receives Ether from a donor, assigns a member rank, calculates rewards based on the donation amount, ensures compliance with investment limits, transfers the reward to the beneficiary, and updates backer records."
"Controls token transfer from address to another, allowing it only if the sale has closed."
"The function retrieves the current price for a specified block ID, defaulting to Cons.setCheckPriceInitial_ if the price hasn't been set."
The function checks if a provided address is an operational wallet.
The function retrieves an address based on a provided 16-byte signature by returning the corresponding value from a predefined data structure.
Returns array of token IDs for specified address.
"The function allows the founder to update the token's exchange rate and notify stakeholders, returning true on success or false otherwise."
The function allows the owner to transfer all tokens from a specified ERC20 token address to themselves.
Transfer tokens (bond) from one address to another based on ownership verification.
The function checks whether the given spender has an allowance from the owner that is at least equal to the specified value. Checks if the given spender has enough allowance from the owner more than the specified amount.
The function returns whether the specified token is owned based on its existence in the tokenOwner mapping.
"The function allows transferring a specified amount of tokens from one address to another, including additional data, while checking against sender's balance and transfer limits."
"The function allows self-destruction after a specified time, transfers any remaining balance to the caller, and then self-destructs, potentially sending leftover funds back to the owner."
The function delegates token transfer with notification to a target address after verifying hash and transferring fees.
Checks if a contract is marked as trusted by returning a boolean from the trustedContract mapping.
"The `approveAndCall` function checks if a spender can be approved for a given value and, upon success, triggers their `receiveApproval` method with additional data, returning true upon successful completion."
"The function calculates the remaining tokens after deducting referral and bidder bonuses, then sets a bonus to false."
The function checks if a given address is frozen by returning whether it exists in the frozenAccount array.
The function startMigration initializes migration by ensuring it hasn't begun yet and setting it to start.
"The function wipes tokens from a blacklisted account by setting its balance to zero and transferring the tokens to the zero address, updating the total supply, and emitting corresponding events."
The function is designed to receive payments or deposits by taking msg.sender and msg.value as parameters.
"The function `upgradePonyResult` checks if the current block number has reached or exceeded `targetBlock` and verifies that the `unicornation` status allows for an upgrade, returning `true` if both conditions are met."
The function retrieves the dateFrom value associated with a specific proof ID for a given holder from a nested data structure.
transferERC20tokensfromaddress.
The function sets the permission manager for a specified role within an application and updates related records.
Removes BURNER role from address.
This function upgrades a specified component of a smart contract by assigning a new implementation address to it.
The function sets a store for an application managed by the owner.
"The function returns the keccak256 hash of the string ""sale_start_time"", which is likely stored elsewhere in the contract for use as an identifier or reference."
The function mints a specified amount of tokens to an address by reducing the available supply and distributing them using dfs.mint.
"The function converts a hex string into bytes by iterating over each pair of characters, converting them to their respective byte values, and constructing the resulting bytes array."
The function updates the gas price limit for the contract by assigning a new value.
"The function returns the number of slots in the gas refund pool, representing the remaining sponsored gas slots."
The function receives data from an on-chain provider using specified parameters and a user query.
The function sets the owner's avatar to the given tokenId if it hasn't been set before.
The function validates that the purchase amount meets the minimum requirement and ensures the beneficiary's total contributions do not exceed the maximum allowed.
"The function retrieves information about a specific lot by its ID, returning the ID, the lot's owner address, and the associated token amount."
The function allows the owner to update whether a specific address is associated with Monetha.
"The function allows funds to be sent if the sender is either the owner or a super contract, otherwise it executes the applyMC method."
"The function initializes the parameters for a multi-tiered token sale, including presale and main ICO start/end times, purchase rates for each tier, and assigns a wallet address to manage the token contract."
The function allows the caller to check the balance of a specified address that has not been released.
"""Updates the cap for tier 2 pool addresses by setting the provided value."""
"The `fuelContract` function allows the owner to execute a specific action, accessible to all users but limited to the owner's authorization."
"The function mints tokens to a specified beneficiary with time-based vesting, distributing them over a defined period."
"The function increases the cap by multiplying _cap_inc with eth_decimal_num and updates it, allowing the owner to adjust the maximum limit dynamically."
The function cancels an already published order by checking if the caller is either the order's seller or the contract owner and then deleting the order from the tracking system.
"The function allows a user to migrate a specified amount of tokens to the migration agent, subject to finalization and sufficient balance."
The function updates the minimum amount if the caller is the owner and the new value is less than the maximum allowed.
"The function receives close position payout details, including position ID, amount, closer, owner, held token, payout amounts, and whether payout is in held tokens, returning approval status."
"The function sets a permission for an entity and app based on a role, using a hash as the key, and calls SetPermission if the parameters are not empty."
The function retrieves the balance for a given owner address from an array.
The function transfers a specified amount from the message sender's balance to the recipient's balance if the sender has sufficient funds.
The function updates the total available IOU by setting it to a specified amount after verifying the sender's authority and ensuring the provided amount meets or exceeds the minimum required purchase.
"The function updates the transfer fee to the specified value, allowing only the validator to modify it and emitting an event upon change."
Sets the rate to a given value if not finalized and valid.
The function pays all bonuses to investors from the last round by distributing funds calculated based on the total raised and allocated per investor.
The function adds a new player to the players array when there's available space. Adds a player to the players array when there's space.
The function allows the manager to transfer tokens from the caller to a specified address via an ERC20 token contract.
The function allows the contract owner to transfer ERC20 tokens from a specified address to another address.
"The function allows a spender to transfer tokens and reserve a portion for a jackpot, with the transferred amount including a reserved deposit."
"The function adjusts the numerator and denominator for the next tranche, ensuring both are positive."
The function returns the next price for a given deed ID by calculating it based on the current price.
The function pays dividends to investors by transferring funds from a map based on the sender's address after verifying the amount is valid and within the contract's balance.
Sets the affiliate rate for a specified level.
The function returns the total number of eggs claimed by the current player plus those hatched since their last participation.
"Transfers the ownership of a Race from one address to another, with the transfer only possible when the contract is not paused."
"The burnTokens() function subtracts a specified amount from a token wallet's balance and reduces the total supply, indicating the tokens have been burned."
The function executes a token transfer of the full balance from the forwarder token to the parent address.
The function retrieves the implementation address from a specific position in the contract's storage and returns it.
The function clears the approval for a specified unicorn ID owned by a given address.
"The function allows the market creator to transfer all remaining outcome tokens to themselves, closing the markets."
The function is a public method that immediately reverts any call without accepting ETH.
The function calculates and distributes dividends by updating the profit per share and emits an onPayDividends event with the dividend details.
The function `takeOwnership` claims ownership of a specified unicorn ID by checking the sender's allowance and transferring it from the current owner.
The function retrieves the amount of DTH a teller has staked.
Called by the owner to destroy the contract and transfer remaining funds.
Returns array of ticket indices for specified address.
The function `reclaimEther` allows the contract owner to transfer the remaining ether balance from the contract's address to a specified address.
"The function removes an existing exchange from both the exchangeInformation and registeredExchanges arrays, shifting subsequent entries leftward and decreasing the array length."
"The function sends specified token amounts to a list of beneficiaries by the contract's owner, ensuring arrays have equal lengths and are non-empty."
"The function allows the owner to set a new exchange rate, ensuring it's positive, then updates the contract's rate and triggers an update process."
The function returns the count of reserve tokens by accessing the length property of the reserveTokens array.
The function updates the exchange rate by assigning a given USD value to `dataPerUsd` and emits an event with the timestamp and the new rate.
"The function returns true if the current block number is less than the start block number, indicating the game is waiting to begin."
Increases the weed amount in a specified district by a given quantity.
Sets the holder's Kitten Coin amount for reward eligibility.
"The unlock2Y function allows an account to unlock their 2y locked tokens after a specified date, transferring the amount to them if successful."
"The function calculates the number of leap years preceding a specified year by adjusting for the Gregorian calendar rules, subtracting one from the input year to account for prior years only."
The function allocates a specified amount equally to multiple beneficiaries.
The function returns true if the number of tokens raised is at least the minimum goal.
"The function retrieves data from the escrowLedger array at a specified index, returning sender, recipient, and witness details along with their signing status and the block number."
"The FairAuction function initializes an auction with a beneficiary, start time, duration, maximum cap, and reward token distribution."
The function transfers funds from `origin` back if KYC is not approved.
The function sets the authorizer for a BRDCrowdsale before it begins.
"The function validates parameters and starts the crowdsale, called by CrowdsaleController."
"The function allows purchasing tokens with a specified IERC20 token, checking for sufficient remaining amount and valid time window, then transferring them to the beneficiary."
"The function retrieves user information including ethers, tokens, and KYC approval from a mapping using a given address."
The function updates the marital status only if both partners have previously voted to update it.
Return the id of the owned active token exchange
The function increases the amount of tokens a spender is allowed by a specific sender and returns true upon successful approval.
"The function returns a bytes32 hash generated by hashing the contract's sender address along with the string 'app_list', likely used as a unique identifier for application registration."
"The function reverts immediately upon being called, preventing further execution and returning any pending Ether to the caller."
"The function distributes tokens from the sender to each wallet in the provided list, with each wallet receiving an amount specified by the corresponding value in the values array."
"The function retrieves associated TAO setting details for a given ID, returning the setting ID, associated address, and configuration identifier."
"The function updates reserved wei in three stages, allocating 500, 30%, and the remaining wei respectively after specified times."
This function retrieves the DBZ owner address of a specified hero by their ID.
The function allows the contract to accept ETH.
The function burns the remaining BBY tokens owned by the contract after deducting the number of locked tokens.
The function retrieves the total number of snaps stored.
"The function creates an instance of the SkillChainToken, which is a type of token that can be minted. Creates an instance of SkillChainToken."
This function allows the owner to transfer the contract's balance to their wallet after 60 days following the ICO completion.
getOwnerAddress() returns the address of the song owner.
"The function allows the contract's owner to transfer a specified amount of tokens from another wallet to themselves, provided the recipient has sufficient balance, and updates the total token supply accordingly."
"The function calculates the number of tokens an investor will receive based on their investment in wei, divided by the stage's price using getStagePrice(). tokensToRecieve ( uint256 _wei ) internal view returns ( uint256 tokens ) { uint8 stage = getStage ( ) ; uint256 price = getStagePrice ( stage ) ; return _wei . div ( price ) ; }"
"The `destroyContract` function allows the developer to self-destruct the contract, transferring control to them, subject to specific time-related conditions."
The function checks if an auction associated with a given roster index has been cancelled.
Mints tokens to a specified address.
The function calculates the royalty amount for a given account by determining the portion of their balance relative to the total supply after subtracting past royalties.
The function processes multiple authorized payments in a single transaction by iterating over an array of payment IDs and calling a helper function for each.
"The function `migrateByAdmin_DQV` handles token migration from one contract to another, adjusting balances and deducting gas fees based on specified payment methods (joyToken, token, or default). It verifies each transaction step using a hash check and updates balances accordingly."
The function retrieves the manager address associated with a given role for an application by looking it up in the permissionManager mapping using a hashed key generated from the application and role.
"The function transfers tokens from the message sender to a specified address, deducting the amount from the sender's balance and adding it to the recipient's balance."
The function transfers tokens from a specified wallet to another address after validating the inputs.
The function calculates the expected tokens by deducting any applicable fees from the provided funds and converting the remaining amount into tokens.
The function removes an investor from the whitelist by setting their max buy cap to zero and refunds any invested amount if they have invested.
"The function sets the release time for a specified holder, ensuring it's not in the past, and updates the userLock record accordingly."
"""Changes the neighbour reward percentage by updating the state and triggering a related function."""
"The function initializes an auction with the given name and duration, setting the start and end times, and returns success."
"The function overrides the base contract's transferAndPay method, checking if transfers are enabled before delegating the call to the parent contract."
The function adds bonus wei to the transaction origin address of the caller if they are authorized by fundariaTokenBuyAddress.
The function checks whether the recovered signer of a given data hash holds the BOUNCER role by converting the hash into a signed message and verifying the role.
"The function returns true if the current time exceeds the event end time, indicating the event has concluded."
The function allows the contract owner to update the staking period by assigning a new value.
The function verifies if the provided parameters correctly match the expected values by hashing them and checking against the known signature using ecrecover.
"The function burns a specified amount of VenusCoin tokens from both the sender's balance and the total supply, transferring them to address 0x0."
The function removes a specified address from the whitelist by setting its status to false.
Transfers the unclaimed token amount for the given token and address.
The function retrieves an address from the soulBook array using the provided page number.
The function `remove` revokes the access of a given address from a specified role by setting its bearer status to false.
"The function allows the current owner to transfer ownership to another address, provided it is not zero."
The function sends tokens to the caller by calling the buyTokens method with the sender's address.
Checks if the crowdsale was completed successfully.
Pauses the crowdsale if called by the owner.
The function allows an investor to withdraw their allocated tokens by transferring them to themselves and resetting their withdrawal allowance to zero.
Returns the amount of tokens locked for a specified address for a specified reason at a specific time.
"The function allows the contract owner to claim ETH from another address, presumably after an ICO."
"The function transfers ownership of a token from _from to _to, updating internal mappings and arrays to reflect the transfer, including handling index adjustments and approval deletions."
"The function normalCheck verifies that transTimes is positive, regularTransTime is non-empty, minInvest is positive, and rateSteps is non-empty."
This function allows the owner to distribute tokens to a recipient address before the public sale begins.
"The function transfers ownership of a property from the old owner to the new owner, updating records with transaction details including amounts in ETH and PXL tokens, while setting a flag for private sale mode."
allows the owner to execute the token's destroy function
"The function returns the current stage index or the next one if the stage's end date has passed, allowing the contract to transition to the subsequent stage when the time comes."
"The function calculates a portion of the total freeze amount across multiple stages, scaling it using predefined multipliers and returning the result."
The function Approve checks if all required manager votes are obtained and transfers funds to the recipient if the conditions are met.
"The function sets the discount bonus for a mini game, requiring the caller to be the administrator."
The function validates that the provided address is not zero and returns the number of redemptions for that address stored in an array.
The function calculates dividends and is part of the fallback mechanism used to receive funds and distribute them accordingly.
Freeze multiple accounts from making any transfers by setting their status to true.
The public function reverts all transactions by halting execution without returning a value.
"The function _getCoins sends SHPC to a contributor if they meet certain conditions after the sale ends, ensuring no duplicate payments and valid eligibility."
Retrieves and increments the debit nonce for a specified wallet.
"The function calculates the maximum allowable purchase for a participant within their current window period, returning either the total available amount if no more blocks are left or subtracting past purchases from the total."
"The function ensures that only the contract's owner can call it, preventing unauthorized access."
"The function updates multiple economy parameters such as card prices, premium rates, and fees in a single transaction."
The function authorizes a casino contract address by validating the player's signature and setting the authorization status.
The function checks whether a specified operator is approved by a given owner and returns true or false accordingly.
"The function is a simple callback handler that reverts upon invocation, indicating no further action is taken upon receiving a callback."
The function retrieves the factory address corresponding to a given country from a predefined mapping or array.
The function retrieves the name corresponding to the current standing value from the standingNames array using the result of currentStanding().
The function calculates 10% of the prize fund and returns it.
"The function tracks contributions from senders, adding them to contributors upon their first contribution and recording each subsequent contribution value."
"The function transfers development tokens from the tokenReward contract to a vesting wallet, managed by a DevTokensHolder instance, and returns its address."
Transfers tokens from the Marketing Address to the specified investor.
"The function retrieves a specific user query identified by `id` by constructing a hash key from 'queries', `id`, and 'userQuery' and fetching the associated string from a database."
"Sets the current stage by name, callable only by owner."
Sets the amount of gas allowed to investors.
Returns the balance of the contract.
"The function returns the amount of wei invested by a specified account, retrieved from an array."
"The function transferFrom allows transferring tokens from a specified address to another, subject to the sender's allowed amount, by deducting the transfer amount and invoking additional functions for processing."
The function `claimMethodABI` is a constant public method that returns the Solidity method's claim ABI as a string.
The function clears the approval for a given token ID by resetting its approval status to zero if the caller is the current owner of the token.
The function allows a job manager to transfer DAI tokens to an evaluator based on specified conditions.
The function retrieves the composition details (pitches and composers) for a specified pitch and returns both arrays.
Returns the total amount claimable.
"The function issues a free card to a new user and allocates a referral bonus to their referrer, ensuring each user only claims once."
The function retrieves the total number of tokens minted by a specified sales agent.
The function receives dividends and uses them to buy an asset on the Zethr platform at a specified address.
"function mintTokens ( address _beneficiary , uint256 _tokenAmount ) public onlyOwner { _deliverTokens ( _beneficiary , _tokenAmount ) ; }"
Changes the associated contract address and emits event.
"The function sets MIN_STARTING_PRICE to _price, callable exclusively by authors."
Updates ether price config to eight decimals.
The function returns the address of the user placing a bid either for a specific order ID or the first available if no such ID exists.
The function iterates through an array of addresses and returns the index of a specified address or 0 if not found.
The function retrieves the user ID associated with a given wallet address from a mapping and converts it to an unsigned integer.
The function retrieves the current Ethereum balance stored in the contract.
"The function allows a user to mint tokens to a specified address only if they are called by the AddressDeployer smart contract, returning true upon successful minting."
The function returns the number of wallet owners by subtracting one from the length of the owners array.
"The function allows the owner to distribute a specified number of tokens to another address across multiple rounds, ensuring each distribution does not exceed the allocated total for its respective round."
"The function allows contributors to withdraw their initial investment and any sale proceeds if the total exceeds the softcap, enabling refunds after the sale period ends."
"The function checks if the amount raised meets or exceeds the funding goal, returning true if successful."
"Sets the token's name and symbol, allowing only the owner to update them."
The function queues a session by adding the player to the list for processing.
"The function sets lockedAddresses for a given allocation address to false, allowing initial unlocking upon verification of the address."
"The function calculates the total tokens received per contribution by either applying a pre-sale rate adjustment or using a standard token calculation, depending on the contract's state."
The function calculates the percentage of the minimum funding goal achieved based on the saved balance.
The function `unfreeze` allows the contract owner to remove an account from its frozen state by setting its status to false and emitting an event indicating the change.
"Sets the new user bonus amount, restricted to the owner."
"The function reverts immediately upon being called, preventing any ether from being sent to the contract."
"The function adds a new distribution period by incrementing the count, copying data from the previous period, calculating total BMC deposits, updating the periods array, and returning OK."
"The function `changeTotalSupply` adjusts the `totalAllocatedTokens` by adding `_amount`, allowing for dynamic allocation during a crowdfunding phase."
Distribute presold tokens and bonus tokens to investors.
"The function returns the count of buildings, houses, schools, hospitals, and amusement facilities in a specified city based on its ID and active status."
"The function allows the owner to set the social multiplier to a specified value, provided it is at least 1."
The function 'unpauseTransfer' allows the owner to enable transfers by resetting the paused state.
"The function retrieves cumulative scores and total ratings for a given target address if they exist, returning 0s otherwise."
"The function setPropertyStatus updates the status of a specified property for a given user, allowing only administrators to modify this state and returning true upon success."
Checks if the current tier's capacity is reached.
Check if a wallet exists at a given address.
Returns the maximum number of wallet owners allowed by the contract.
Retrieve the balance for the given address.
The function creates a new reference ID for an address if it doesn't already have one by incrementing a counter and mapping the address to this counter.
The function returns true if all assignments are completed and there are no restricted tokens left.
"The function refunds the caller if certain conditions are met, including elapsed time since contract creation and unmet funding targets."
The function allows anyone to transfer MOO tokens once trading has started.
"""Updates the contract's start and end dates if provided, ensuring start time precedes end time."""
Encodes a uint256 into its string representation as bytes by processing each digit from least significant to most significant.
recordDealCancelReason creates an event of not paid deal that was cancelled.
The function checks if neither _from nor _to is a fund manager and then delegates the transfer to the parent contract. check fund controls before forwarding call to standard token allowance spending function
"The function checks if a burner has enough tokens, updates their balance and total supply, then records the burn, returning true upon success."
The function retrieves the token balance for a specified address.
"The function safely adds two uint256 values and returns their sum, ensuring it's not smaller than either input."
"The function distributes a specified amount to multiple recipients, each of whom must wait a certain period before receiving funds, subject to balance availability and other conditions."
"The function parses an ASCII string into its corresponding unsigned integer value by iterating from right to left, accumulating each digit's place value."
The function returns the ERC20 token balance of the specified address from an array.
Approves token transfer.
"The function retrieves and returns the owner address of a specified token ID from a mapping, ensuring the owner is not the zero address."
The function increments a member's share count and updates the total shares.
The function sets a lock on specified accounts by updating their unlock times and unlocking their funds once the conditions are met.
"The function retrieves base stats for a monster identified by `_mID` from `baseStats`, returning an array of eight values representing the monster's attributes."
The function transfers tokens from one address to another if the account isn't locked and the contract isn't paused.
The function allows the owner to increment the month number and emit an event logging the change.
The function allows an owner to grant or revoke approval for another address to manage their pixels.
Transfers the collected fees to the owner.
"Handles deposits from senders, requiring a positive value."
"The function withdraws a specified amount and distributes it proportionally to each owner based on their share, ensuring the total distributed does not exceed the contract's balance."
"The function starts the ICO by verifying preconditions, updating the state to started, transferring presale and platform tokens, and signaling the sale's commencement."
"The function retrieves a fighter's data using a token ID and calculates their total strength by summing explosive, endurance, and nimble attributes."
The function emits an event `ReceivedTokens` with the transaction sender's address and value when called.
Returns the number of events recorded for a specified asset item.
"The function calculates the minimal wager required to ensure a profit after covering Oracle service costs, based on the number of spins."
The function retrieves the balance for a specified address from the deposits contract.
"The function updates the promotion status of an affiliate, limited to the contract's owner."
"The function concatenates two byte arrays, `stringA` and `stringB`, by copying their contents sequentially into a new array of appropriate length."
"The function adds a new transaction to the transaction mapping, assigns it an ID, updates the count, and returns the ID for submission."
Increases the airdrop count to allow sweet humans asking for more beautiful Lemon Tokens.
The function emits the DepositToChildEvent when a specified amount is transferred from the caller to a child contract.
The function returns the name of the ERC20 token.
"The function calculates the expected fees by multiplying the provided amount with a rate numerator and dividing by a rate denominator if applicable, capping the result at a maximum fee value."
The function calculates the difference between collected and received Ether using SafeMath.sub and returns it.
The function returns the total number of tokens in circulation.
The function checks if the sum of fiat and ether balances meets or exceeds the soft cap.
"The function checks if a contributor's tier is less than or equal to a specified tier and returns true if allowed, false otherwise."
"The function finishMinting prevents accidental termination of minting by the owner, returning false to halt the process."
The function returns the total supply by fetching the stored value `_totalSupply`.
"The function transfers a ticket from the message sender to a specified address, provided the ticket number matches the current holder and the destination is valid."
Check ownership before setting start and end times.
The function removes specified addresses from a whitelist by iterating over an array of operator addresses and calling `removeAddressFromWhitelist` for each.
The function _extend sets snake[id] to 1e16 and assigns ownership of id to msg.sender.
The function allows updating the agency owner if called by the current agency owner or the project owner.
The function allows the contract owner to remove the Operator role from a specified address.
"The function `receiveApproval` approves a transaction from `_from`, transferring `_value` of token `_token`, with additional data `_extraData`."
getPixelsOwned retrieves the number of pixels owned by a specified address.
The function returns the combined balance of invitation and loyalty rewards for a specified member.
WhitelistAddress adds multiple addresses to a list of whitelisted addresses when called by the owner during the crowdsale.
"The function allows the master to withdraw a specified amount of funds from the contract to another address, provided the contract's balance is sufficient."
Get the TripCoin balance of any address
"The function sends the current contract's balance to the beneficiary contract if it exists; otherwise, it reverts the transaction."
"Withdraws ether from contract, splitting equally between two addresses."
"The function buys tokens for a sender if the purchase is deferred, during the presale period, or otherwise purchases regular tokens."
The function calculates the total number of bets across all teams by summing each team's individual bets.
"The function returns the current tier's hard cap by hashing the state and accessing a predefined configuration. [Return The current tier's hardCap using state hash] **Step-by-Step Explanation:** 1. **Function Name:** `getCurrentTierHardcap()` 2. **Visibility:** Public and view, allowing external calls without changing state. 3. **Return Type:** `uint256`, indicating the function returns a numerical value. 4. **State Variable:** Uses `state` to determine the current configuration tier. 5. **Hash Function:** Applies `keccak256()` to `state`, generating a hash that maps to a specific tier in `tierConfigs`. 6. **Configuration Access:** Fetches the hard cap from `tierConfigs` using the hashed state. **Summary:** The function retrieves the hard cap for the current sale state by hashing it and accessing a predefined configuration, returning the corresponding value as a uint256."
"The function retrieves details of a security offering based on its proposal index, returning the contract address, auditor, vesting period, quorum, and fee."
The function withdrawETH transfers all ETH in the contract to the owner and returns true upon success.
The function allows the owner to update the minimum TMS value by setting `minTms_` to `_tms`.
Stores an image string by hash and returns its numerical identifier.
"The function removes specified tokens from circulation by deducting them from both the sender's balance and the total supply, then destroys them."
"The function returns the keccak256 hash of ""sale_min_purchase_amt"", representing the minimum tokens allowed in purchases."
The function allows the contract owner to update the bonus to a new positive value that differs from the current bonus.
"""This function transfers value from one address to another on the blockchain."""
Converts softCapCHF to wei.
"The function retrieves user details by username, ensuring the user exists and is initialized, then returns their address and delegation status."
The function retrieves and returns the token name stored in the variable `name_`.
The function allows the owner to add an address to a list enabling token transfers from that address.
The function allows the contract owner to withdraw funds raised by transferring them from the vault to their wallet address.
"The function calculates bonuses based on the current time and ICO status, returning different percentages of _value for each applicable timeframe."
""" Allows a god's owner to set the godID, subject to vendueClose being true and the transaction being sent by the god owner. """
"The function adds a specified address to the whitelist of spenders, allowing the owner to manage approvals through `approveAndCall`."
The function allows the owner to trigger an update of Oracle rates after a specified delay.
The function allows an entity's owner to modify its active status and associated data.
The function returns the amount of owed tokens pulled from the lender based on provided parameters.
Burns a specified amount of tokens from one address to another.
The function returns the current value of directOffersComissionRatio. Returns the direct offers commission ratio.
Retrieves the withdrawal address using a predefined variable.
"The function multiMint allows an administrator to distribute tokens to multiple recipients by iterating over arrays of addresses and amounts, updating their balances, and transferring the specified amounts."
The function grants voting rights by associating a public key with a specified voter address in the pubKeys mapping.
The function allows the token owner to initiate a profit distribution round by updating the token status to distributing and starting the redemption process with the provided value.
"The function transfers tokens from the message sender to a specified address, preventing transfers to address ""0x0"" and ensuring sufficient balance before proceeding."
The function adds a new NameTAOInfo entry by validating inputs and ensuring the name's uniqueness before creating an internal ID and updating the total count based on the type ID.
"The function determines the tier ID for a given block number by iterating through tiers from highest to lowest, returning the first tier where the block number meets or exceeds its startBlock, or 0 if it doesn't meet any."
"The function calculates and returns a percentage rate based on the contract's balance, increasing as the balance meets certain phase thresholds."
"The function allows contributors to purchase tokens within specified limits, updates token balances, tracks total tokens sold, and transfers funds to recipients, with additional logic for determining the recipient address."
The function retrieves the balance of BBD tokens held by the smart contract address and returns it as a uint256 value.
"The function allows players to deposit crystals into a pot, which are then distributed based on a set period, ensuring the round hasn't ended and the deadline hasn't passed."
The function retrieves the number corresponding to a given choice.
The function retrieves the token amount allocated to a specified participant in a given round.
"The function adds 16 new Genesis cats by calculating their price based on remaining counts and assigning unique IDs, updating records, and listing them for adoption."
"The function stopSale allows the owner to halt the ICO by verifying the current state is started, updating it to stopped, and invoking SaleStopped."
Adds an address to a list of allowed addresses.
Disables advertising by resetting the advertising string.
"The function calculates the total cumulative charity for all campaigns, returning the updated value if the last campaign isn't finalized, otherwise returning the existing total."
"The function allows adding a dedication to a token if it doesn't already have one, with ownership restricted to the token's owner."
"The function transfers token ownership from the caller to _newOwner, allowing ownership delegation in a smart contract."
The function allows the owner to initiate a crowdsale by setting the admin address and verifying the token's balance before transitioning the state to started.
The function retrieves the number of deposits made by a specified user by returning the length of their corresponding entry in the depositors array.
The function returns true when the transferred total meets or exceeds the max goal amount.
"The function creates a new fighter with specified attributes, assigns a unique identifier, and triggers an ownership transfer event."
The function forbids an address from claiming all past rewards by updating its last reward to the cumulative ratio.
The function retrieves an array of community logic contract addresses and returns them.
"The function checks if the transaction value meets the minimum requirements during either the main sale or pre-sale phase, returning true if applicable and false otherwise."
"The function transfers a specified amount of tokens from the message sender to another contract, ensuring the recipient is a valid contract and updating balances accordingly."
"The function distributes prizes based on deposits and winner status, using ETH or CBCTokens, resetting deposits, and updating lastHero."
The function `balanceOf` retrieves and returns the balance of a given address using recursive calls. Retrieves and returns the balance of a specified address using recursion.
The function transfers tokens from one address to another based on specified parameters.
"The function returns the amount of tokens left with the delegator after the transaction, based on the allowed amount set by the owner for the spender."
"The function sets an allowance for a specified address to interact with another, allowing up to a given value in transactions."
Queries the price and last deal time of a specific token.
Use 1 super privilege to permanently own a company.
The function facilitates an exchange process between two addresses using specified tokens and returns the amount of makerToken received.
"The function retrieves a DataRequest by ID and calls another function with its initialization status, data URL, and number of data points."
"The function retrieves a player's safe details by address and transaction ID, returning locked, unlocked, and withdrawable amounts based on the player's ID."
The function executes an order by transferring tokens from a maker to a taker based on specified quantities and parameters.
"The function allows the owner to deduct a specified value from both the user's balance and the total supply, then calls another recycling function and returns true."
The function retrieves the balance of a specified address by returning the length of its tokens in the `ownedTokens` array.
The function accepts Ether payments publicly without executing any operations.
"""Transfers tokens from sender to address."""
The function updates a player's total referrals by adding unrecorded ones and adjusts their last referred round ID according to specific conditions.
"The function transfers ownership and account balance from the current owner to a new owner, ensuring the new owner is not the zero address and different from the current owner."
The function pauseContract can only be called by the owner wallet and pauses the contract when invoked.
The function finalises the ICO by transferring any remaining tokens to contributors and updating the total tokens sold.
"The function withdrawPayments processes a payment withdrawal from the contract to the payee, verifying the amount, transferring it, and recording the transaction."
The function calculates 4% of the input amount as the development fee and returns it.
The function transfers the user's deposit to the main contract pool if the betting period hasn't ended.
Returns the count of available markets.
The function returns the spending allowance for a given spender from an owner based on predefined approvals.
"The function returns whether the transfer to `_to` was successful, based on the sender's balance."
"The function retrieves the token amount associated with an ask order, returning the specified ask's amount if valid; otherwise, it defaults to the first ask's amount."
The function enables transferring a specified amount of tokens to a valid destination address only when transfer is enabled for that address.
The function grants foundation tokens or bonuses based on conditions and resets them after transfer.
"The function retrieves the purchase limits defined by a `cap` contract or struct, returning the maximum amount and duration allowed for purchases. getPurchaseLimit() retrieves the purchase limits from a 'cap' structure, returning the maximum allowable amount and duration."
"The function allows the contract's owner to set the token address for AIB, provided it is not zero."
The function retrieves the block count since initialization by calling a method on the core contract and returns that value.
The function checks whether a given proposal code matches by comparing its hash with the computed hash from specified parameters.
"The function distributes tokens to multiple addresses by transferring specified amounts, converting each amount into tokens using a multiplication factor."
"The function allows the owner to simultaneously whitelist up to 150 user addresses, preventing gas limit exhaustion and potential DoS attacks."
Verifies whether a borrower has successfully withdrawn excess collateral for a specific loan order.
The function retrieves the balance of a specified owner in terms of a standard Ethereum unit (uint256).
"The function enableTransfers allows the controller to enable or disable token transfers within the smart contract, controlling their flow based on specific conditions."
"The function allows the owner to set the rate to a positive value, enabling them to adjust the rate dynamically."
Charges a fee in protocol tokens.
The function allows the contract owner to mint a specified number of tokens to the sender of a transaction.
The function returns the total token supply available.
The function finalizes the minting process by setting mintingFinished to true and invoking the MintingFinished event.
"The function allows transferring tokens from a crowdfund address to another address, subject to balance checks and non-zero parameters."
Retrieves dividend amount from the hourglass contract.
"Sets the new conversion rate, which must be greater than zero, and emits an event upon the change."
The function finalizes the token state by verifying the bonded value and transferring balances from the NectarToken to both parties.
"The function calculates the discounted token amount by multiplying the provided ETH amount with a discount rate, ensuring the input is non-zero."
The function retrieves and returns the current minimal balance as defined by the contract's state.
"The function `getMaxTotalSupply` retrieves and returns the predefined constant `MAX_TOTAL_SUPPLY`, which represents the maximum total supply in the contract."
"The function allows an admin to add funds to a jackpot by checking if the sent value is positive and updating the jackpot accordingly, returning true upon success."
The function updates the current bid price based on a calculated value derived from fixed and variable components.
The function calculates the number of blocks remaining in the current live stage by determining the difference between the stage's end block and the current block number.
"The function updates a node's status if its referral deposits meet or exceed specified thresholds, checking from highest to lowest."
"The function checks if the crowd sale event has ended either by reaching the token cap or being manually triggered, returning true in either case."
The function withdraws the entire contract balance to an ether wallet if certain conditions are met.
"The function updates the address of the blind auctions contract, allowing only the `onlyGod` account to modify it."
"The function transfers funds from the message sender to a contract address, updating balances and invoking a fallback mechanism."
"The `_forwardFunds` internal function manages the transfer of Ether within the smart contract, facilitating payments based on predefined rules."
"The function initializes the token and sets conditions for its release, ensuring it can only be accessed after a specified time."
"The function allows ether to be returned to the sender if certain conditions are met, otherwise transfers funds to a beneficiary based on predefined criteria."
The function checks whether the ACL grants permission to the specified address for a given action in a particular context.
"The function setUpgradeAgent sets up an upgrade agent by validating the provided address, ensuring the caller is authorized, checking upgrade conditions, initializing the agent, confirming its original supply matches the total supply, and adding it to the system."
"The function locks a vault for three wallets by setting their respective timestamps relative to the current block, updating their lock times and emitting an event."
Sets the minimum investment amount for the contract.
"Pauses ICO by setting status to Paused and logging, only callable by manager."
The function updates the current generation to a specified new value.
The function sets the main sale address and assigns a value to `tge`.
"The function sets the bonus percentage for purchases, allowing authorized users to update it while ensuring the value is non-negative and informing stakeholders of changes."
"The function calculates the fee for a given amount, applying special promotions if applicable, otherwise using a default fee rate."
"The function calculates the current token price based on the number of tokens sold, applying different multipliers (step1, step2, step3) to each tier of sales."
Returns the total number of burned tokens.
The function calculates the remaining tokens for the locked stage of the target account at an identifier.
The function allows users to deposit Ether into the contract for an experiment.
"The `tokenFallback` function is an external method that reverts all incoming calls, preventing any action on received tokens."
"The function removes specified addresses from a whitelist, requiring the caller to be the whitelist owner."
The function returns the combined total supply of two tokens: drpsToken and drpuToken.
The function retrieves transaction IDs in a defined range where transactions meet specific pending or executed status conditions.
"Allows qualified partners to purchase Star Tokens using Ether, ensuring they do not exceed their allocated amount and receive any applicable commission fees."
The function checks if active and returns the last campaign's price or the starting price accordingly.
The function attaches many addresses to many users by pairing each address with a user ID and calling `attachAddress` for each pair.
"The function updates various contract settings including gem conversions, percentages, event card ranges, and battle rounds, ensuring values are within specified limits before assignment."
"The function retrieves version details for a specified contract and version, returning associated attributes such as status, bug level, implementation address, audit status, and timestamp."
"The function initializes a token with given name, symbol, initial supply, and decimals, validating that the initial supply is positive."
Logs out user on admin action.
"The function transfers specified coins from base_wallet to _to in an ICO, requiring sufficient balance before execution."
"The function transfers tokens from the sender to the specified address, checks if the transfer is allowed, ensures the recipient is a valid contract, updates balances accordingly, and handles any fallback using ERC223ReceivingContract."
"The function retrieves 12 fashion attributes for a given tokenId, returning them as an array."
Returns the topics for a crowdsale configuration event.
"The function checks if the current time is within the presale window and if the presale has not yet reached its hard cap, returning true if both conditions are met."
The function wnFromGas calculates and returns a uint256 value based on the provided gas amount.
The function checks whether the given address is a contract by returning true if it contains bytecode.
The function retrieves popularity and activeness values from the tavern contract for a given tokenId and returns the computed influence.
"The function returns true if the game is neither waiting nor stopped, indicating it's in an active state. function isRunning ( ) public view returns ( bool ) { return ! isWaiting ( ) && ! isStopped ( ) ; }"
"The function allows transferring tokens to another address only if the contract hasn't been paused and trading has started, overriding the parent contract's transfer method."
The function retrieves all CryptoBeasties token IDs stored in the contract.
"The function emitsBegin initializes three processes (r0, r1, r2), indicating the sale has started."
This function transfers a specified amount of ether from one address to another.
"This function allows NATEE_CONTRACT to redeem warrants from another address by deducting the specified value, updating balances, and emitting related events."
"The function implements a long multiplication algorithm for two 256-bit integers, decomposing each number into high and low 128-bit parts and systematically computing their product."
"The function transfers tokens from `from` to `to`, updates balances and allowed amounts, and emits a transfer event."
"The function sets `locked` to `true` and returns `true`, indicating successful execution without verifying ownership."
"The function updates multiple managed contracts when `numMCApplied` is greater than zero, iterating up to `maxNumMC`."
This function calculates the unpaid portion of a deposit based on a given percentage rate and the time elapsed since the deposit was made.
The function sets the initial owner of the contract using `msg.sender` in a constructor method with no parameters.
The function allows the owner to withdraw a specified amount of ETH from the contract if sufficient funds are available.
creates a number of instances of ChildDeposit contracts.
Adds an address to the tokenFallbackWhiteList if it is identified as a contract.
"The function checks if the registry has active stores, valid manager and claimer addresses, and is not paused. isReady returns true if totalStores > 0, manager != address(0), claimer != address(0), and pausable.paused() is false."
"The function `AuthEnd` checks if the caller has authorized safe keys and resets associated signing keys, returning true upon successful check."
Terminate the Affiliate contract and destroy it.
"The function allows either the merchant or Monetha to withdraw funds to a deposit address, facilitating an exchange."
"The function allocates tokens and processes contributions during the presale phase, ensuring proper token distribution and transfer of remaining funds."
The function retrieves the current price of a specified Video Game Item by its ID.
The function allows participants to reward their tokens from the current round.
"The function returns the total number of contributions made by a specified sender, determined by the length of their entry in the contributionsBySender array."
"The function allows the contract's owner to withdraw ether, transferring either a specified amount or the remaining balance, before resetting the specified amount to zero."
The function updates the purchasing state by converting wei to tokens and adding them to the total sold tokens after calling the parent function.
The function returns an array of token IDs that can be transferred.
"The function transfers ownership by assigning the new owner address, restricted to calls made by the current owner."
The function updates an element's scientist ID by adding a provided scientist ID to a base value.
"The function updates the exchange rate from ether to tokens, allowing only the contract's owner to modify it."
Adds value to account's locked balance and updates total supply.
The function returns true if the stage is executed.
The function checks the balance of a Beercoin user by returning their stored value from an array using their address as the key.
Returns current dividends including referral bonus by calling p3d.myDividends(true).
The function retrieves the end time of the last bonus by accessing the bonuses array's last element and returning its endTime property. getLastTime (Data storage self) constant returns (uint) { return self.bonuses[self.bonuses.length - 1].endTime; }
"This function updates specific details of a DBZ hero, including their name, owner addresses, and current level, ensuring the new owner is different from the current one."
"The function removes a specified pool from the list by replacing its position with the last element before shortening the array, accessible only to the owner."
