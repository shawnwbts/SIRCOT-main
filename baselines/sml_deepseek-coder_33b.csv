allows the contract's owner to withdraw a specified amount of Ether from the contract's balance
"adds a wallet address to the list of wallets, only if it is not already present and can only be called by the contract owner"
"allows a user to transfer tokens and participate in operating a jackpot, with custom reserving percentage"
allows the owner to remove allocated tokens from specified addresses
checks if the game is in stopped mode by comparing the `startBlockNumber` to zero
allows anyone to withdraw accrued dividends and coupons from the contract
"takes an array of bytes32 hashes as input and iterates over each hash, calling the function `startAuction` with each hash"
"is used to adjust or create a pledge with the given ID, amount and quantity"
checks if the last placed bet can be cancelled by the caller
retrieves a list of vendor ids from the `vendorList`
"checks whether a sender is entitled for a cluster based on their backer status and withdrawal history, returning true if they have withdrawn at least 1000 segments prior to the current segment"
increases the timelock for all accounts by a specified amount
converts a uint256 to a decimal string
is used by the owner to burn all unsold tokens after a specified closing time has passed
"calculates and returns the amount in wei based on a given token amount, price multiplier, and price divisor"
"subtracts a specified amount of DARFtoken tokens from the balance and total supply of the owner's account, emitting a Transfer event with the sender as the source and zero address as the destination"
is used to handle token approvals in different VZT contracts
is a public view function that returns the total supply of tokens in this contract
"transfers all tokens to a specified wallet and sends any remaining Ether in the contract to the owner, after a crowdsale ends"
converts a given number into a hexadecimal string representation
sets the state of an airdrop agent in the smart contract
returns the balance of a given address in an ERC20 compatible contract
"changes the boolean value of a variable named ""bet"" to the input parameter ""newMod"", but it can only be executed by the contract's owner"
returns the number of Rick holders in a Portal Gun instance
"sets the prices for creating, editing and activating contracts in a smart contract system"
sets a new passport logic implementation as current one
is a public function that can only be called by the contract owner and requires the `ensureStage` modifier
updates the participant cap for tier 2
retrieves the user's game information connected to the current game and returns it as a tuple of three unsigned integers (uint256)
creates tokens for investors who paid in other cryptocurrencies by calculating a bonus based on the amount invested and then minting these tokens to the investor's address
checks if a specific bit in a given number (data) is set or not
"sets the state of a variable named ""paused"" to true"
is named `name` and it's an external view function that returns a string
"checks if a given user has KYC approval or not, returning a boolean representing the user's KYC status"
allows only the developer (dev) to enable or disable emergency selling
sets a price for a token in Ether (ETH)
allows the owner to transfer the raised funds
"""The 'TokenDestructible' function is publicly accessible and can accept payments"
returns the balance of a payee in a request identified by `_requestId` and `_payeeIndex`
creates a new CSCToken instance and distributes tokens to two addresses
allows a user to update their own secret note in the smart contract system
"changes the ICO start time to a new specified time, but only if it is earlier than the current ICO start time and later than the pre-ICO start time plus seven days"
sets the address of an exchange oracle for a crowdsale
allows the user to withdraw dividends and transfer them to the bankroll of a specified contract
sends the amount of Ether sent to the contract to the owner's address
changes the website of a smart contract dynamically
"checks if a given value is contained in the set and returns true if it is, otherwise false"
sets the ICO wallet to which ETH funds are sent
removes an address from the list of agents authorized to mint debt tokens
creates a new instance of the CentralizedOracle contract and emits an event for its creation
sets the purchase price of tokens by contract and can only be executed by the owner
"retrieves player information based on the provided address and returns their ID, eth balance, general vault amount, total earnings from MFCoin, and affiliate vault amount"
allows a merchant to withdraw funds to a specified beneficiary address with a transaction
"checks the crowdsale state, returning false if the goal or time limit has been reached and ending the campaign when contract does not accept tokens"
checks if an address can handle the ticket type and returns a boolean value indicating its validity
returns the number of ads currently stored in the smart contract
"adds a specified token value to the balance of a given address, and updates the array of addresses that have non-zero balances if necessary"
 calculates the left child's index in a heap data structure
"is only accessible to the contract owner and initiates a final distribution in case of project wind up, with a requirement that the token status must be 'Trading'"
is a public view function that returns the current number of elements in the array `coins`
transfers all ERC20 compatible tokens accidentally sent to the SGM token contract back to the owner
sets a new price for a gift
"checks if a transfer is valid for locked tokens based on the holder's address and value, returning true if it is"
retrieves the total bet amount for a specific address from a specified team in a betting context
converts a uint to an ASCII string value
checks if a given buyer's address is on the whitelist
"sets a boolean variable 'mintingFinished' to true, triggers an event 'MintFinished()', and returns true"
allows the owner to approve a spender account to spend a certain amount of owned tokens
is used to sell tokens in a crowdsale scenario
allows the actual Committee Room to upgrade the application by returning the index of the revision
is used to mint new tokens and send them to a specific address
is a public view function that returns a string representing the 'usedAPI' variable
resets a lock for an address in the smart contract
unlocks an account by setting its lock status to 0 in the 'lockedAccounts' mapping
finalizes a sale if the current time is after the end of an ICO (Initial Coin Offering)
sets the admin wallet address and emits an event if it's not zero
is a public method that can only be called by the contract owner and sets the state variable `releasedForTransfer` to true
is used to delist a specific token from the system
transfers ownership of a specific token ID to the caller
mints new tokens to a specified address and returns a boolean value indicating successful minting
allows the owner of a specific zone to set the selling price for that zone
allows the owner to change the market fees
returns the number of Public Sale tokens available for purchase
sets the `transferEnabled` variable to false and can only be called by the contract owner
"returns the sum of the player's total carrots for H1, H2, H3, and H4"
sets an address as a burner or not in the context of token burning
takes a wallet address as input and returns the remaining possible sale amount for that wallet
"returns the state of a license based on whether it is completed or not, and if it's expired or pending"
calculates the total jackpot after deducting fees and cascading percentages from the initial jackpot
transfers booked tokens to other ICO platforms
in the smart contract checks if an error status is recorded for a given requestId
adds an owner's address to a list of owners in a smart contract
allows users to withdraw their funds from the contract if they have any funds left
calculates the amount that can be withdrawn on a specific date
modifies a boolean variable `icoOverride` to either true or false based on the input parameter `_icoOverride`
"retrieves the token balance of a user by their address, returning the token account on the user's balance"
transfers a specified amount of tokens from the contract owner to another address
"returns the index of the first tranche in an array with a non-zero `valueForTranche`, or `MAX_TRANCHES + 1` if no such tranche is found"
allows the contract's owner to re-list genesis sales with a specific signature and a new price
takes an Ethereum address as input and returns the corresponding Ether address from a mapping named `affiliates`
"calculates the remaining tokens and the cost for a given hard cap, total distributed amount, and bonuses"
pauses the Round C of an ICO (Initial Coin Offering)
"changes the WeTrust signer of an NFT contract to a new address, but it can only be executed when not paused and by the WeTrust manager"
starts a crowdsale with specific parameters and funding address
The `owner` function in this smart contract is a public view function that returns the current owner of the token
"returns an array of addresses for users awaiting the transfer of tokens, which can only be accessed by the contract owner"
in an Initial Coin Offering (ICO) contract is used to send Ether to a wallet
checks if the sender of a message is ready for redemption by verifying that they have a balance and block in their respective arrays
is used to manage fund movement internally by transferring a certain amount from one address to another using the ERC20 token contract
checks if the recipient address is a contract and then calls its onERC721Received method
sets the wallet to hold unsold tokens at the end of an Initial Coin Offering (ICO)
"retrieves and returns the data of a specific pixel in an array, including its ID, owner, RGB color values, price, and text content"
"adds the message value to a variable called ""remaining"""
withdrawToken allows a user to withdraw ERC20 tokens from their account if they have enough available for withdrawal
"is an external view function that returns a list of unique addresses from the struct ""users"""
returns a human-readable representation of the contract's current state
transfers a specified value from one customer address to another and returns whether the transfer was successful or not
"returns the number of tokens sold out till now, which is calculated by subtracting the current balance of tokens held by the contract from the total available for sale"
checks if all contributors' tokens are distributed by iterating through a list of addresses and checking their token distribution status
"sets the ICO status to ""RoundDStarted"" if it's currently in either ""RoundCFinished"" or ""RoundDPaused"" status, and logs a start round D event"
"retrieves round statistics by index from arrays `_winners`, `_positions`, and `_blocks`"
transfers tokens from the contract to any specified address
in the smart contract returns the amount of tokens that the owner has allowed to a spender
changes the frozen status of an address
transfers a specified amount of currency to the beneficiary within the smart contract
"changes the end date of a presale, but only if it is earlier than the current start date and later or equal to the current end date"
retrieves and returns the number of points held by a player
transfers the current balance to the 'cashout' wallet and terminates the contract
sets the status of a specific feature in a system
"in the BearCrowdSale contract instance adds a specified `amount` of tokens to the balance of a given `receipent` and updates the total supply, but only if the maximum token amount is not reached"
is used to retrieve the minimum amount that can be sent in a transaction on the Ethereum blockchain
retrieves and returns the number of signatures required for administrative changes in a smart contract system
"swaps a given jingle with the last one in an owner's array, deletes the end of that array, and updates the position index for the swapped token"
checks if a public token sale (either pre-sale or main sale) is currently running
retrieves and returns the sell price of a specific block identified by its ID
calculates the total dividend amount for a given address holder based on their pool balances and dividends per token per round
returns the post-deployment state of a smart contract
clears the current approval of a given token ID if the owner is indeed the owner of the token
checks if an account has any pending orders
sets public metadata in a smart contract for XNR mainnet purposes
overrides the transferFrom method from OpenZeppelin's ERC20 standard and includes a pause mechanism to prevent transfers during an emergency situation
checks if the crowdsale has raised enough money to reach its goal by comparing the current balance with a calculated threshold based on the goal and a criterion
retrieves the vested balance of a specific address from the `tokenAccountIndex` mapping and returns it as an unsigned integer
approves tokens allocation to a beneficiary and transfers them
in a smart contract returns the address that is approved for a specific token
"subtracts a specified amount from the sender's balance and adds it to the 'burntValue', then emits an event 'Burn'"
is a public and constant method that returns the current price of Paycarnita
removes a designated presale contributor from the allowance list
allows anyone to transfer Change tokens once trading has started
"retrieves a list of transaction IDs within a defined range, based on whether they are pending or executed"
processes a purchase by delivering tokens to the beneficiary
subtracts a specified amount from the balance of the contract's owner if the token is not sold out after Public
checks if a reference is available for the message sender and returns a boolean value indicating this
adds a member to the Blocksquare group
"calculates the sale return for a given supply, reserve balance, reserve ratio and sell amount using Bancor's formula"
"receives bets from users, checks if the bet is within a certain range and if the contract has enough funds to pay out"
is used to initiate a new era in the Mokens contract
"updates the ETH price for a token sale, can only be called by the contract owner and only during a pre-sale"
checks if a contract's paused state is active and returns a boolean value indicating this status
checks if trading is open or the sender is the owner or community tokens address before transferring a certain value from one address to another
changes the admin representative to a new address `newAdmin` if and only if the caller is the owner
checks if a given operator has a specific role in the smart contract
removes and returns the first entry from a linked list
updates the quantity of a consumable item in a game or application
allows the owner to transfer the balance of a specific DutchAuction contract back to its core contract
retrieves the next transcoder in a pool for a given transcoder from the `transcoderPool` object and returns it
allows the dev team to retrieve adminPool by transferring its balance to an admin address
checks if the current time is within a specified period for a given beneficiary in a white-listed system
removes a role from an address and emits an event indicating the removal of that role
sends ETH safely by the passed parameters
checks if the amount of wei contributed by a beneficiary is within the minimum and maximum contribution limits before validating the purchase
checks if a given signature corresponds to the hash of some data and if the signer has a valid role
checks if a given block is mature based on its number and an external block number
updates the address of a multisignature wallet
always returns the same hardcoded value of 16397829
transfers tokens from one address to another and returns true if the transfer was successful
is a public view function that returns the maximum amount (uint256)
in a smart contract allows the team to withdraw all funds and destroy the contract
checks if a given address has been refunded
"transfers a specified amount of wei from the contract to the owner's withdraw wallet address, provided there are sufficient funds in the contract"
allows the owner to burn a specified amount of tokens from their balance
"is used to change the state of a smart contract from its current state to ""TokenDistribution"" and logs this state change"
returns the number of empty indexes in a given array
"adds an activity account if the maximum number of accounts has not been reached, otherwise it sends a ""max accounts"" error message"
transfers a certain value from the sender to another address and emits two events - `Transfer` with and without data
"takes a parameter `_value` and returns the product of `_value`, `currentBonus`, divided by 100"
returns the value of the second-level referrer's bonus percentage
Returns an appropriate token contract based on the input boolean value
burns a specified amount of tokens from a given address if the owner is executing it and the sender has enough balance
unlocks the tokens of a specified team if certain conditions are met
allows the owner to set a maximum amount of ether that can be accepted
"is a constructor for the contract, which sets the initial value of the variable ""admin"""
allows the owner of the contract to pause or resume accepting deposits
distributes rewards to winners based on their chosen odds and the amount they bet
is used to distribute tokens to an early contributor from the early contributor share
is an external call with no parameters and no functionality
sets a lock on an account and emits an event if the caller is not the creator
allows a user to claim all tokens they have deposited if their KYC status is complete
"sets the owner of a smart contract to the first ""torch runner"" who calls it"
distributes rewards among account holders based on their proportional contributions
allows the owner of a smart contract to transfer a specified balance (amount) to another address (to)
_preValidatePurchase checks if the beneficiary and wei amount are not zero
retrieves the total number of tickets held by a given account from an array named `accounts`
updates the maximum processing capacity for a faucet
"allows the contract owner to reduce the maximum limit, but only if it is greater than or equal to a minimum limit and less than or equal to the previous maximum limit"
removes a specified address from the whitelist
creates a new instance of the TokenTimelock contract with a lockup period of 1 year
"allows a user to retrieve their funds if in an emergency situation, but only under certain conditions"
enables an avatar to receive ethers by emitting a `ReceiveEther` event with the sender's address and the amount of ether received
initiates a poll with canonical configured parameters at the pollID emitted by the `PollCreated` event
collects tokens from a list of addresses and returns a boolean value indicating success or failure
sends a specified amount of Ether from the avatar's wallet to another address
sets a lockup contract if the crowdsale hasn't started
calculates and returns the total number of Dev Tokens issued during an Initial Coin Offering (ICO)
multiTransfer transfers multiple tokens to multiple addresses and returns a Boolean type of transaction success
"The function deposits funds, checks allowances and fees, makes a deposit for a period, transfers tokens, updates user participation periods, and returns success."
Returns the NTS balance for a given address.
Denies a transfer if it has already been denied.
"The function allocates pre-sold and reserved tokens to a beneficiary based on rate, updating total allocations and transferring tokens."
Decrements the commodity count by one and returns its value.
Returns the number of transactions indexed by the caller.
Generates a hash of the meta-transfer transaction details.
"Initializes Prether as a Token with given name, symbol, decimals, and initial supply to the caller's address."
Sets agent verification and signs property by the agent.
Returns the timestamp of the last receipt for a given address.
Player deposits funds to the contract's wallet for conversion into game currency.
Sets minimum sale price to `_minSalePrice`.
Returns total Ethereum balance of the contract.
Adds a vesting entry for the specified user with given amount and expiration date.
Reverts if tokens cannot be destroyed.
Sets crowd sale start time to `_start` or reverts if already set.
Returns the number of scanned diamond caps as an unsigned integer.
The function withdraws tokens from the contract after ICO ends.
"Transfers tokens from `_fromAddr` to specified `users` addresses, logging account amount for each recipient. Requires approval before transferring."
Transfers tokens to a portal gun instance on behalf of the owner.
Returns owner address for given ticket number.
Checks if finalized before allowing cashin operation.
Withdraws GNO if the end time has passed.
Sets maximum length of messages to `_maxCharactersMessage`.
Allows owner to retrieve tokens from contract.
Returns the owner of a specified token ID.
Distributes tokens from the reserve to a specified receiver.
Returns the current number of tokens in the lottery pool.
Clears the approval for a specific land ID held by an owner.
Returns address from registered map by given ID.
Changes the expiration date of a deal by adding specified days.
"Adds a new grant to the contract, updating vesting and emitting event."
Creates a MintableToken instance with address 0x0.
Checks if total wei contributions equal ICO cap in wei.
Ends crowdsale by setting stage to Ended.
Updates IPFS data for a certificate.
The function allows an owner to accept token ownership transfers via the contract's owner-only method.
Returns the smaller of two unsigned integers.
Revokes Oracle role for a specified address.
Converts tickets between sections based on input arrays and emits an end transaction event.
Calculates and adds bonus amount to calculate total tokens for deposit.
Calculates referral percent based on contract balance exceeding thresholds.
Transfers tokens held by timelock to beneficiary if the current time is after the release time.
Approves and calls the specified address with given value.
Returns remaining time until competition ends.
checks the KYC (Know Your Customer) status of a given buyer
transfers tokens to multiple users
removes a user's wallet from the whitelist if certain conditions are met
"""This function allows a user to purchase tokens by sending Ether (ETH) to the contract"
"pauses the ICO round A if it is in the started state and changes the status to paused, then logs this event"
takes an input of type uint256 and returns a uint256
returns the index of the current phase in a list of phases based on their start and end dates
"allows the owner of a token to modify its price, with certain conditions based on the token's ID"
is a fallback function that procurates tokens for the sender of the message
"""This function updates the public key for xIPFS"
"is used to set a variable `emissionlocked` to true, which can be accessed and modified by the owner of the contract"
refunds a payment if the crowdsale is finalized and there are contributions or tokens to issue for a given contributor
transfers token ownership from Pre sale to Sale
 takes an unsigned integer (uint256) as input and returns another unsigned integer
retrieves a vanity URL associated with a given wallet address
allows the contract's owner to assign a new proposed owner
adds a specified amount of investment to the address of an investor and updates the best investor if necessary
"""Sets the contract to finalized or unfinalized, depending on the input state"
allows a user to buy MF Coins by sending Ether
returns the token price with fees for a given token ID
checks if a given address has a certain permission or not
returns a maximum period transition as a uint64 value
"sets the sale state of a smart contract, which can only be called by the owner"
returns the current status of a contract based on various conditions
"is used to collect payouts for a specific address, which can only be executed by the contract owner"
is used to set up the contract with a specific ERC20 token address
forwards funds from a smart contract to a specified wallet
 returns the transferable balance of a specified address by subtracting any tokens that are currently locked from their total balance
checks if a contract has ended based on the current block number compared to an end block
returns an array of votes given to a specific project by a list of users
"is used to set a new release period for an account, with the parameters being the target address, original end time, original duration, and new duration"
enables token transfers by calling the `defrost` function on a contract named `PHN`
allows a spender to transfer a specified amount of tokens from the caller's address in an ERC20 token contract
returns the timestamp of when the next game will start
burns a specified amount of NSP tokens from a given contract address and updates the total supply
allows a user to claim their purchased tokens once the sale is finalized and they have token balance greater than zero
"""The function 'ownerWithdraw' can be called by the contract owner and withdraws all the contract balance"
allows the contract's owner to withdraw a specified number of tokens from the bankroll if they are less than or equal to the current bankroll
increases the total supply of a token and can only be called by the contract owner
"adds a single address to the whitelist, emits an event indicating that the address has been added, and can only be called by the contract owner"
transfers a specified amount of TMX Global Tokens from the sender's address to another Ethereum address
inherits the transfer functionality from ERC20 interface and prevents interaction before finalization
creates a new Security Token and saves it to the registry
 allows the owner to manually transfer tokens to any address using Ether or other payments
checks if a buyer has exceeded their approved amount in the last seller payout for a specific API ID
sets the current price of one Ether in dollars
transfers tokens from a vault to an account if the sender is the correct sales agent
calculates the total number of tokens with bonus multiplication in the duration of presale
transfers a specified value from one account to another in the context of a token system
transfers ownership of a specified token back to a designated wallet
returns the loyalty reward balance of a member in question
allows the owner to withdraw a specified amount of Ether from the contract's balance
 returns the sum of the contract's ETH balance and its dividends
transfers all bets back to the bettors if the oracle result cannot be verified
retrieves the values of tickets held in each winning caste for a specific round ID from the `rounds` array and returns them
retrieves and returns the current AI42 INDEX value
"retrieves transaction details from a ledger using a combination of issuer address, release funds to address, and secret hash as an index"
retrieves and returns the balance of the sender's address
calculates and returns the Developer's Cut in a game based on the given price
checks whether a linked list exists in storage and returns true if its length is greater than zero
converts an Ethereum address to bytes format
returns the Ether balance of the contract
is a public method that requires a non-zero ETH (Ether) value to be sent with the transaction
allows the owner to send tokens to a specified beneficiary
calculates the current rate with bonus in the public sale
"""This function allows the admin to reclaim all unclaimed tokens back to a specified wallet"
is used to mint additional tokens and only the admin can invoke it
sets a new certifier for the contract
"allows the owner to burn tokens that are not sold in a crowdsale, but only if they have enough balance and the value is greater than zero"
"deletes a safe from the safes mapping and updates total saved amount for a specific token address, also removing the deleted safe's ID from the user's safes list"
allows the owner to refund other tokens mistakenly sent here by transferring them back to a specified recipient
updates the contract state after a purchase by adding the purchased token amount to the total sold tokens
checks whether any asset has changes and returns a boolean value
retrieves the amounts paid out for a given week from the `payments` array and returns them as `fees` and `reward`
calculates the trade to buy eggs
allows the contract owner to change the `signer` address
removes the entire contract from the blockchain and invalidates all signatures
allows the owner to destroy this contract and reclaim all gas fees
takes a Unix timestamp as input and returns the ID of the first document in an array that has a valid from time greater than or equal to the provided Unix timestamp
changes the maximum cap in USD for a smart contract
"transfers all ETH from the contract to the owner of the contract, but only if the contract has a non-zero balance and the transfer is successful"
allows the contract's owner to withdraw a specified amount of STAKE tokens from the contract
creates a new subtoken with unique token ID and assigns it to a specified address
"creates a new note with specified metadata, public key, title and content"
retrieves information about a given series from the storage variable `_series` using its nodehash as key
takes a string parameter `_uuid` and returns the corresponding token ID if it exists
adds a game to the list of games if it is not an inhuman (i
"""The function 'finish' can only be executed by the contract owner after a specified time (endTime), which sets 'crowdsaleFinished' to true and emits an event 'CrowdsaleFinished'"
allows the owner to execute a confirmed transaction if it is executable and not already executed
"transfers a specified amount of coin between two addresses, with certain conditions and restrictions"
"returns the dividends earned by a contract, possibly including a referral bonus"
checks if an address is a controller and returns a boolean value
retrieves and returns the total amount of bets in a specific game from the `games` mapping array
will revert all Ether sent to it
enables early finalization of a crowdsale by setting a flag to true
calculates the total granted token amount for a given user up to the current date (now)
retrieves an array of factory IDs associated with a specific user ID from the `userToFactories` mapping
allows the owner to make a special transfer to a beneficiary with a specified amount
checks if a given account has enough balance more than a specified amount
retrieves a deposit address from an array of addresses using the provided index
calculates the interest and real time delta applied to an amount given a timeDelta and an interest rate
"retrieves the address of the highest miles owner at a given index, provided that this index is within the valid range (0 to maxLeaders - 1)"
is a public view function that returns the address of the supported token
returns the total number of pixels generated
allows a specified address (spender) to spend a certain number of tokens on behalf of the caller
checks if a purchase from an ICO (Initial Coin Offering) is valid based on the current time and the amount of tokens being purchased
decreases the remaining locked amount of an account
returns the number of tokens owned by a given address in an ERC20 token contract
checks if the current time is past the end time or there are no more tokens left
allows the owner of the smart contract to withdraw all available funds from its own address
"sets a contract as deprecated, updates the upgraded address and triggers an event indicating the new contract"
"adds a new approver to the list of approvers, but only if they are not already an approver and can only be performed by the admin"
retrieves and returns the current balance of an asset pool
"removes a specified member from the list of addresses, but it can only be called by the owner wallet"
allows admin to unlock everything globally and returns a boolean value indicating success
returns the amount of ether converted into eUSD
adds a new admin role to an address
retrieves and returns the balance of a specified account
sets a new address for the pool variable
allows the owner to withdraw all Ether from a specified wallet address
retrieves the highest price owner for a specific medal leader at a given index
sets an allowance for another address in a smart contract
"accepts an array of addresses as input and iterates over them, calling the ""claimTokenFor"" function for each address"
sets a new minimum wait time for withdrawal of funds from a started but not finished game
sets the number of styles available in a smart contract
allows investors to claim a refund if the total raised fund doesn't reach our softcap
"allows a third-party to spend tokens on behalf of the caller without directly transferring them, up to a certain limit set by _value"
checks whether adding a certain value to the current tokens sent for a given tier would exceed its respective cap
adds an amount to a counter and checks if the counter has reached or surpassed its target value
checks if a given address (_addressOfAssociate) is associated with the contract
can be executed by the owner only and changes the state of the crowdsale to started if it is currently stopped
"returns the total number of knights in a game, calculated by adding up the number of characters for each dragon type"
"AVYToken is a constructor for the RAX Tokens contract, which takes in the parent address and the total supply of tokens"
sets a new allowed address and emits an event with the new allowed address
"checks if a transaction can buy tokens during the presale period and meets certain conditions (non-zero purchase, valid presale limit)"
sets a new fee for each purchase in Ethereum smart contracts
calculates a random number and gets the preliminary game result before the real transaction is mined
transfers an item from one address to another and increments the transfer count for that item
retrieves the base buying or selling rate for a given ERC20 token from `tokenData`
retrieves and returns the balance of a given player from the `bankroll` contract
overrides the transferFrom method of the parent ERC721Token contract to allow its functionality to be frozen in case of an emergency
allows the owner to increase the end date of a crowdsale as long as it is still running
transfers a specified amount of tokens from the sender's address to another specified address
"retrieves and returns the timestamp of the last sent transaction for a specific address from an array named ""audits"""
returns the expiration timestamp of a given address (_who)
checks if there are any payments to be collected for a given holder and returns a boolean value indicating this
sets a time-hold for an investing address
checks if a user's balance of tokens is sufficient for contract creation
returns the current balance of the contract in wei
"sets a base purchase rate for the token, which can only be called by the contract owner and is paused"
"allows the contract's owner to withdraw excess Ether after selling tokens, ensuring that only enough Ether is left for future token purchases"
calculates the education level of citizens in a city based on the number of schools and population
returns the current block number in Ethereum smart contracts
adds a new game to the list of games
updates rates in a map and sets the current rate if the provided index matches the current period
in the smart contract checks and returns the remaining amount that a specific `spender` is allowed to transfer from a certain `tokenOwner`
is a public view function that returns the total supply of tokens ever emitted
is used to change the whitelisting admin
changes the proxy admin of a given target to a new owner
in an ERC223 or ERC20 contract is used to check the balance of a specific account
"sets the gas amount to be sent to Oraclize, but only if the caller is the contract's owner"
checks if the contract's state is in the 'WhitelistApplicant' period and returns a boolean value accordingly
takes a string parameter `poolId` and returns the available amount of tokens in the specified pool from the `pools` mapping variable
is used to accept ether from senders for oraclize queries and direct funding
fetches the collected ore details for a specific asset identified by its ID
is a public view function that returns an unsigned integer of type uint32 and it does not take any parameters
"sets the NameTAOPositionAddress to a new value, but only if it's not zero and can only be called by TheAO"
creates and returns an instance of the GainmersTOKEN contract with specific parameters
"retrieves and returns three values: the winner share, host share, and honorable loss bonus"
All transactions sent to the smart contract will trigger an anonymous function that sends all ether to the purchaseTokens function
transfers ethers from the contract account to a specified address if the sender is the manager and there are sufficient funds in the contract
"is setting up a new token game, with the owner being the sender of the message, cap in wei set to ""_cap_in_wei"", and various other variables initialized"
allows the owner to whitelist multiple entries
returns payment information in JSON format
transfers tokens from the sender to a contract or an externally owned account
can only be called by the contract owner and is used to return Ether to a contributor
"is used to retrieve a registered user's address based on the index, which can only be accessed by the owner"
allows any user to send funds to the contract using their own address as the recipient
returns the current balance of tokens held by the contract
"allows a caller to authorize an account (`whom`) for participation, but only if the caller is either the contract's creator or an admin"
"""This function removes multiple users from an allocation list, only accessible by the contract owner during a specific round of sale"
sets a new address for the 'housesContract' variable if and only if the caller is the 'onlyGod'
retrieves an array of checkpoint times from a smart contract
allows a third party to transfer tokens on behalf of the sender without directly transferring them
retrieves and returns the count of pending battle rewards for a specific user
transfers a specified amount of tokens back to the developer's account after the crowdsale has ended and if the caller is the beneficiary
takes an address as input and returns the timestamp of the most recent transaction (either sent or received) for that address from a mapping named `audits`
retrieves and returns the remaining tokens in a wallet
in the smart contract retrieves and returns the remaining FUEL allowance for a specific owner to spend on behalf of another address
is used to set the variable `transferEnabled` to true
allows the contract owner to destroy a specified amount of tokens
"can be called by the owner and it forces a void race, emitting an event indicating that refunds are enabled due to inaccurate price timestamps"
is a public view function that returns an array of addresses
sets a boolean value for 'enforceAddressMatch' which can only be updated by the contract owner
creates a new instance of an ICO token contract and returns it
calculates bonuses based on the current stage of an ICO (Initial Coin Offering)
checks if a user has revealed for a specified poll and returns a Boolean indication of whether the user has revealed
"""The function 'declareNewMaster' changes the master address to a new one"
transfers tokens from one address to another within the allowance limit of the sender
is a public view function that takes an address and a reason as parameters and returns the number of tokens locked for a specified address with a specific reason
withdraws the sender's contributed Ether in case the goal has not been reached
sets the address of the deposit creator and requires that it is not zero
returns the total amount of produced caps
allows purchasers to withdraw any leftover wei from their purchases and returns true if successful
"checks if 'a' is greater than or equal to 'b', returning true if it is and false otherwise"
retrieves the lock amount for a specific address with a given index from the `lockedAddresses` mapping and returns it
transfers mistakenly sent ERC20 tokens to the contract's owner
in the smart contract is used to get the owner of a specific TTM (Token-to-Money) return
allows another Ethereum account to spend Nuru Tokens from your Account
sets a new gas price limit for an auction and can only be called by the contract owner
returns the information of a ticket for a given address
sets a new multiplier for the rarity of items on a feed
sets a purchaser to the whitelist with a specific zone code
retrieves and returns the current stage of a process or operation
"TMXGlobalToken is used to initialize the configurations for a new Nuru Tokenpass TMX Global Token, including setting the cap_token, initial_balance, tokenName, tokenSymbol, and decimalUnits"
sets the crowdsale bonus percentage and its minimum
allows users to receive an airdrop as long as the total supply plus the drop amount does not exceed the actual cap
allows the owner to withdraw a specified amount of fees from the contract's collected fees pool to an approved wallet address
"""The function buys tokens with a market order using the maximum possible amount"
sets a new start time for ICO stage 3 and emits an event with the old and new values
checks if a given address (_addr) owns a specific base (_base)
allows the crowdsale owner to withdraw any specified amount of Ether from this contract at any time
subtracts a specified 'amount' from the balance of the message sender and adds it to their 'burnedTokens'
retrieves the total amount of owed token ever repaid to a lender for a specific position ID from the contract's state
"pauses a range of player contracts, given by their indices in the `playerTokenContracts_` array, if they are not already paused"
"takes in two parameters - a `uint16` and an `address`, both of which are optional"
"""The function 'pushVendor' adds a new vendor to the list with specified name and direction"
"adds a new address to the whitelist, which is accessible only by the contract owner"
returns the maximum deposit allowed based on the current investment total
"sets the start time to the current block timestamp, calculates an end time based on a predefined period (CROWDSALE_PERIOD), and sets the crowdsale status to open"
retrieves and returns the balance of a given address from the `balances` mapping
unreserves a token for an investor at the specified index in the array of unknown investors
returns the total count of tokens purchased in all Sale periods
checks if a purchase is within the private sale period and has a non-zero value
parses a JSON array and returns the timestamp of the first transaction as a number
checks whether the current time is greater than or equal to the start time of a crowdsale
allows the contract's owner to drain any remaining tokens when the sale is closed
"checks if the investment is greater than or equal to the minimum contribution and returns true if it is, otherwise it checks if there's enough balance left for a minimum contribution and returns true if there is"
"adds airdrop participants to the smart contract, provided they are not empty and do not exceed the address limit"
transfers tokens to a specified address if the value is not zero and the recipient exists
sets the balance of a given sender to a specified value
calculates a bonus based on the input value 'y'
is a public view function that returns the total supply of tokens
sets a new winning chance for the owner of the contract
removes a node from a linked list and returns the removed node's value
is used to mint non-for-sale NFTs
checks if a manager can perform an action based on their enabled status and permission level
transfers tokens from the sender to the contract before placing a sell order for them
in the smart contract allows only the admin to register a new address if it is not zero and has not been previously registered
"onlyAdmin checks if the sender of the transaction is the sale admin, and if not, it reverts the transaction with an error message 'sender is not admin'"
retrieves the balance of each resource in a wallet for a specific address
"checks if the message sender is the main player, and if so, sends the collected fee to the main player"
retrieves referrer and referrer reward information from the registrar for a given artist's address
allows an external caller to send Ether (ETH) to the smart contract from their wallet
checks whether a given address is an investor or not by iterating over the 'investors' array and comparing each element with the input address
in AfriHealth Coin allows an approval for a specified amount of tokens to be spent by another address
retrieves the invitation reward balance of a specific member in the smart contract
"checks if the depositor's message value is greater than or equal to etherLimit and if so, it adds the deposit amount to the sender's balance and emits a Deposit event with the sender and their deposit amount"
is used by Oraclize to return the value of a PushData API call
"sets a transfer limit for the sender of the message in a mapping named ""transferLimits"""
allows the Hydro API to sign up official applications
retrieves image metadata from a mapping array and returns it as a tuple of values
retrieves and returns the number of reserved tokens for a specific group
sets the token URI for a given token ID and reverts if the token ID does not exist
adds interest to a loan at the given index if its status is 'lent'
changes the address of the escrow
returns the current total supply of a token in the Ethereum blockchain
returns the price of aToken in wei
creates a new StandingOrder contract and returns its address
increases the approved amount to spend by a specified value for a specific spender address
checks if the Pre-ICO crowdsale event has ended based on the current time compared to the predefined end time
retrieves the owner's address from a given name
"The fallback function in this smart contract is an external function that accepts Ether from any sender and calls the ""acceptPayment"" function with the sender's address as a parameter"
initializes a presale contract with specific parameters
checks if a certain target has been reached in a smart contract
allows the contract's owner to set a new minimum bet for a Japanese game
retrieves a specific token contract from an array of registered contracts
sets the state variable `isFrozen` to false if the caller is an admin
retrieves and returns the balance of a particular account
"""The function 'distroyIssuerToken' subtracts a specified amount from the issuer's token balance and total supply"
collectToken allows a contributor to collect all tokens allocated for all periods after the period deadline
allows users to withdraw ETH from the contract and transfer it to a bankroll
allows the manager to update the quick buy path
"extracts the price of a specific currency from an Oraclize response string, returning it as a string in USD"
transfers tokens from one address to another if the allowance is sufficient and there are enough tokens in the sender's balance
allows the owner to mint DRC tokens from several specific wallet addresses
"returns the current amount of segments based on the number of blocks passed since a certain initial block count, and the current cluster multiplied by 1000"
mints a certain number of bounty tokens to a specified beneficiary if the crowdsale is active and the total supply does not exceed the maximum limit
converts a uint8 to a byte
checks if the current contract is a mint agent and also if it's the release agent for a specific token
generates a pseudo-random number between 1 and 20
shifts a bytes32 left by 'n' positions
checks if the current time is past the end time or if the number of sold tokens has reached a hard cap
allows the Hydro API to link to a specific token address
"withdraws funds from the CashReserveFund to the owner's wallet, but only if the accumulated amount is greater than zero"
checks if a given token is present in an array of mounted tokens
"verifies that all the requirements to transfer are satisfied, including the destination not being a null address, tokens having been released for sale, and the sender's tokens not being locked in a timevault"
adds a token to the list of bunnies owned by an address and emits an event
checks if the contract is in an Initial Coin Offering (ICO) period and returns a boolean value accordingly
subtracts a specified amount from the balance of a given address and updates the total supply
is a public view function that returns the timestamp of when the presale ended
"returns the sum of the total rewards for BTC, ETH, and LTC coins in a DApp"
retrieves the current RTE balance of a bonus token vault
checks the current status of a crowdsale and returns whether it is open or closed
charges a transfer fee for non-owner addresses and applies it to the balance of the address
"is named ""name"" and it does not take any parameters"
"returns the total supply of ERC721 entities in a smart contract, which is one less than the number of cards"
"This Solidity smart contract function allows the owner of the contract to call a method named ""unlockToken"" on an instance variable named ""token"""
allows the contract's owner to terminate the contract using the `suicide` keyword
adds a list of new investors to the investor list and approves all
allows depositing funds into another account for services that you wish to not hold funds and not having to keep refunding after every transaction and wasting gas
allows the owner to mint new tokens up to a certain limit
returns the number of diamond caps produced so far
takes a parameter of type uint and returns a value of type uint
"allows users to claim their tokens or return their investment based on a boolean input, with certain conditions and fees"
sets the beta period and sub-developers for the CryptoPhoenixesCivilWar
allows the owner to add a specified address to a whitelisting
"calculates the amount of tokens and bonuses based on investment value in wei, lockup period, and sold tokens"
The `addEth` function is a public method that accepts no parameters and does nothing
is used to create a token and mint it to an owner if the sender of the transaction is the auction contract
is a public function that can only be executed by the contract's owner
"checks if the caller is the contract's owner and, if so, sets a flag indicating that minting has stopped"
"refunds a transaction if the state changes, otherwise it reverts the transaction"
converts Wei to tokens based on a predefined course
"checks if a message value is greater than zero and then calls the ""Deposit"" function with the sender's address and the message value as parameters"
allows the owner to update the gas price limit
checks if an address is a valid contributor
reduces the freezing time of a specific unicorn by burning tokens and subtracting from its freezing time
returns the minimum and maximum range of stats a given class ID can have from the mapping `classIdToClass`
multiplies two unsigned integers and checks if the result is correct
checks if a given address (_addr) is whitelisted
sets a minimum amount to be transferred in this contract before starting the distribution
sets a new treasury address and can only be called by the contract owner
sets the token contract address for a specific owner
"allows the owner to send Ether to the token contract, which is used as a dividend payment mechanism"
retrieves the ID of a registrant from their address
"in Solidity is used to close a specific window, deactivate it and transfer the contract's remaining Ether balance to a specified wallet address"
transfers DTH tokens from a teller's balance to the receiver if they have a non-zero balance
allows the owner to recover accidentally sent tokens from a specified contract address and send them to another address
returns the minimum and maximum values of a deal in ETH by calling another function `getTokenDealRange` to get the token range
starts the next phase of an Initial Coin Offering (ICO)
returns the amount currently held in escrow
is used to handle ERC223 compatible tokens
"allows the owner to burn a specified amount of tokens from their balance, reducing the total supply accordingly"
returns an array of all CrySol objects in the game
"transfers ownership for a Vanity URL by checking if the recipient and sender have no existing vanity URLs, then transferring the sender's vanity URL to the recipient and emitting an event"
allows a partner to purchase Wanchain tokens if they have available limit and the total open sold tokens is less than the maximum
transfers tokens to multiple addresses in a batch operation
calculates and returns the purchase price of the next token
fetches detailed information about a room night from the datasource and returns it along with the corresponding rate plan name
is used to add a new video game item by the contract creator
is used to release a certain amount of the target token from this contract to the owner
checks whether an event has ended and returns a boolean value indicating this
"checks if the message sender is equal to `bribedCitizen`, and if true, it sends the `collectedFee` amount to `bribedCitizen`"
returns the winning proposal and its weight after voting is finished
mints tokens and adds them to the balance of a main wallet
checks if a given promise has been confirmed by the recipient and returns true or false accordingly
is used for emergency payments and can be called externally from any address
"updates the reward amount for multiple users in a smart contract system, with certain conditions and checks"
removes a specified address from the whitelist
updates the payout for the estates owned by a specific owner in a smart contract system
takes an address as input and returns an array of token IDs owned by that specific address
"""This function initializes a new Trezor Multisig 2 of 3 contract owned by the three given addresses"
"checks if the current time is before an expiry date, verifies that the sent ether amount is higher than the current highest bid, ensures there are badges in the contract's balance, and updates the pending returns for the previous highest bidder, sets the new highest bidder to the sender of the transaction, and sets the new highest bid to the value of the transaction"
"fetches information about a token from an array of tokens based on its ID, returning the type, name, URL, and snatchability status of the token"
"returns the remaining blocks until the next expected dividend payment, considering a period of 10 blocks per dividend and a starting block number for investment"
allows only the owner to mint tokens up to a specified hard cap
can be wipe all data from the contract and disable all methods
"sets the NFT contract's information including host name, name and symbol"
retrieves and returns the state of a request identified by its ID
"subtracts a specified amount from the balance of the message sender and total supply, then emits a transfer event to burn the coins"
is an empty one that calls another function named 'buyBlockCDN'
"""The function `setICOover` sets a boolean variable `ICOover` to true and can only be run by the contract owner"
"transfers ownership of a specific token to a new owner, but it can only be executed by the current owner"
allows the owner to add addresses to a whitelist and set their remaining balance to 15 Ether
returns any registered EOS address from the original EOS crowdsale
checks if a UTXO (Unspent Transaction Output) can be redeemed by verifying a Merkle proof and calculating the hash of its associated Merkle leaf
in a smart contract cancels a bid by changing its state to 'Canceled' and adjusting the publisher's balance accordingly
changes the delegate contract address if the sender is either the owner or the minter and the new delegate address is different from the current one
calculates the basic amount of tokens to be collected given the Ether amount contributed by multiplying it with a conversion rate
checks if a given address (_funderAddr) has completed any of the previous steps in a process
transfers ownership of a token to the contract's owner if the current time is after the end time and the amount raised is less than the soft cap
checks if a given username has been claimed by checking the initialization status of the corresponding hash in the `userDirectory` mapping
bonds a `holderAddress` to an `oracleAddress` for a specific `endpoint` and returns the total bonded ZAP
allows the contract owner to add multiple addresses to a whitelist
is used to push pre-ICO tokens and requires the owner's permission
creates verified users from an old contract by iterating over all old users and creating corresponding new users
"transfers ownership of a smart contract to another address, but only if called by the current owner"
allows an admin to edit or add a game to the definedGames array
in Solidity is used to retrieve an array of addresses representing all users
allows the owner to distribute Xinfin tokens among specified addresses based on their respective values
checks whether a user is registered based on their address and the status of the whitelist
transfers a specified amount of tokens to a specific contract address and returns true if the transaction was successful
finalizePresale() is used to finalize the bonus sale and set up the main sale and public sales stages
sends a full refund of wei and resets committed tokens to zero
"transfers all funds from the contract to the owner's wallet, but only if it is called by the owner and the contract has a positive balance"
"allows the owner to approve a specific address (addr) for managing token minting, provided that minting is not yet finished"
is a public initializer that registers the ERC165 interface
"in Solidity allows for the retrieval of the remaining allowance from a specified owner to a spender, with short address attack protection"
is a public view function that returns the remaining number of bounty tokens in the company allocations
removes a signer from an entity in the smart contract
checks whether a given address is present in an array of addresses
is a fallback function to receive Ethers and send tokens
retrieves an array of token addresses owned by a specific owner
either mints ERC20 tokens or transfers them based on the boolean value of `isMinting`
allows the contract owner to set a new primary Totle address
retrieves the allowance for a given account
allows the owner to change the whitelist component address
is a public view function that returns a string representing the name of the current version
allows an owner to designate a specific address as the affiliate setter for a user
returns the total number of AceEquityToken in existence
"pauses the Pre-ICO phase of an ICO, setting its status to 'PreIcoPaused'"
transfers a specified number of tokens from the sender's balance to another address if they have enough tokens and the transfer amount is greater than zero
is used to insert a new node into a sorted doubly linked list based on the amount of stake
takes a parameter `_usd` in USD and returns the equivalent amount of tokens based on the ratio between sold tokens and the total cap
checks if the sale is closed or the message sender is the sale tokens address or the sender is an admin before transferring tokens
retrieves an array of tree IDs currently on sale
batchTransfer is used to send tokens in batches from the sender's account to multiple receiver addresses
"takes a parameter ""_index"", which is a unit type and is constant, meaning it cannot be modified"
increases the balance of a given `member` and updates the total supply by a certain `amount`
returns various information about the current round in a game
is a public method which calls another function `releaseFor()` with the message sender as its argument
reads a byte array into an Ethereum address
generates a random number based on the last block hash and a given seed using Keccak-256 hashing algorithm
"transfers a portion of the contract's balance to different addresses based on their assigned roles and percentages, with some checks for non-zero addresses"
is used to initialize a new instance of the SecurityToken contract with various parameters
is empty and does not perform any actions
"sets the maximum amount in wei that can be invested by a user, with conditions that the new maximum must be greater than zero and also greater than the current minimum investment"
in the smart contract allows a user to approve another address (`_to`) to manage a specific pixel (`_pixelId`)
transfers tokens from one address to another if the sender has been delegated a wallet and the value is greater than or equal to zero
allows the owner to withdraw a specified amount of funds from the contract and sends it directly to a specific address
"in the smart contract removes a specified amount of Beercoins from the system irreversibly, but only if the sender has enough balance"
checks if the maximum supply of tokens has been fully redeemed
adds multiple addresses to the whitelist and returns a boolean indicating success or failure
stores a commission amount for a given token address and updates the system reserves accordingly
transfers tokens to advisors from the advisor's pool and pauses the token contract during this process
"checks whether a customer's transaction of payment for MCW (Mining Contract Wallet) has been spent or not, returning a boolean value"
batchTransferSame transfers a specified amount to multiple addresses from the sender's balance if enableTransfers is true and there are sufficient funds in the sender's account
grants an advisor token to a user if they have any tokens left and their time lock has expired
checks if the sender is the PlayerBookMain contract and then adds a player name to the list of names associated with a given ID
"updates the USD price of tokens based on the ETH price provided as an argument, and it requires that the ETH price be greater than zero"
sets a new founder address for a specific ID
removes a minter role from an address
"returns the address of the last winner in a campaign, or zero if there are no campaigns"
pauses the pre-sale round of an ICO if its status is 'PreSaleStarted'
withdraws Ether (ETH) from the contract when the fund is closed and the caller is the owner of the contract
is used to set the agent for managing exchange rates
updates a compliance proof hash for an issuance return
checks and returns the staking balance of a user in the smart contract
distributes fees for multiple claims in batches
"checks if the amount of tokens requested is less than or equal to the allowed amount to send, taking into account a commission"
executes a sell order based on the input parameters and signature from the maker's signing
processes a cooldown for a child pony based on its generation and the target block
retrieves the approved address for a specific asset identified by its ID
retrieves the balance of a specific address for a given ERC20 token
transfers a specified amount of tokens to a specified address and returns a boolean indicating success or failure
"changes the `startTime` of an ICO (Initial Coin Offering) to a specified time, which can be changed manually by the owner"
transfers tokens from the super class and executes a token fallback if the recipient is a contract
returns the location pointed to by the free memory pointer
records a deposit of a certain amount by updating the value at the current time
collects pending payouts for a sender and updates the total payouts accordingly
sets up the initial state for a smart contract by calling another function to set up the initial supply
allows the contract's owner to transfer a specified amount of any ERC20 tokens mistakenly sent to this contract back to the owner
retrieves and returns the data of a specific setting identified by its ID from the `settingDatas` mapping in the smart contract
allows the owner to send AIB tokens to investors who pay in currencies other than ETH
checks if a given user exists in the whitelist
checks if a game round can end based on the current block timestamp and game's last auction time plus the remaining seconds
allows the project owner to withdraw a specified amount from the contract balance to a specific address
transfers all the balance of the contract to the address specified by the 'owner' variable when it is paused and only callable by the owner
"takes two parameters (_voteParams and _intVote), encodes them using ABI encoding, concatenates the encoded data, and then returns a Keccak-256 hash of this concatenated data"
refunds ETH to donors if the ICO is not finished or succeeded
checks if the ICO (Initial Coin Offering) is in its pre-ICO phase and returns a boolean value indicating this
"allows an owner to add a new member's wallet address to a list of addresses, which can be called from the owner's wallet only"
retrieves the `updatedVersionId` of a document from an array of `documents` using its ID
returns the amount of outcome tokens held by a specific owner in an array format
converts USD to Wei using a conversion rate and returns the result
"increases the locked amount in vestings for a specific sender if they exist, and emits an event indicating the increase"
"retrieves the metadata of a token based on its ID, specifically returning the name of the associated human"
"is only callable by the contract's admin and transfers the remaining profit to the admin, then sets it back to zero"
retrieves and returns the token balance of a specific address
is used to unhalt a contract in an emergency situation and can only be called by the owner
in the smart contract reduces the balance of a given address and decreases the total supply based on the number of option tokens
allows external parties to claim their tokens after successful vesting if they are a valid owner of tokens and the vesting period is over
"checks if the hard cap for a sale has been reached, returning true if either the number of tokens sold is greater than or equal to the total supply, or the combined fiat and ETH balance is greater than or equal to the hard cap"
allows the owner to set a new sell rate for tokens
"changes the maximum number of coins that can be distributed, but only if it is greater than zero and at least equal to the amount of coins raised"
checks if a Campaign has been sealed and can't receive funds
checks if the current time is within a specified range
returns the total wei in the contract
withdraw() is used to send profits and unsold tokens to the beneficiary if the soft cap has not been reached
is used to determine the previous node where a new node should be inserted based on a given sort factor (number of tokens)
takes a `hostname` as input and returns the corresponding API ID number from an array `apiIds`
transfers the entirety of the contract's balance to a designated beneficiary if the sender is the beneficiary and there is a positive currentBalance
sets the minimum ETH income during Window1 to a specified value
allows a user to buy tokens by sending Ether (ETH)
"allows the owner to withdraw funds from a FoundersTeamAndAdvisors account to their own wallet, but only if there are accumulated funds greater than zero"
allows a user to transfer tokens and participate in operating the jackpot while setting the net value of the transfer without including the Jackpot's reserving deposit amount and custom reserving percentage
"changes the main player's address to a new one, but only if the current caller is the main player"
"is a constructor for an ERC20-compatible token with a specified initial supply, name and symbol"
retrieves and returns the account address of the first token holder
returns the total amount of ETH a user has paid in the current round
checks if more than double the update interval has passed since the last successful price update
"allows transferring the contract ownership to a new owner, but still needs the new owner to accept the transfer"
converts a given amount in USD to its equivalent value in ETH or POLY based on the FundRaiseType
allows the contract's owner to drain a certain amount of tokens from the contract and send them directly to the owner
"Bakt initializes a new instance of the contract with three parameters: _creator, _regName, and _trustee"
The fallback function is used to receive Ether without any data or a specified function signature
"allows a minter to burn some of its own tokens if the caller is a minter and not blacklisted, and the amount is less than or equal to the minter's account balance"
is used to set up a race with specific durations for betting and the actual race
is a public view function that returns the address of the vesting token
", `markRewardsSet`, is used to set the rewards hash and initiate reward validation in a specific state transition for a master node once rewards are ready"
sets a new URL for getting world population via Oraclize
The fallback function is used to handle Ether transactions that do not match any other function signatures in the smart contract
sets the upgradeability owner of a smart contract
"""The 'enableMigration' function is publicly accessible and takes an instance of the 'IMigrationTarget' interface as a parameter"
calculates fees based on the input parameters and returns a tuple of two values
retrieves and returns the balance of a user's donation from their address
allows a user to withdraw any ERC20 tokens accidentally sent to the contract
"is used to set the default airdrop amount, which can only be called by the owner"
takes a parameter of type `uint` and returns a boolean value indicating whether the refund was successful or not
allows the contract's owner to withdraw all funds stored in the `ownerEth` variable and then sets it back to zero
sets bonuses for USD amounts in the smart contract
"checks if a given address (_addr) has a ""poweruser"" role and returns a boolean value"
in a smart contract calculates and returns the amount of Ether waiting to be sent to Bankroll
allows the contract owner to get Ether from the contract
checks the amount of tokens that an owner has allowed to a spender
transfers unsold tokens from the ICO to a specified owner account for burning
in the smart contract changes a document's visibility status to visible if it was previously invisible
returns the total supply of tokens in a smart contract
"checks if a contribution is open based on its start and end times, and whether it has been finalized or not"
takes a parameter of type `uint256` and returns the token amount according to the rate
transfers tokens to a specified address only if the contract is not paused and rejects token transfers to the contract itself
in the smart contract is used to convert a specified number of red eggs into snails for a player
"locks tokens for a specified beneficiary until a certain date, ensuring that they cannot be withdrawn before that date"
"assigns four addresses to an array named ""beneficiaryList"""
"""The function 'transfer' transfers a specified value to another address"
"allows a beneficiary to withdraw a custom amount of funds from the contract to a specified address, and updates the stage to 'Withdrawn' when all funds have been withdrawn"
returns the amount of tokens that an owner has allowed a specific spender to transfer
mints a certain amount of tokens and transfers them to a specified address
returns the address of the RareCoin contract
"unlocks a certain amount of tokens that were previously frozen, if the current time is past their unlocking time"
checks if an address is not empty and not equal to the sender's address
retrieves and returns the ID of the first redemption request from a queue of redemptions
adminEditBallotOption modifies a specific option in a specified ballot if the sender is the administrator and the ballot exists but has not been sealed
allows the contract owner to add up to 150 addresses to a whitelist mapping
"""The 'startPortalGun' function is externally callable and does not require any parameters"
checks if a hard cap goal in USD is reached based on the amount of Ether raised and the current exchange rate (ETHUSD)
verifies an account by checking if the provided name is already in use or not
The `refund` function in a smart contract allows an external caller to initiate a refund process for a specific address (`_addr`)
"changes the `ownerCut` value, accessible only by the banker of the contract"
is used to end a sale in the current round and can only be called by the contract owner during the Started stage of the sale
adds an admin to the contract
returns the current ticket price for a bet
changes the minting allowance for a specific address
allows the owner to burn a specific amount of Dexter tokens from their balance and decreases the total supply accordingly
is a constructor for the contract that stores the owner's account upon deployment
"validates if a purchase transaction can be successful based on the raised funds, time period, and the amount of the purchase"
locks a specified number of tokens for a given address if the sender or originating transaction matches the provided address
sets a 'lock' flag to an address (_to) if the caller (_from) is equal to the 'marketor'
allows a master to withdraw Beercoins from multiple users if the values are less than or equal to their current balance and direct debit allowances exist for each user
"initializes a new instance of the contract and sets its stage to ""Deploying"""
"retrieves the amount of tokens a contributor has locked in their account, but only if it's within the first batch (of 8 total batches) and the countdown date is less than or equal to now plus 90 days"
"deploys and registers an oracle for a specific proposal, ensuring it has not been deployed before"
transfers a specified amount of Obol to the Charon's boat and adds it to the total Obol value
allows investors to buy tokens for purchases in other cryptocurrencies
retrieves and returns the name associated with a given user's Ethereum address
transfers a specified amount of tokens from one address to another within the context of a tradingOpen modifier
The Fallback function in this smart contract is designed to receive ETH and send tokens back
is used to burn tokens if the `hasEnded()` condition is met and `checkBurnTokens` is false
takes an address as input and returns the index of that address in the array `devs_`
is a public function that can be called by any account
approves or rejects a setting update proposed by a Proposal TAO Advocate
can only be called by the current authority and changes it to a new one
retrieves and returns the current `OneledgerToken` instance associated with this contract
transfers any remaining tokens in the contract to a multisign wallet owned by the MIND Foundation only for the owner and can be called only after the contract has ended
calculates winnings for a given bet and percentage using SafeMath library functions
is a public view function that returns the total supply of tokens
transfers a specified amount of ACE Equity Tokens from the sender's address to another Ethereum address
transfers a specified amount of tokens to another address if the operation is successful and the sender is either in sale or unfrozen status
takes two addresses as parameters and returns the amount of wei that `transactee` has to send in order for `transactor`'s request to be fulfilled
retrieves the number of signatures required for minor transactions from a wallet data structure and returns it as an unsigned integer
sets a new renaming per character cost in wei
The `payable` function is empty and does not perform any actions
is used to approve a certain amount of tokens for transfer by the token transfer proxy address
retrieves the IDs of all unopened messages for a given user address from an array and returns them as an array
checks if the current block number is greater than or equal to a certain unlocked block for founders and throws an error if it is
retrieves information about a specific MC (Mystery Creature) from an array of constructors based on the provided index
checks if an investment is possible based on the current state and restrictions of the system
"appends source addresses and numbers to the arrays A and N, but only if they are not zero and have equal lengths"
initializes balances for a list of addresses from an old CNC chain
transfers data authority to a new owner if the caller is the current owner
checks if a contribution made by the sender of the transaction is valid based on its size and returns this information as a boolean
in a smart contract finalizes the last round of a game
retrieves and returns the block number mined by the miner for the sender of the message
"allows a director to mint tokens for the company, but only if the total supply after adding the new tokens does not exceed the token cap"
retrieves the main account at a given index from an array of accounts
allows the owner to collect ETH from the contract any number of times
"retrieves a position from the holdings array at a given index, decodes the stock key to get market and symbol names, and then fetches the corresponding position's quantity and average price"
changes the contract address of the eternal storage
generates a pseudo-random integer between 1 and 'max' using the SHA3 hash of the previous block's hash and the current block's timestamp plus a seed value
transfers funds from a user or another contract to the smart contract and calls the `tokenFallback` function of the recipient if it implements the `TokenReceiver` interface
allows the DAO to mint tokens to winners or prize funds contracts only when the current state of the crowdsale is WorkTime
"allows the owner of a smart contract to ""migrate"" to a new contract by using the `selfdestruct` function"
allows the owner to delete a committed destination address
is empty and does not perform any operations
is an empty public payable function
calculates and returns the user's share value for a specific round in a game
"checks if a given address is whitelisted and returns the pledged amount (quota), index, and level of the user"
"sets a one-time price in Wei for the contract, but only if it is called by the owner and the provided price is less than 2000 Szabo"
performs a transfer of tokens between two addresses and emits an event if the transfer is successful
changes the minimum and maximum amounts that TrueVND users can burn to `newMin` and `newMax` respectively
takes an input of type `address` and returns the total number of locks for that address from a mapping called `tokenLocks`
retrieves the `infoUrl` of a specific Chibi token from an array and returns it
"checks if a transaction can be made to buy tokens, returning true only if the current time is within a specified period and the purchase amount is not zero"
Constructor to set the latest logic address and version
retrieves the payer's address for a given request ID from the `requests` mapping and returns it
"returns the details of a team, including its name, owner's address, and current price"
"proposes a new owner for the token, but only if called by an admin"
"sets the higher price percentage for when a price exceeds or equates to a cutoff, and resets to that percentage"
refunds funds if the sale is unsuccessful and transfers them back to the sender
creates a new CurrentToken contract and sets it to pause
checks whether an ICO (Initial Coin Offering) is currently running or not
is a public view function that returns the current owner of the contract
is used to reload tickets for a user with a certain amount of ETH and affiliate ID
"named ""TotalSupply"" is a view function that returns the total supply of a token"
"checks whether the message sender is equal to the new owner, and if so, it assigns ownership to the new owner"
generates a pseudo-random number within a given range
creates a clone token and returns the address of the new token contract
"checks if the current time (`now`) is within a specified period, defined by `startTime` and `endTime`"
checks if the specified address is whitelisted
"verifies the signatures of a list of signers against a destination, value, data, and validity"
is publicly accessible and does not require any parameters
transfers collected ether into a specified beneficiary address
retrieves and returns the remaining blocks for a big promotion bonus
"computes the artist's transaction fee and pays it to the artist asynchronously, then pays the remaining fees to shareholders"
is used to retrieve the 'natural unit' of a specific smart contract
retrieves all policies from a contract and is only accessible to the owner
multiplies two values safely and returns the result
"creates a new post with the given link, sets the poster as the sender of the transaction, initializes voteCount and datePosted, adds the post to an array of posts, maps the link to the post ID, marks the post as existing, returns the current post ID, and increments the global post ID"
"changes the start time for a pre-ICO event and emits an event with the sender's address, new value, and old value"
converts a uint to a string
changes the Congress contract address for this token
is used to distribute funds among all districts when the contract owner wants to add funds
allows a cat owner to make an adoption offer for a specific cat to another address
retrieves and returns the TxRegistry contract for a given customer
in this contract is used to show the pending admin for this contract
is used to make a withdrawal from the contract
checks if a given address is the contract's owner
retrieves the buying price from a contract named `BigSisterToken` and returns it as a uint256
implements a standard transfer method that takes into account the finalize flag
returns the total number of tokens sold
"transfers all ether in the contract's balance to the contract's owner, but can only be executed by the contract's owner"
checks if the given address is a smart contract
returns the amount of unallocated tokens in a pool by subtracting the number of allocated tokens from the total token supply
returns an array of addresses representing the GUIDs (globally unique identifiers) for all initialized channels
"changes the owner's share on buying transactions to a specified value, which can only be called from the owner's wallet"
retrieves and returns the total number of deeds stored by the contract
is a public view function that returns the address of the Oraclize Address Resolver (OAR)
checks if the sum of two unsigned integers will not cause an overflow
sends received tokens to any address specified by the 'sender' parameter
is used to mint tokens for a specific address
retrieves the owner of a specific token ID from the `teamIndexToOwner` mapping and returns it
transfers Pharmcoin tokens from the sender to a specified address if they have enough balance and the recipient is not the zero address
performs a reverse stock split in a trading system
"updates the top 20 addresses with the most referred bidders and their corresponding numbers in an array, while also logging these changes"
returns the total number of tiers in a smart contract
turns off a presale offer in the contract
accepts an address parameter and handles a transaction with the provided member's address and the amount of Ether sent in the message
"is used to batch build taverns in a single transaction for specific tokens with their respective longitudes, latitudes and popularity values"
"requires a valid contract ID, checks if the contract is assigned to the participant and that it has not been signed already before signing it"
"checks if there is an open commissioner auction for a specific real-world player in the system, returning TRUE if so and reverting otherwise"
"transfers all tokens and ETH from the contract to a specified multisignature wallet, returning a boolean value indicating success"
adds a specified value to the balance of a specific address in the context of a DTH shop
transfers all tokens from a specified address to the zero address and emits a Transfer event
"retrieves the total balance of a member's account, which includes both their stake and reward balances"
creates a new instance of an application linked to the kernel and sets its base implementation if it was not already set
"allows the contract's owner to set a finalized capital if it has been initialized and not paused, with a condition that the message value must be greater than zero"
"retrieves a specific allocation for a given preminer from the `allocations` array in the `preminers` mapping, based on an index"
"extends the expiration time of a bond specified by ""_bondnum"" for ""_blocks"" blocks if certain conditions are met"
allows a deposit manager to send a deposit from their account to another address
adds locked time to a target account
"allows token owners to decrease the price of their tokens or if there is no owner, the coo can do it"
The `contribute` function is a public payable function that accepts Ether and returns an unsigned integer
allows a user to withdraw their shares from a specific coin pair in the P4D protocol
"returns the details of a share, including its company ID, owner's address, and current price"
sets a new exchange rate for the contract
returns the item category information for a given class id
"removes a specified address from the whitelist, allowing them to no longer buy tokens"
sets a token contract address and the number of available tokens
is used to add a new LAND id to an Estate and update related storage
takes an address as input and returns the number of locked tokens for that address
The `buyTokens` function allows a buyer to purchase tokens in the duration of crowdfunding if the total funds raised is less than the maximum funding goal
checks if a user has enough ether amount in the whitelisted list to buy a token
calculates the next bid amount by adding a specified value (potato) to the current highest binding bid
transfers ERC20 tokens from the wallet to a given address if certain conditions are met
"configures the ScriptExec contract with an execution admin, application storage, and provider address"
allows the contract owner to reclaim all ERC20 tokens of a specified type from the contract and transfer them back to the contract's root address
allows the contract owner to mint tokens for a specified beneficiary during a crowdsale within defined caps
retrieves the number of 'kudos' given by a specific user from the `users` mapping and returns it
allows the current contract owner to transfer ownership of the contract to a new owner
in this smart contract is used to retrieve the remaining amount of tokens that a spender can spend on behalf of an owner
mints tokens for a certain receiver only if the caller is the owner and token supply has not been frozen
sets the address of an exchange contract in a smart contract
issues a specified number of reserved tokens to the contract's owner
allows the controller to change the team token address if the campaign state is greater than 2 and the new team address is not zero
refunds tokens to a specific address and emits an event indicating the successful refund
"adds a wallet address to the list of addresses, accessible only by the contract owner"
retrieves and returns the Ace Token balance of a given Ethereum account
"adds a new tier with a given discount and available supply, only accessible by the contract owner when the contract is paused"
retrieves and returns the current points of a game's king from an array named `players`
allows the creation of new coins by increasing the balance and total supply for a specific address
allows the current signer to transfer control of the contract to a new signer
is a public function that can be called by the contract's owner to pause the contract in case of an emergency
checks if a sale is currently open based on the current time compared to the start and end times of the sale
always returns true and can be called from other contracts
returns the total number of pieces
"locks STE tokens for a specified amount and block number, with certain conditions checked before locking"
allows the owner to withdraw funds from the contract if the ICO is fulfilled and there are sufficient funds in the contract's balance
sets the minimum balance needed for token distribution in Solidity
"toggles the `topWithdrawable` status for a specific round index in the smart contract, provided that the round is complete and closed"
returns the token rate based on the tier and discount time for a public sale
returns the unlocked balance of an account by subtracting locked balances from the total balance
"sets the token price and Ethereum USD rate, requiring both to be greater than zero"
allows unofficial users to delete their account by hashing the username and checking if it exists in a directory
takes an address as input and returns a bytes32 hash of the combination of that address and a hardcoded string 'script_exec_permissions'
"is a public function that can only be called by the contract owner, and it changes the current stage to 'sale' if it's not already in the 'icoEnd' stage"
allows a winner to withdraw the entire balance of the contract's prize pot to a specified recipient
reverts any incoming Ether transfer attempts
in the smart contract allows an address to approve another address for a certain amount of eBlock Coin
mints new tokens to a specified address as long as the total supply does not reach its limit
sets the dates for a token distribution event
sets the gas price to be used for Oraclize queries in the contract
burns a specified amount of tokens by subtracting them from the balance and total supply of the token holder
"enables token transfers for a smart contract, but it can only be called by the owner of the contract and only if transfers are currently disabled"
initializes a multi-signature wallet with specified owners and a required number of confirmations
fetches the deed ID of a specified address at a specific index from an array
checks if a given address has a royalty partner in the `royaltyPartners` mapping and returns a boolean value indicating whether it exists or not
"checks if a sell operation is possible based on the given BBD (Buddha's Blessing Dollar) value and the exchange rate, returning whether it's possible and the equivalent ETH Wei value"
takes an offset and a bytes memory input as parameters
retrieves an array of past winner addresses
transfers knight ownership to a new address if the current sender is the knight's owner
"sets a boolean variable `paused` to true, which pauses the contract's operation"
"allottTokensBTC checks the current sale state and calculates tokens based on the total discount, then adds these to the respective sale totals if they do not exceed their maximum limits"
overrides the `setApprovalForAll` method of the parent ERC721Token contract to allow its functionality to be frozen in case of an emergency
allows the contract owner to collect and store prediction event participation information
can only be called by the contract owner and requires a non-zero amount of Ether to be sent with the transaction
"adds an order to a user's list if the list exists, otherwise it creates a new list and then adds the order"
retrieves a note associated with an account address from the player data
mints a new token with given tokenURI for an address
"is used to unregister a DSP (Decentralized Service Provider), return the unused deposit, and emit an event indicating that the DSP has been unregistered"
is used to release tokens to investors after the ICO
zero_fee_transaction transfers tokens from one account to another without a fee
"appends an early purchase log, checks for valid purchases and updates the total raised amount"
calculates the square root of a given number using the Babylonian method
"updates the payout for the token the owner has, considering different pools based on the kind of token (CITY, LANDMARK, or OTHER)"
checks and returns the balance of the contract in Wei
accepts ETH payments from external addresses and adds the received amount to a specific player's balance in the game
increases the number of certified assets by a specified amount (_units)
removes a specific permission for an address from the given kind in the smart contract
allows the owner to withdraw ERC20 tokens from a specified contract address and send them to another address
"creates a new currency with the specified name, symbol, decimals, and total supply"
"returns the details of the biggest dick in a list of dicks, including its name, notes, size, timestamp and owner's address"
issues bonus tokens to an investor based on their token balance and a subscription bonus percentage
allows a parent account to withdraw outstanding dividends from an hourglass contract
transfers the remaining unsold token amount to a reward pool if there is any
"checks if the current time is within a specified range (between `START_WEEK_1` and `SALE_END_TIME`), returning true if it is, false otherwise"
allows the owner to sell a certain amount of tokens from a contract
allows sending Ether to multiple addresses with different values using an explicit call method
allows the admin account to send money to a specified address
allows the contract's administrator to recover any tokens that were not claimed within a certain timeframe
changes the official address if necessary
"sets the exchange rate for a token sale before it starts, with the condition that it can only be called by the contract's owners and in the INIT state"
allows the contract owner to change the maximum bet amount
adds tokens to a user's balance and updates the total balances
sets the exchange rate of USD to Ether in a smart contract
"decreases the lock count for a voter in the `tokensLocks` mapping and, if the lock count reaches zero, it calls the `unblockAccount` function on the `dasToken` contract"
transfers surplus tokens to the GAT (Gift Allocation Token) deposit when an ICO ends
"takes an unsigned integer index as input and returns a hash of the concatenation of the index, the string ""duration"", and the result of calling the function `saleTierList()`"
changes the USD value of ETH in a smart contract
allows the owner to set a new address for the relay contract
updates the 'isVerified' status of Monetha users in bulk
"checks if the pre-ico is active or not, returning a boolean value"
"returns the total balance of tokens at a particular address, taking into account both current and accrued balances"
"retrieves information about a specific group member in a given group, including their join time and the address of their invitor"
"retrieves the ID of the last non-published pull request from a queue, if there are any"
"calculates the total resource points of a player by adding up the balance of each type of resource (bronze, gold, steel, oil, uranium) from different contracts"
"takes a single argument, an unsigned integer `_hGame`"
retrieves the EXH token balance of a specified address in the lowest denomination
transfers tokens from one address to another if certain conditions are met
The `addContractor` function is used internally to add a new contractor with a specified creation date
checks if the requestor can reveal a number and then reveals it
removes a group of users from the whitelist A by setting their addresses to false in the 'whitelistA' mapping
"fetches the maximum profit of a game, which is determined by the token bankroll return"
sets the number of tokens per ether
retrieves and returns the amount of tokens locked for a specific user
Returns the token balance of the Fees contract
allows a specified address (_spender) to transfer up to a certain amount (_value) of tokens owned by another address
is used to set the `frozenAccount` status of a given address (`target`)
"calculates fees based on the number of days between 'start' and 'end', with a minimum fee of 1 unless it is the same day"
sets a new whitelister address if it is not zero and can only be called by the contract owner
checks if the sender has created a contract and then pays a token to a specified party using an interface for a DRCT token
"checks if a token sale is paused and returns true if it is, otherwise false"
returns the total supply of a specific asset or token
always returns true and does not use any arguments
calculates the number of tokens to be distributed based on a given percentage over the total supply of tokens generated in the sale
allows a contributor to claim their BTNT tokens at the end of the ICO
"calculates the owner's cut based on the sale price of a product, with different percentages for prices above certain thresholds"
returns a list of insurance units that are going to expire within the next `maxInsurePeriod` days
sets a new value for 'total' variable if called by the contract owner
sets a new price for tokens and emits an event if the caller is either the owner or any admin
transfers tokens from a special address (teamAddress2) to an investor only after one year
"adds a new cashier account to the list of authorized ones, with the given address"
is used to set a new address as the founder of the contract
"emits an event called ""ProofRequested"" with the parameters of a transaction ID (txid), blockchain name (chain), and Bitcoin contract address (btcContract)"
is a public method that calls the contribute() function
retrieves and returns the deadline of the latest campaign from a list of campaigns stored in the variable `campaigns` using the index `lastCampaignID`
initializes an advisor vault and mints a certain amount of tokens to it
allows a user to buy KWHs against Ether and pays in Ether
allows the owner to withdraw all funds from the contract if they are not needed anymore
registers a new passport version with its logic implementation address
always returns 8 as a decimal number
transfers a specified amount of tokens from the caller's address to another address if they have sufficient balance and the value is greater than zero
allows an address to withdraw their balance from the affiliate pot
sets the maximum gas to refund when an address sends ETH to buy tokens
adds a specified amount of ETH to the balance of an address in the mapping `ethTellerBalance`
allows the contract's owner to withdraw all Ether collected by bell ringers
"creates a new snapshot of the current state, including token count and first address, and returns the index of this new snapshot"
checks if the current block timestamp is before the allocation lock period end timestamp and returns a boolean value indicating this
allows the owner to burn a specific amount of PLUTUS tokens from their balance and reduces the total supply accordingly
retrieves and returns the contract's own token amount from a specified token contract
sets new rules for the next game in a smart contract game
retrieves the real balance on Ethereum for a specific user's address
retrieves and returns the price of a specific player based on their ID
sets a new multisig address to which the received ether will be sent
"is used to end the PreICO and ICO stages, only callable by the contract owner"
sets a new lock time for an exchange operation
sets a new round index for the contract owner
allows a user to refund money for tipping another user if the last tip time was more than two weeks ago and the username is not verified
allows a user to withdraw their share of the ICO funding if they are a beneficiary and have not already withdrawn their entire balance
allows a user to place a bet on the number of tweets they will make in the next five days
takes a byte array as input and returns the first byte of that array
sponsorDAI transfers a specified amount of DAI tokens from the sender's address to the contract's own address using the transferFrom method on the DAI token contract
allows the contract's owner to transfer a specified number of any ERC20 tokens from a given address to the contract's owner
modifies the balance and total invested amount for a given address
adds a lock account to the contract by transferring Rhem tokens from the contract balance to an address
"""This function allows the owner to set a new rate for a crowdsale"
sets a new Ether to Dollar exchange rate
transfers tokens from the presale to a specified address
allows the contract's owner to withdraw coins for a marketing budget from a specified address
calculates the amount of Ether waiting to be sent to the bank roll in a contract
sets a new sales agent for a token and emits an event indicating the change
updates the status of a specific board identified by its ID
allows anyone to transfer SelfPayToken tokens once trading has started
changes the end time of the main event for an owner
freezes several addresses for a certain period of time
processes a jackpot deposit by subtracting the net transfer from the total transfer to calculate the jackpot deposit
transfers tokens from the Foundation reserve to a specified address
creates a fashion item with specified attributes and assigns it to an owner
sets the address of an ERC20 token when called by the contract owner
"changes the maximum cap of a wallet to a new value, but only if the current total paid amount is less than or equal to this new maximum cap"
generates a pseudo-random number based on the current block's timestamp and difficulty
"allows the CEO to withdraw funds from the contract, either to their own address or a specified address"
checks if an address is approved to manage all another address' pixels
sets the address of the decentralized exchange (DEX)
in the smart contract returns the remaining amount of tokens that a spender can spend on behalf of an owner
allows the contract owner to add an administrator for tokens
is a public function that can only be executed by the contract owner and sets the state of the variable 'paused' to true
transfers tokens to a beneficiary using the ERC20's transfer function
updates the token contract address in case of an update
returns the current rate of a crowdsale
"""This function allows a user to send Ether and receive a specific token"
returns the total number of CARDS in the current game
allows a party to remove their order from the orderbook if they are either the maker of the order or the contract owner
allows token transfer to a specific address
returns the number of connector tokens defined in a smart contract
allows the contract's owner to withdraw a certain amount of tokens if the current voting date is zero and there are allowed withdrawals
"is used to manually end a crowdsale prematurely by changing the state of the crowdsale to ""READY"" and can only be executed by the owner of the contract"
adds an address to a given role's list of bearers
sets a new base cap for each address before the general sale starts
"""This function removes an address from a blacklist in Solidity"
checks if a DCORP member is accepted or not
is a public method that always reverts with an error message
"updates the base tokens per ETH rate before the pre-sale, but only if the current state is not ""Waiting"""
"""The 'cancelBattle' function is used to end a specific battle identified by its ID"
is used to close a specific game with a given ID and set the result of that game
is a public view function that returns an array of bytes32 values
"allows betting on a game between two teams, Philadelphia and New England"
retrieves and returns the frozen balance of a given account
returns the current number of bets in a smart contract
"checks if the contract's opening time is valid and then retrieves three values (yearSum, daySum, and currentYear) using a separate function called `getIncentiveNumByTime`"
"takes in two ERC20 tokens and an amount of the source token as input, and returns a tuple containing the current rate between these two tokens for the given source amount, along with the current reserve"
sets the property status for a specific user and emits an event indicating the change
converts ETH wei to USD mill
is used to pause the contract if it's not already paused and can be called by any CLevel (contract level)
is a public payable function that accepts Ether (ETH)
sets the start and end times for ICO phase 4
allows the owner to approve token spending from a specified crowdsale contract
checks if the land sale is paused by the owner and returns a boolean value
returns the current number of players in a game
checks if the investor is not an owner
"returns the end date of a private sale, which is 30 days after the start time"
initializes the Delphy Token contract by distributing tokens to specified owners and setting the total supply
returns the number of bags in the smart contract's state variable `bags`
simply returns the current number of elements in an array called `allocations`
unconfirms a payment made via an investment ID and emits an event indicating the change in confirmation status
checks if a given address (_addr) is registered for a token sale
in this smart contract is used to burn a specific amount of tokens from the target address and decrements allowance
allows a merchant to withdraw funds to the specified beneficiary's address
allows the dispatcher to increase a user's balance by a certain amount
is used to receive Ether from a sender and store it in the contract's balance
"finalizationCallback is used to execute Oraclize when multicurrency finalization is calculated, updating the USD raised amount and checking if the goal has been reached or not"
toggles a boolean state variable `paused` and emits an event `Pause` with the new value of `paused`
sends a special taste package to the recipient address and updates the supply of tokens
retrieves an affiliate rate based on the input level from a predefined array `affiliateRate`
returns all the supported digital currency tokens
is a fallback function that triggers the `buyTokens` procedure with the sender's address as an argument
allows the contract's owner to retrieve all YUM tokens left in the contract by transferring them to the owner and emitting a 'Retrieve' event
takes in a parameter `weiReceived` and returns the calculated amount of CAK tokens to mint based on the received WEI value
"""The function 'auctionsSetOwner' in the auctions contract sets the owner of a house after an auction"
"retrieves specific information about a buyer from the buyers mapping in the smart contract, including whether they are overdrafted, their lifetime overdraft count, their credits, their lifetime credits used, and their lifetime exceeded approval amount count"
logs a stage event with the sender's address and the provided stage number
takes an unsigned integer as input and returns the block number when a token with that ID was last updated
is used by the owner to enable access for all users
retrieves a specific profile information from a mapping using a provided string key
allows the contract owner to modify the `endTime` variable
resets the attempt count for a given user's address
adds a new contract to the list of distribution contracts
initiateUser initializes a user's resources and map coordinates when they visit for the first time
withdraws funds from the contract after a crowdsale deadline and transfers them to beneficiaries
takes a parameter of type `uint256` and returns an amount in Ether according to a rate
"is used to unpause a PoaToken, given its address as an argument and can only be executed by the owner of the contract"
"changes the address of the `rates` contract to a new one, and emits an event indicating this change"
transfers pieces of art or tokens from one address to another
allows the contract's owner to withdraw a certain amount of Ether up to their own balance
"takes an unsigned integer as input, and returns the next redemption request ID from a queue of redemption requests"
"allows the owner to withdraw a certain amount of Ether from the contract's balance, provided that it does not exceed the current balance"
retrieves a list of animal IDs in their egg phase
changes the ETH price feed address in the EthPriceFeed contract if it's not zero
"is used to finalize the minting process, which can only be called by the contract owner"
returns the starting balance for the next campaign based on whether the current campaign has been finalized or not
adds two values safely and returns the result
finalizeIco transfers the raised funds to the target wallet if the ICO is over and the goal has been reached
returns the start time of a specific tier when provided with its number
allows a user to purchase tokens based on the current time and the amount of Ether sent with the transaction
converts an uncompressed ECDSA public key into an Ethereum address
overrides the transferFrom method from a parent contract and adds a modifier validDestination to check if _to is a valid destination address
transfers the balance of the sale and breeding auction contracts to the Core contract
checks if a list of addresses are in an array called `approvedTokens` and returns a boolean array indicating their approval status
"sets the available token balances of two tokens (ZNT and ZLT) in this contract, accessible only to the owner"
cancels a Security Token Offering (STO) contract proposal if the bid hasn't been accepted
"sets the reserve pricing for a contract, which can be accessed and modified by the owner of the contract"
"""This function removes addresses from a VIP list by the owner"
"retrieves information about a contributor's rewarded tokens, contribution status and whether the contributor is active or not"
checks whether the maximum ether cap for a presale has been reached
executes a buy order based on the input parameters and signature from the maker's signing
returns the minimum and maximum values for a token deal in tokens
allows the owner to update the gas price limit
"checks whether the current time is past the end of the loan term or not, returning true if it is and false otherwise"
retrieves and returns the number of signatures required for administrative changes from a given wallet data object
"calculates the percent variance between two values, returning 100 if either value is zero"
returns the total number of payments ever authorized even if they were canceled
returns the number of items in the registry
adds an ERC20 token to a user's token list if it doesn't already exist in the list
sets the expected start time for a bet and also calculates when betting would close based on this expected start time
"is used to set the variable `tradable` to true, which makes the coin tradable between users"
calculates and returns the total bounty by dividing a saved balance token by 100
generates a random number from 0 to the specified range based on the hash of a specific block and a given seed
returns the total supply of CTN coins
returns the bid amount of a given address
"is used to finish an Initial Coin Offering (ICO), set the status of the ICO to ""IcoFinished"", get the current timestamp, and emit a log event indicating that the ICO has finished"
takes an input of a sales agent's address and returns the deposit address for their sale contracts
sends ETH from the contract to a given address if and only if the caller is the owner of the contract
checks if a transfer transaction will be made by the user or by zero fee transaction facility provided by the owner
"calculates the required token balance based on a total price and a token rate, returning an unsigned integer of 256 bits"
reserves a Vanity URL for an owner and transfers ownership if the vanity URL is already in use
takes an address as input and returns the balance of ETH in wei that person can release from this contract
returns the difference between the total amount of Ether collected for charity and the total amount received as donation
is a public payable method that can receive Ether from Kyber trades
"mints tokens to the zero address, decreases the maximum allowed manual distribution by one, and calls the `distributeJackpot` function"
updates the address of the Bancor Converter Extensions contract
is an event emitter that emits a 'Received' event with parameters of the sender and the amount of Ether sent to this address
allows the contract's owner to withdraw a specified amount of Ether from the contract's balance
allows an external user to withdraw tokens from their held balance if they meet certain conditions
changes the tokenURI from a minted item by its tokenId
"""The 'withdrawTokens' function is publicly accessible and does not take any parameters"
retrieves and returns the number of contracts in a smart contract index
retrieves a contributors address by their unique ID (uId)
retrieves and returns the balance of a specified account
A contract attempts to transfer coins from one address to another using a specific amount
"takes two arguments (_idx and _spender), hashes them along with the string ""min_tok"" and a result of calling another function ""tierWhitelist"" on _idx, and returns this hash"
checks if the current time is after the presale's start time and if the presale hasn't ended
"takes a byte array as input and returns a Sig struct with fields r, s, and v populated from the input bytes"
"creates a new NTToken instance and sets the initial supply to 10 * (10 ** 8) * (10 ** 18), assigns all tokens to an address, and emits a Transfer event"
transfers backer tokens to the sender if they have any and their time lock has expired
retrieves and returns the balance of a specified address from an array named `balances`
retrieves information about a single investor from the `investorMap` mapping variable and returns it
"returns the offered price for one token of a bid order with the given ID, or the price of the first bid if no valid ID is provided"
"checks if the ""mantissa"" of a given ""value"" is exactly zero, returning true if so and false otherwise"
retrieves and returns the details of a specific delegate from an array
checks whether the maximum ether cap is reached and returns true if it is
allows the owner of the contract to unlock a bonus token withdrawal
"The burner function subtracts a specified amount of tokens from the balance and total supply of the sender, then emits a transfer event to signify this burn operation"
"""The function 'mintTokenRewards' is used to mint a specified amount of tokens to a specific contract"
"allows the owner to withdraw a partial amount from the contract and send it to the CJ Team wallet, updating the available ETH balance accordingly"
checks the validity of an order and returns its hash
"checks if the proposed sell value requires more ETH than currently available in the contract, and returns the difference if it does"
is used to deliver tokens and update the total amount of delivered tokens
"adds wallet addresses to a list, only accessible by the contract owner"
in a smart contract is used to accept work for a specific project identified by its ID (idProject)
allows for the addition of rewards and withdrawal of tokens for marketing contributors
sends a cryptocurrency conversion to another blockchain using Oracalize and custom Shapeshift return address
is a public method that does nothing
allows the current owner of a specific token to transfer ownership to another specified address
returns the total count of registered ZTKChecks
"returns detailed information about the current game, including status (stopped, waiting, or running), timestamp, block start, time until the jackpot ends, queue length, total invested amount, a multiplier, jackpot amount, and the last member to win the jackpot"
retrieves the current value of `unitsOneEthCanBuy`
removes transfer restrictions for given addresses by deleting them from a 'blacklist' array
approves a request for manual token swaps by adding the amount of tokens to be swapped from the holder's balance and emitting a transfer event
transfers tokens from the RetailersAddress to an investor
allows the owner to withdraw a specified amount of tokens from the reserve
in the smart contract transfers ownership of the contract from one entity to another
sets a new release manager if the token is not yet released and can only be executed by the contract owner
is used to send tokens that were accidentally sent to this contract back to a specified address
"checks if the maximum funding cap for a crowdfunding campaign has been reached, and if so, updates the state of the crowd sale"
creates a loan using an array of parameters and returns the Id of the loan
allows the owner to burn all remaining tokens of a specific address
"enables or disables the purchase of a reserve token, which can only be called by the owner and does not affect selling functionality"
adminDeposit deposits the origin token from a private token to a specified depositor's account
"replaces an animal with a given ID in the array with the last animal in the array, decrements the count of animals by type and total, and handles the case where the replaced animal was the oldest"
retrieves the stake amount for a specific round
allows the owner to claim all vested tokens up to the current date for a specific user
calculates an index based on a given random number and the oldest artworks
is used to transfer tokens from one address to another
"returns a uint, which is the result of a calculation involving `tokensold` and `c`"
is used to get the address of the token store
extends OpenZeppelin's StandardToken transferFrom function to store snapshot
"""The 'addHolder' function adds a new token or share holder"
checks if a given address is either the 'ops' or 'admin' addresses
executes multiple order by given method id
removes a specified contract from a watch list
is used to add tickets for a user
returns the total amount of capital allocated in a smart contract
calculates a reward based on the user's holding time and returns it
simply returns the current mining target in Ethereum
"takes a `bytes32` argument, `_blockhash`, and returns the corresponding token ID from the mapping `blockhashToTokenId`"
generates tokens for a specific owner with a certain amount
retrieves a list of IDs for animals with pending costumes
accepts an address and a uint256 as parameters and returns a uint256
returns the total supply of ECH tokens
"checks whether a user has already contributed to an investment and returns true if they have, otherwise it returns false"
retrieves information about a specific round's investment by index in a group
retrieves and returns the token balance of a specific user
updates the signed deals count of Monetha users in bulk
is a public and constant one that returns an unsigned integer of 32 bits
checks and returns the balance of presale tokens in a presale contract
_burn is used to burn a specific token
in an ERC20 contract is used to check the balance of a specific account
"calculates the block subsidy for a given block number, considering halving intervals and maximum halvings"
allows the owner to pause or unpause an Initial Coin Offering (ICO)
sets an affiliate for a receiver and then buys a cozy
"transfers a specified amount of tokens from one address to another if the recipient is not zero, the sender has sufficient balance and allowance"
"unlocks a user's already locked tokens, and can only be invoked by the admin"
allows the contract's owner to reclaim any remaining tokens after a sale is over and tokens are unpaused
returns the position of an item in a list when given its ID
sets the limit for LANDs per bid and can only be executed by the owner
accepts ETH transfers from senders and treats them as contributions
returns the total number of transactions in the smart contract
calculates the amount of owedTokens that will be borrowed for an increase in a position at a specific time
allows an owner to purchase tokens and sends them directly to a specified address
sets a new receiver for contract donations and can only be executed by the owner
"retrieves the total balance associated with a given request ID, including the main payee's balance and any additional sub-payees' balances"
retrieves the ballot text for a specific poll from an array of polls based on their IDs
"in Solidity is named ""getTokens"", it's a public view function that returns an array of addresses and an array of unsigned integers"
sets the Fundaria pool address
"sets the BNT converter's address to wherever the contract registry currently points to, accessible only by the owner"
transfers a specified amount of tokens from one address to another
"calculates the reward in Ether one will receive for burning tokens, based on their proportion to the total supply of tokens"
transfers the mint key from the current owner to a new address
processes all ETH received and credits SBI tokens to the sender according to the current stage bonus
"revokes an earlier Issue Offer for a specific address, deleting the offer amount and expiration time from the holder's record"
"transfers tokens to a contract, checks balances and updates addresses"
returns the address of the manager for this smart contract
"pauses selling of a pack of tokens, it can only be called by the owner and if selling is not already paused"
is a public view function that takes an address and a reason as parameters and returns the number of unlockable tokens for that specific address
"retrieves the quantity and average price of shares held for a specific stock key from the `positions` mapping, returning these values as integers"
"sets the minimum contribution for a specific round in a sale, with a condition that the round must be less than or equal to the provided round"
creates a promotion team with a specified name and assigns it to an owner's address
allocates a restricted token to a partner with a specific ID
returns the current XRM to ETH rate based on stage
is used to receive Ether from a relay address
transfers frozen tokens back to the specified address after a year from contract deployment
"transfers ownership of the mintable token to a specified wallet, and sets the crowdsale as finalized"
The `updateEtherBalance` function updates the ether balance in a crowdsale contract
sets a special bonus for a selected address with a given percentage
releases locked tokens owned by multiple accounts specified in an array of addresses
takes an input `value` and returns the amount of ONL tokens received for a given ETH value
in a smart contract returns the address of the Multisig Wallet contract
"returns the available amount of bonuses to withdraw for a selected distribution date, considering the user's shares percentage in that period"
allows the owner to withdraw a specified amount of tokens from an ERC20 contract and send them to a recipient address
"sets the callback gas limit for a given currency in the settings, and emits an event indicating that the settings have been updated"
performs a sell order at an exchange and returns the amount filled in this order
"is open to the public and can be called by anyone, accepting Ether (msg"
"ShimanchuCoin initializes the coin distribution among the founder, AirDrop, and LongTerm with specific percentages"
"sets the API calls contract address to a new value, provided it is not zero"
"allows the owner to withdraw Ether from a specified address, provided it is not zero and the value does not exceed the contract's current balance"
"is marked as 'external' and 'payable', meaning it can be called externally by other contracts or users and accepts Ether payments"
retrieves the token ID at a given index of the tokens list owned by a specific address
is a public view function that returns the total number of bounties (uint256)
changes the extension status of a bond specified by its number (_bondnum)
returns the amount of Beercoins that a user can spend on behalf of another
"returns the ID of the current tier based on the block number, or zero if before start or last if after finished"
returns the genome of the active hero for a given owner
is a public view function that calculates and returns an event hash as a bytes32 value
"checks if a purchase is valid based on time period, value of the message, token limit, minimum purchase amount and sender's balance"
retrieves the amount of a token that is locked for a specific address (_simu_) based on certain conditions and time periods
allows a user to recover their pending funds by sending them back to the owner
is an external function that calls the `buyUcCoins` function
The `totalSupply` function in a smart contract is used to get the total number of tokens that have been minted
checks if a sale is currently active based on the current block number and the start and end blocks of the sale
will return all of the details of a Video Game Item character
"allows an address to have admin power to use the ""transferFrom"" function by setting a value in the 'allowed' mapping structure"
checks if the balance of CBC tokens held by the message sender is greater than or equal to 10
transfers a specified amount of tokens from the salesAgent's address to another address if the sender is the salesAgent and there are sufficient tokens in the vault
transfers ownership of a given token ID from one address to another
"distributes bonus tokens to addresses in the provided list, but only if the sale is not active"
sets the initial price of a block and emits an event `ChangedInitialPrice` with the new price as its argument
checks if an account is frozen or not
is used to close the presale period in a crowdfunding contract
refunds tokens to a specific address and all voters in the voters array if they are not zero addresses
transfers the entirety of a contract's balance to its designated beneficiary if the sender is the beneficiary and there is a positive current balance
"The fallback function in this smart contract is used to handle Ether contributions to a crowdsale and calls the ""buyTokens"" function with the sender's address as an argument"
allows a depositor to make a deposit for a specific deal
in this smart contract is used to get the balance of a specific owner's AfriHealth Coin
allows the contract owner to transfer ownership to a specified new owner
takes a parameter `_type` as an unsigned integer of 32 bits and returns a string
in Solidity is used to retrieve all tracked broker addresses
The fallback function is used to buy CHR tokens
in a smart contract does not have any functionality as it is currently empty
returns the total amount of early purchases in CNY from a smart contract
allows the contract's owner to withdraw a specified amount of ether from the contract
"calculates the total number of carrots purchased from four different types of horses (H1, H2, H3, and H4)"
changes the state of the sale in a token crowdfunding contract
increases the total supply of a token and assigns it to the contract's owner
checks whether the sum of tokens they're about to purchase and those already sold in a specific stage exceeds the token cap for that stage
takes a price as input and returns the amount of available tokens on the level with that specified price
calculates the maximum amount of vested tokens that can be withdrawn by a user based on their disbursement schedule and already withdrawn tokens
sets a minimum balance for accounts in the smart contract
allows token holders to withdraw their dragons after the timelock expires
converts a uint256 to a string
"calculates a bonus based on the value passed in, but only if the status of the ICO is PreIcoStarted"
sets the initial gas price limit for a fundraiser
__min__ compares two unsigned integers (_a and _b) and returns the smaller one
extends the behavior of a parent contract by requiring that it not be paused before a purchase is validated
mints tokens for funds in an Initial Coin Offering (ICO)
retrieves the terms contract address of a given issuance from the registry using an agreement ID
rejects a proposal if the sender is a board member and the proposal status is pending
sets the addresses of two tokens involved in distribution and then calls a method to set available tokens
in the smart contract allows the owner to set whether a specific spender can transfer tokens before trading has started
"returns a subset of the holders array, filtered based on whether they have a positive balance or not"
"upgrades the converter to the latest version, can only be called by the owner, and requires the owner to call ""acceptOwnership"" on the new converter after the upgrade"
allows the owner to withdraw all funds from a smart contract and transfers them to a specified address (wallet)
internally distributes tokens for non-vesting reserve wallets
approves a specified amount from the sender's balance to be spent by a specific address (spender)
retrieves the token balance of any Ethereum address
"returns the ID of a burn lot, the owner of the burn lot, and the amount of primordial tokens in the burn lot at a given ID"
"sets the `isEditor` status of a given address to false, effectively revoking their editor rights"
retrieves the Creator TAO Setting information for a given ID from a mapping of such settings
checks if a specified amount of tokens can be used based on the unfreezed amount in a specific wallet for an owner
allows a bulk withdrawal from the contract to multiple addresses specified in an array
retrieves full investor information by address from the storage and returns it as an investor object
returns the size of an array named `uuids`
allows the owner to withdraw their accumulated dividends from a smart contract
"returns a discount rate value, but only if the discount is available and below the limit of discount tokens"
checks if the goal or time limit has been reached and ends the campaign
"changes the start time for a pre-ICO, with certain conditions"
transfers a specified amount of any ERC20 tokens to the contract's owner from a specific address only if called by the contract's owner
will return all of the details of the characters
is a public view function that returns the number of articles in the contract
allows token holders to cancel a redemption request they previously submitted using the `requestRedemption` function
"changes the minimum NAC (not specified in the code provided) to a new value, given that this new value is not zero"
"allows a specified address to spend a certain amount of tokens on behalf of the caller, but only if the contract is not paused"
The `isblockSetMintTimeLimit` function in a smart contract checks if the minting time limit has been set
allows the contract to withdraw ether from its own address and transfers it to the 'dealer' if the bet is closed
"ForegroundTokenSale is a constructor for the Foreground token sale contract, which takes four parameters (_publicTokenCap, _tokenFloor, _tokenRate, and _foreground)"
"retrieves and returns the ""buyOutFeePercentage"" from a storage object 's'"
allows the admin to grant administrative rights to a specified address
takes an Ethereum wallet address as input and returns the associated user id (UID)
allows a new manager to accept a management transfer by checking if the sender is the designated new manager
simply returns the current total prize pool size
allows the owner to initiate a crowdsale from the time of execution until a specified `stopTime`
changes the voting rules by setting the debating period to a specified number of days
"""The function buys tokens for the sender"
can be called by the owner to set `ico_ended` to true and then call the `burnTokens` function
is an external function that returns a boolean value indicating whether the offering was successfully started or not
returns the current balance of a user if they are the owner of the address asking
retrieves metadata for a token by its ID from the `tokenOwner` and `tokens` mappings
is used to invalidate a crowdsale purchase if something is wrong with it
disables token transfers when Avalanche Blockchain is deployed and can only be called by the contract's creator
in the smart contract returns the number of allowance tokens for a given address
transfers the balance of a specific address from this contract to an upgrade agent and updates total supply values
retrieves the permission address of an item at a given index from a specific kind in the `permissions` array and returns it
"is used to join a specific community, which will then allow you to credit or debit your AVIV and VIP balances"
allows the contract's owner to transfer a specified amount of an ERC20 token to the contract's owner in case they accidentally send tokens here by mistake
transfers tokens from a user's balance to their investBalance
mints new tokens and transfers them to a specified address if certain conditions are met
updates the price per message if called by the contract owner
checks if a note exists at a given pitch and place in the composition
is a public function that only the owner can call
allows for batch transfers with different amounts to each address from the sender's balance
transfers all pending Ether to the Croupier and resets the pending amount to zero
"checks the registration status of a specified address and returns its whitelist status as either Gold, Silver, or None"
creates an invitation for a user to join the platform using their public key and signature
calculates the profits by subtracting the threshold from the balance
"is used to add an address to a blacklist, which can only be called by the owner"
allows the contract owner to set a new pre-sale rate for the crowdsale
allows the owner to update token information such as its name and symbol
transfers the remaining tokens of a crowdsale to the TeamWallet account only for the owner and can only be called after the crowdsale has ended
checks whether a specific sha256 hash has been used by another artwork before
reads and returns the name of a token from a specified storage address using an execution ID
refunds a specified amount to a buyer if the sender is the owner and the buyer has made a purchase
The fallback function in this smart contract is empty and simply throws an error when called
allows the owner to update the Minimum required Wei
retrieves the purchase records for a given address
"takes an `address` as input and returns the number of ""frozen cells"" associated with that address in the `frozenBalances` mapping"
is used to burn all remaining tokens left with the sales contract after the sale has ended
transfers a token to any address the admin wants to
allows the current owner to grant control of the contract to another account by adding it to an array of owners and emitting an event indicating that ownership has been granted
retrieves and returns the balance of a given address
"commits dividends for a specific address before transferring tokens, updating the last dividend period and calculating the balance based on shares and dividends"
"allocates tokens to a beneficiary based on the stage and rate in Euros, while also updating total sales and tokens by stage if it's not pre-sold"
allows the current contract owner to change the ownership of the contract
checks whether a given address is a manager
returns the amount of tokens that a user can purchase from the smart contract's balance
returns an array of owner addresses that confirmed a specific transaction
is used to allocate tokens to a crowdsale or early purchaser from the crowdsale share
allows the contract's owner to withdraw all tokens from the contract and send them back to the owner
sets the TAO Family Address and requires that it is not zero
sets the address of the INNBC token
takes two unsigned integers as parameters and returns the maximum value between them
Assign a role to a user globally.
Returns the length of the balances array for a swap.
"A dispense feature to allocate Jcash tokens to specific addresses, with the calculation based on the token count, restricted to be called solely by the owner."
Update ether costs for various types of visits.
Series of getter functions for contract data.
Withdraw Ether from this contract to Multi-sig wallet.
"Convert an array of numbers to compressed data after checking the round and draw, emitting transaction details."
This function retrieves the total number of tokens currently held in the contract's vault.
"The function ""transfer"" checks if the transfer recipient is the contract itself, in which case it swaps tokens, otherwise it calls the parent contract's transfer function after a validation check."
Return total number of collections.
Called just before the token balance update.
Check if the input day is present in the locked days.
Return arbToken and low bytes from an HGame.
Summarization: Returns whether the token is locked.
Update amount required to pass KYC.
"The function ""canDeregister"" checks if a voter can be deregistered based on their last access time being at least 7 days ago."
Function to add multiple addresses to whitelist can only be called by the owner's wallet address.
"Ownership transfer function in the contract, allowing the current owner to transfer ownership to a new address, updating balances accordingly."
Use this function to set memberId for the member.
Permanently ends migration to prevent abuse once it is considered complete.
Allows the requester to cancel their adoption request and receive a refund of the specified price.
"Update minimum Ethereum investment value with admin privileges, including an event trigger for the update."
"The function allows the owner to set the tradeable status of the asset, including security checks for ownership, validity, and non-splitting."
"The function allows the owner to transfer the contract's ETH balance to a specified address if conditions are met, ensuring the ETH is sent to the designated address."
Calculates the bonus amount based on the contribution date.
Get available amount of tokens return uint256 Amount of unsold tokens.
Adds an approval for the specified account to spend money of the message sender up to the defined limit.
Allow the owner to burn the token from their accounts.
Called when investment was made.
Creates a deposit address for a crowdsale by deploying a new CrowdsaleProxy contract and returning the address of the proxy.
Summarization: Allowing the owner to drain tokens mistakenly sent to this contract.
Get the MC index given address.
Get the value stored of an int variable by the hash name.
Function to stop minting new tokens and return a boolean indicating the success of the operation.
"Change content data of a pixel, with a security check ensuring that only the seller of the pixel can update the content data."
Return orderPrice Price as determined by an order.
Function to check the amount of tokens that an owner is allowed to transfer to a spender.
Claims for refund if ICO finished and soft cap not reached.
Owner can stop crowdsale anytime.
Sell a specified amount of P3D for ether.
Return True if the position is now closed.
Calculate the possible seller balances for a user in specific auctions to determine the withdrawable tokens.
Returns the maximum amount of makerToken that can be exchanged for takerToken based on the provided order data.
"This default payable function restricts the gas price and data length, then triggers the function to buy HORSE tokens."
Get base information of the seasons by retrieving match times and results for each season provided in the input array.
"Set the registered wallet address to the provided address, or set it to 0x0 if no address is specified."
"Function to retrieve the seed value, with security checks ensuring the contract is upgraded, the caller is the next version, the round is finalized, and the transfer of jackpot seed to the next version is successful."
Allows users to sign up with their own address.
"Function used to change the house fee percent, where the house fee percent can only be lowered."
View the total balance of the token contract.
Burn tokens if soft cap is not reached.
Returns the storage location of the total token supply.
Return number of token proxy contracts created so far.
The function retrieves the balance of tokens held by the Doge Farm contract.
'Owner' can set start time of pre-funding.
"Function to set the information URL with a prefix for weapons, restricted to the contract owner, and returning a success boolean."
Withdraw Snowflake balance to an external address.
Ability to turn off whitelist filtering after 24 hours.
Gets the total token supply return uint256 representing the total token supply.
Get the token balance for token owner.
Triggers the sale finalization process.
Return list of top winners.
ETH transferred from owner's address function to start minting MTC.
Summarization: Returns the minimum quorum required for proposals to pass.
Signals that the sale has reached its minimum funding goal.
"The function ""getStage"" returns the current stage of the sale based on various time checkpoints."
The owner will perform this action to payout the dividend and unfreeze the frozen accounts.
CrowdSale manager is able to change rate value during ICO.
The function `receiveApproval` includes security checks to ensure it is not initialized and that the sender is the designated VRF address before transferring tokens and updating the claimedEggs mapping. Summarization: Tokens are exchanged for shrimp by sending them to this contract with ApproveAndCall.
"The function reverts transactions, ensuring that no ether can enter the contract."
"Override the ""buyTokens"" function to ensure all token minting originates from Golix."
Returns the amount of tokens approved by the owner that can be transferred to the spender's account.
"The function ""placeBid"" allows users to bid on a piece, requiring the bid to be higher than the current highest bid."
"Function to retrieve the total token supply, with a security check to ensure the contract is not paused. [Return the total token supply]"
"Get signature requirements for major transaction spends, returning the number of signatures required as a uint256."
"Function to check if crowdsale is open, with security checks for when the contract is not paused and not finalized."
Set subscription end date can only be done by Rivetz.
Upgrade evil morty in case of upgrade needed.
Get the update time for a specific board by returning the timestamp of the last update in seconds.
Allows merchant to withdraw funds to its own account.
Setting operator authorization for a token holder and returning the status of the operation. [return bool Status of operation]
Calculates the amount of tokens an investor can currently claim based on specific conditions and time intervals.
Transfer token for a specified address when not paused and not locked account.
"The function ""promoPurchase"" allows users to purchase promotional pixels for free, subject to security checks ensuring the pixel is not already owned, the promo limit is not exceeded, and the text length is within limits."
Return whether proposed owns all of the cards.
Check that the price update was requested more than the maximum interval ago.
Allow contract manager to close pre TGE.
"Refund function transfers remaining tokens to the participant and triggers a refund event after validating the balance, time limit, and token transfer, with a subsequent cleanup process."
"Security checks and validations include ensuring the bond is issued, verifying the bond's selling conditions, confirming the payment amount, checking for valid owners, and handling residue transfers back to the buyer."
This function returns the total supply of tokens.
This function returns 10 ads starting from the specified start index.
"Retrieve token balance for an account, return the number of tokens in the subject account."
Sets gas limit for Oraclize query.
Creates a checksum of the contents of the Estate.
Get number of doges since last hatch.
Function to update an animal can only be called from the owner's wallet.
Prevent sending ether to this address.
Constructor function executed on contract creation.
"WinRound function is triggered when a player fulfills the snail requirement, transferring the earnings to the winner, pausing the game for 12 hours."
Deploys a new CDPer instance and sets a custom owner for the CDPer.
Allow to withdraw ERC20 token from contract.
Overriding the approve method to include the onlyPayloadSize check modifier.
"The function ""scannedBronzeCaps"" returns the number of bronze caps scanned so far."
"The function calculates the fee pool share for delegators and transcoders based on the earnings pool data, with a separate calculation for transcoders if applicable."
Return true if the loan is considered defaulted.
Function to return the token ID of the last token issued.
Transfer sales agent permissions to another account.
Returns the terms contract parameters of a given issuance.
The function resumes the crowdsale if it is paused and can only be called from the owner's wallet.
Return true if the crowdsale has started.
Transfer referrer bonus of invested amount to the referrer if conditions are met.
Called by the owner to enable the method.
"Set the VIP rate per wei for a VIP buyer, with security checks ensuring the rate is greater than zero and the contract is not finalized."
"The function allows the direct purchase of SGDS tokens from SETITEE, incrementing balances and emitting events accordingly."
"Make it possible to send ETH to the contract with ""payable"" on the fallback function."
Summarization: Return the last dividend period processed for a specific wallet address.
"Get the total supply of tokens by calling the constant function totalSupply, which returns the variable totSupply."
"The function ""currentDifficulty"" allows for viewing the current difficulty level of the game by returning the stored difficulty value."
Process send profit in game by iterating through game hashes and profit amounts to send profits accordingly.
"Low-level token purchase logic with token calculation, price validation, fund transfer, and state update."
Owner can transfer out any accidentally sent ERC20 tokens as long as they are not the sale tokens.
Rewards the referrer from given amount of funds.
Transforms a bytes32 value from MakerDAO's Medianizer contract into the wei per USD rate.
Returns the number of betting records left to be processed.
Fallback function forward investment request to the target contract.
Register an address to a uint allowing packing in orders.
This function retrieves the total supply of the token.
Function to add an address to the controllers with the limitation that the input address must not already be a controller.
Get the start time of the crowdsale.
Checks if a specific address is frozen in the contract.
Stores the number of tokens reserved for a destination.
Returns the price and description properties of a gift based on the provided GiftId input.
Transfers tokens from an approved account after conducting security checks and validation.
Get an addresses KYC state.
"Drains ERC20 tokens in an emergency situation, transferring a specified amount to the contract owner, with a security check ensuring only the contract owner or admin can execute the function."
Override the hasClosed function to include additional logic that returns true if the remaining value to reach the cap is less than a specified minimum amount.
Returns total tokens allocated so far.
"The function `_withdraw` allows the token offering address to transfer tokens to the owner if the investor is not whitelisted, updating balances accordingly."
Owner can withdraw any accidentally sent eth.
Audit recommendation: Owner can claim any tokens that are transferred to this contract address.
Adds a set of addresses to the whitelist.
Returns a Level by its array index.
Parses n of type bytes to uint256.
"Contract constructor function to start token paused for transfer, with a security check to pause the token."
Withdraw some of the Ether to owner.
Falsely send Ether will be reverted.
We use this function to initially fund the contract.
Add the new NFT to the storage by minting it with specified details and updating relevant counts and lists.
Transfers a specified amount of funds from the contract's balance to a designated fund address.
Returns the addresses of all channel managers.
Returns how many wei an investor has invested - return Balance of the investor.
"Freeze player accounts for ""blackListFreezeTime""."
Property owners can change the clickable link for when a user clicks on their Properties.
Allows the exec admin to set the registry exec id from which applications will be initialized.
Add single address to whitelist.
"Issue tokens for investors who paid in ether by calculating bonus, adding it to the investment value, recording the total tokens issued, and minting them to the investor's address."
Return tokenPrice for the period.
Returns the net amount of live chickens owned by the caller based on the difference between total chickens and dead chickens.
Inputs: address _owner. Outputs: uint256 balance. Summarization: Return the number of tokens currently belonging to the owner of the given address.
Gets an owner by 0 indexed position.
Refund 'value' wei to sender.
Fallback function which only receives ether from the eUSD contract.
This function takes two inputs - the token amount and proposal ID - and returns the actual token price in wei.
"The function ""removeGlobalConstraint"" is an external function in the contract that removes a global constraint associated with a specific avatar and returns a boolean value indicating the success of the operation."
Get total price for minting a composition given the array of desired layers and return the uint256 price for minting a composition with the desired layers.
"The function ""setAdmin"" sets a new admin for the SEEDWhitelist contract after validating that the address is not zero and the new admin value is different from the current one."
Check the locked but releasable balance for an address.
Function that implements the transfer of tokens by token holders to other ERC20 compliant wallets.
"This function allows for checking the status of both the crowdsale and Blocklord by returning the raised amount in BL tokens, raised amount in CS tokens, total raised amount, required goal amount, and a boolean indicating if the goal has been reached."
proposalAvatar function returns the avatar associated with a specific proposal by accessing the proposals mapping using the provided proposal ID.
Function used to set the flag isRedeemed to true can be called by addresses in the approvedAddressList.
Return the address of the contract owner.
Set allowance for another address.
Buy tokens to specified wallet.
Validate if the RTI token contract is set to use the current contract as the staking contract to determine if minting is allowed.
This function distributes tokens by executing multiple TransferFrom transactions in a loop for the specified token address.
"The code snippet adds a new vineyard to a market, with security checks ensuring the sender is the CEO and the vineyard does not already exist."
Return the total number of investors in the session.
"Withdraw an ""amount"" of available tokens in the contract."
Function reverts on Ethereum transfers to this contract.
Allows owner to record a purchase made outside of Ethereum blockchain.
"Returns the remaining amount allowed to be transferred, without any security checks or validations."
Changes the active state of an item class by its class id.
Fallback function to handle Ethereum that was sent straight to the contract.
"The function ""bountyFunds"" is executed by the owner to grant bounty supply, mint tokens to a specific address, and set the remaining bounty supply to zero. Return true if the bountyFunds function has ended."
Fallback function to receive ether contributions.
Get list of all registered auditors and return an array of addresses registered as auditors along with their karma and record owners.
"The function ""sellTokens"" iterates through orders to transfer tokens and wei to buyers, returning the revenue in wei."
Mint the token to token owner.
Internal function to convert a string to bytes32.
Get subscriber dots remaining for specified provider endpoint.
Fallback function to receive ether and increment the weiAmount variable.
Mint token to one address.
Change the Veredictum backend contract address.
"The function ensures that the sell price is valid, the sender has enough balance, and there is sufficient balance in the contract before transferring Ether to the sender."
Transferring ownership from this contract also destroys the contract.
Withdraw all ether in this contract back to the wallet.
Only owner function to deliver tokens for ICO investors.
ERC20 transfer with controller callback: Overrides the transfer function to include a controller callback with security checks and validation.
Fetch a Record by its notarised data.
Get the contribution total of ETH from a contributor.
"Withdraw function allows the developer to selfdestruct the contract, with a security check to ensure only the designated developer can trigger this action."
"Function to retrieve the current timestamp, essential for automated testing purposes."
Return ZTKCheck information by supplying beneficiary address.
Sets the registry value with the live BountyRegistry.
Return the invested refundable balance of Ethereum for a specific owner.
"This function transfers a specified amount of tokens to a designated address, returning true if the transfer is successful."
Override the base transferFrom class to enforce vesting requirement is met.
Determines whether the token is unlocked for transfers.
Add data for any user by administrator.
Approve specified address to make transfers in lock up period.
Returns the ETH cost of an order.
Finalize liability smart contract assigned to this lighthouse.
Swap out TrueUSD's address lists.
Allows a new controller to be added with security checks to ensure the controller address is not 0 and not the owner's address.
Summarization: Function is called by contributor to refund payments if crowdsale failed to reach soft cap.
Order a contractor proposal and return whether the proposal was ordered and the proposal amount sent or not.
Gets the bonus in percents for the specified sum.
Owner can disable minting forever and ever.
Players may withdraw tokens after the timelock period.
Returns the total number of tokens available for sale.
"Create the managed utility token ""KATX"" with 8 decimal places."
"Setup roles for new Sgame token, including adding and removing pauser and minter roles for the new owner with internal function roleSetup."
"The function ""getContractCount"" returns the number of elements in the ""artworks"" array, providing a way to determine the count of artworks in the index."
View function that shows current token price value.
Withdraw all profit to the owner.
Get tokens balance of the doge farm.
Set prices for specific blocks.
Check if a SHA256 hash is registered.
Set size of current week tokens pool; requires the pool value to be greater than zero and can only be executed by the contract owner.
"Called by ICO operator to apply whitelist and price of the funding round, with a security check ensuring the funding round exists in the list."
Called as a sanity check to make sure we have linked the core contract.
Function to set current token price.
"The function ""setCanceled"" checks if the total valuation is less than the minimum raise or if the end time has passed by 30 days and the sale is not finalized, returning a boolean value indicating if the sale is canceled or not."
Withdrawal can only occur after deposit time is exceeded.
Called after setMigrationAgent function to make sure that a new contract address is valid.
"The function ""wcOnCrowdsaleSuccess"" is called internally when the crowdsale is successful."
Get trading token contract address.
Call this method to let the contract proceed to the next sales period.
Calculate the number of chickens owned by a specific user by iterating through the list of chickens and counting the matches with the user's address.
Changing the price by the owner of the emoji.
Presale stage 0 begin date can be set only once by the controller.
Delete phase by its index.
Allows the owner or manager to replace the current manager.
"Checks if the purchase is valid by verifying that the sale has not ended, the allowance is sufficient, the current time is within the sale period, and the purchase value is not zero."
Withdraw contributed funds if ICO is over and the soft cap has not been met.
Returns the number of tokens in the contract.
Check if two strings are equal in values.
"Returns the amount of tokens frozen in a specific cell, the timestamp at which the tokens will become available, and whether passing KYC is required to spend the tokens if the KYC flag is set to true."
Checks weiRaised value against different cap percentages and returns the corresponding bonus value.
Check if the crowdsale has reached the minimum funding goal in Ethereum.
Return the beneficiary address that will receive the campaign payout.
Returns outcome count.
"Method for unpausing token sale: The function ""unpause"" can only be executed by the owner when the token sale has started, is not finalized, and is currently paused, calling the parent contract's ""unpause"" function."
Maps the seed to the value within the execution id's storage.
"Receives a donation in Ether, determines the member's rank based on the invested amount, calculates the coins to send, and updates relevant information in the contract."
Trading limited requires the token sale to have closed.
Method to view the current price for painting.
"Function to check if a given address is an operation wallet, providing a security validation for wallet operations."
Retrieve the owner address of the given signature from the stored mappings.
Gets tokens of owner return array with token ids.
"Function to change the exchange rate based on a new rate input by the founder, emitting an event if the rate is not zero."
Withdraw stuck tokens only for owner.
Transfer tokens to another address.
Check if the given spender has enough allowance of the owner more than the given amount.
Returns whether the specified token is owned.
"ERC223 Transfer CKN Token With Data Function: Validate sender's balance and allowance before transferring tokens, ensuring secure token transfers."
Self-destruct function with fund transfer to owner after a specified time with balance check.
"The function delegatedTransferAndNotify facilitates token transfer and notification to a specified address, with an offline signed instruction, interacting with the keccak256 hashing function and external TokenReceiver interface. Summarization: transferAndNotify based on an instruction signed offline."
"Function to check if a contract is marked as a trusted one, returning a boolean indicating if the passed contract is considered trusted."
"The function ""approveAndCall"" allows a user to approve a spender and call a specific function on the spender's contract with additional data."
"Calculate the remaining tokens after deducting referral and bidder bonuses, then call a function to terminate the bonus."
Check if given address is frozen.
"The function ""startMigration"" in the contract can only be initiated by a specific entity designated as ""Migration,"" and once triggered, it sets a flag to indicate that the migration process has commenced."
Destroy the tokens owned by a blacklisted account.
Function to receive payments or deposits.
"The function `upgradePonyResult` allows for upgrading a pony result based on unicornation and target block, with security checks or validations not specified in the provided information."
Retrieve the date from which the proof is valid.
"Transfer ERC20 tokens to a specified destination address, restricted to be executed only by the maintainer."
Internal function that sets management permissions for a specific role within an application.
Remove a burner role from an address.
Upgrade Microverse's components in case of upgrade needed.
Sets a store to be used by the manager with security checks and validations.
The function `startTime` returns the storage location of the crowdsale's start time.
Mints tokens for owner and for crowdsale participants.
Converts an hexstring to bytes.
Change the gas price limit.
Return the remaining sponsored gas slots.
Function for requesting data from on-chain provider.
Sets avatar if no avatar was previously set.
Extend parent behavior requiring purchase to have minimum weiAmount and be within overall maxWeiAmount.
"Return the convert lot information at a given ID, including the ID of the lot, the address of the convert lot owner, and the primordial token amount in the convert lot."
Allows owner to set new Monetha address.
"Allow funds to be sent to this contract only if the sender is the owner or a super contract; otherwise, it will execute the applyMC function."
"This function sets up a standard crowdsale with specific start times, rates for presale and ICO tiers, and the wallet address for receiving funds."
Allows the caller to check the balance that has not been released of the input address.
Update pool cap for tier 2.
"The function ""fuelContract"" is a public function that can only be executed by the contract owner."
The function is used to mint time-based vesting tokens to a beneficiary.
"Increase the amount of ETH cap by a specified increment value, triggered by the owner, ensuring the increment is positive."
"Cancel an already published order can only be canceled by the seller or the contract owner, with security checks ensuring the asset is published and the user is authorized."
Allow to migrate to the next version of the contract by transferring a specified value of tokens to the migration agent after meeting necessary conditions.
Set minimal amount to be sent.
"The function `receiveClosePositionPayout` processes a payout for closing a position, transferring the specified amount to the closer or position owner in either held tokens or another specified token."
Internal function called to actually save the permission.
Function to retrieve the balance amount of a specific address.
Transfer function with security checks to ensure sender has sufficient balance and amount is greater than zero before transferring tokens to another address.
Update available IOU to purchase.
Updates token fee for approving a transfer.
Set the exchange rate only if the sale is not finalized and the rate is greater than zero.
Pay all bonuses to all investors from last round.
"Insert a player's address into an array, automatically increasing the array size if needed to accommodate new entries."
Allow the contract manager to transfer tokens from a specified address to the sender.
Owner can salvage ERC20 tokens that may have been sent to the account.
"This function facilitates a token transfer process where a portion of the transfer amount is reserved for a jackpot, with the owner of the funds becoming a participant in the jackpot if the transfer meets certain conditions."
"The function ""adjustNextTranche"" allows the owner to set new numerator and denominator values for the tranche, with limitations that both values must be greater than zero. Adjust tranche for next cycle."
Logic for pricing of deeds.
"Function to pay dividends to investors, including security checks to ensure the availability of dividends and prevent overflow."
Set affiliate rate for level with security checks for ownership and affiliate status.
ComputeMyEggs function calculates the total eggs owned by the current player.
Transfers the ownership of an NFT from one address to another address.
Burn tokens which are not sold on the previous stage.
Execute a token transfer of the full balance from the forwarder token to the parent address.
Tells the address of the current implementation.
Internal function to clear current approval of a given unicorn ID.
Allows market creator to close the markets by transferring all remaining outcome tokens to the creator after conducting security checks for each outcome token transfer.
This contract does not accept ETH.
Pay dividends internal with value.
Claims the ownership of a given unicorn ID after validating the allowance from the sender.
Return information about how much DTH the teller has staked.
Called by the owner to destroy contract.
Returns tickets numbers for the current draw in the possession of the specified address.
Owner can send ether balance in contract address.
"Owner can delete an existing entry from the list of registered exchanges, ensuring the entry is valid and securely removed."
Send tokens to the array of beneficiaries by owner.
Called by the owner to set a new exchange rate.
Returns the number of reserve tokens.
Allow updating currency exchange rates even if time of exchange rate isn't known.
Returns true if the game is in waiting mode.
"Callable by other contracts to control the economy, this function increases the weed quantity in a specific district within the DopeRaider game."
Sets the amount of Kitten Coins required to hold for eligibility to receive holder rewards.
An account can unlock their 2-year locked tokens 2 years after the token launch date.
Returns the amount of leap years before the given date.
Transfer the same amount of tokens to multiple beneficiaries.
Return bool True if the tokens raised are bigger than the goal or false otherwise.
Get data relating to escrow from the specified index in the escrow ledger.
"Initialize relevant crowdsale contract details including beneficiary address, start time, deadline, reward token contract address, crowdsale cap, and finalization status."
Refund funds to the origin address if the KYC is approved.
Sets the authorizer contract if the crowdsale hasn't started.
Validates parameters and starts crowdsale called by CrowdsaleController.
Allows token sale with parent token.
function to return the information of a single user.
Update Marriage status only if both partners have previously voted to update the prenup.
Return the id of the owned active token exchange.
"Increase the amount of tokens that an owner allowed to a spender and return whether the approval was successful or not, with a validation check for payload size and a requirement for the value to be greater than 0."
Returns the location of a provider's list of registered applications in storage.
Function to revert eth transfers to this contract.
Summarization: Distributes tokens based on provided lists of wallets and values.
Get Associated TAO Setting info: Retrieve and return the associated TAO setting details based on the provided associated TAO setting ID.
Update of reservedWei for withdraw based on different stages and time conditions.
This function will return only the DBZ owner address of a specific hero.
Accepts incoming Ether transactions.
Burns the remainder of BBY owned by this contract MINUS locked tokens.
Returns the total number of snaps stored.
Create new instance of token contract.
"The ""cleanup"" function, accessible only to the owner, ensures that the ICO is complete and at least 60 days have passed since the end time before transferring the contract's balance to the wallet."
Return address: The address of the contract owner.
"Burn specified number of GSCP tokens, ensuring the owner's balance is sufficient, updating the total token supply, and emitting a Burn event."
"Inputs: `_wei` (amount in wei), `stage` (current stage), `price` (price of tokens in current stage). Outputs: `tokens` (amount of tokens to be received by investors). Summarization: Return tokens investors are due to receive."
"The ""destroyContract"" function should only be called in case the contract may need to be destroyed."
Summarization: Called to indicate that a commissioner auction was canceled.
Owner can send tokens to specified address by minting a designated amount.
Get Royalty amount for given account.
A convenience function to disburse multiple payments in a single transaction.
"The function ""migrateByAdmin_DQV"" takes an array of inputs, processes migration transactions between contracts, and handles payment methods using different tokens or balances."
Get manager for permission: Return the address of the manager for the permission.
"Transfer the balance from the token owner's account to the designated account, ensuring the owner has adequate funds for the transfer, with the allowance for zero-value transfers."
Transfer tokens to specified wallet.
"Calculate the amount of tokens that can be obtained from a given amount of funds, considering a fee if applicable."
Remove the address from whitelist.
Setting the release time for a specific user's lock with security checks for the holder's address and the release time being in the future.
sets the neighbour reward percentage and emits a 'ChangedNeighbourReward' event
initializes an auction with a given name and duration in seconds
checks if transfers are enabled before allowing a transfer and pay operation
adds the transaction's origin's bonus ownership to a mapping if the sender is the `fundariaTokenBuyAddress`
checks if a given signature is valid for a specific hash and belongs to the 'bouncer' role
checks if the current lot event in a crowdsale has ended
"sets a new period for staking in the contract, accessible only by the owner"
verifies the signature of a user for a specific game using ECDSA
burns a specified amount of VenusCoin tokens from the owner's balance and decreases the total supply accordingly
removes an address from the whitelist
claims unclaimed token amounts for a given token and payee
takes a parameter `page` of type `uint256` and returns an `address`
sets a specific address' access to a given role to false in the smart contract
allows the current contract owner to transfer ownership of the contract to a new address
"allows anyone to send Ether (tokens) to the contract address with at least 200,000 gas"
always returns true if the crowdsale has been successfully completed
pauses the crowdsale and sets a flag indicating it is paused
"allows the investor to retrieve their tokens by transferring them from the contract's balance to their own address, provided they have a non-zero allowance for this action"
"is a public view function that takes an address, a bytes32 value and a uint256 time as parameters"
Token owner can claim ETH from ICO sales.
Perform the actual transfer without any condition checking.
[Need to check these params before start business] - Ensure that specific conditions are met before conducting transactions in the contract.
This function allows distribution by the owner before the actual public sale starts.
Transfer ownership of a Property and reset their info.
Allows the owner to execute the token's destroy function.
The function determines the current stage index and switches to the next stage if the end date of the current stage has passed.
The function calculates the amount available for partial release based on the current stage and total freeze amount.
"The function ""Approve"" checks if the contract is finalized, verifies the recipient and amount to transfer, and allows manager votes for the action."
"Set discount bonus for the game, requiring the sender to be the administrator."
Gets number of redemptions done on a specific address.
The fallback function is utilized to receive funds and calculate dividends.
Freeze multiple accounts from making any transfers.
The provided function is a simple fallback function that reverts any incoming transactions.
"Getting the SHPC from the contributor after specific conditions are met, including the end of the sale state, existence of the wallet, and eligibility for receiving coins."
"The function ""getDebitNonce"" allows users to view and retrieve the next debit nonce for a specific wallet ID stored in the contract's state."
Return amount of tokens left for participant with cap.
"Fallback function for sending ether to increase the casino bankroll, with a security check for onlyOwner access control."
"The function ""setEconomyParameters"" is used to update all the parameters of the economy in one go by setting new values for minimum card price, initial card price, purchase premium rate, hourly value decay rate, owner and card take shares, and platform fee rate."
Authorize a casino contract address to access the funds.
"Tells whether an operator is approved by a given owner, returning a boolean value indicating if the operator is approved."
Function to handle callback calls to contract.
Get the factory address for a specified country by returning the address of the country's factory.
"The function ""standing"" returns the current standing status of the contract."
Get 10% of the current prize fund as the jackpot amount.
Log contributors and their contributions.
Transfer dev tokens to vesting wallet.
Transfer tokens from the marketing address to a specific investor.
Get user specified query of request.
Set current stage of campaign manually.
Sets the amount of gas allowed to investors.
Check Eth balance of this contract.
Returns wei invested by specific amount.
"To transfer tokens by proxy, the function interacts with the ERC20 standard external APIs."
Return returns the claim ABI solidity method for this claim.
Internal function to clear current approval of a given token ID.
Uses transferFrom on the DAI token contract to send DAI from manager to evaluator.
"The function ""getNoteLine"" retrieves a line of notes and corresponding composers from a composition based on the provided pitch."
To check total remaining claimable amount.
"Claim a free card for the user, generate a random card, allocate referral bonus, and mint the card to the user while ensuring the user has not already claimed a card."
Returns the token total currently minted by the sale agent.
Receive dividends from Zethr and buy back in.
Allows admin to mint tokens.
Change the associated contract to a new address.
"Set the minimum starting price by assigning the input price to the variable, accessible only to authors. [FUNCTIONS THAT WONT BE USED FREQUENTLY]"
"Set the ether price configuration in the smart contract to 8 decimal places before the ICO, ensuring it is only accessible to the owner for security."
"Return the address of the user who placed a bid order based on the provided bid ID, or return the address of the user who placed the first bid if the ID is not greater than zero."
Internal function to retrieve the index of a specific element within an array of addresses.
Returns the user id associated to a wallet as an unsigned integer.
Method to view the current Ethereum stored in the contract.
"The function ""mint"" should be called by the ""AddressDeployer"" smart contract, and it includes a security check to verify the bytecode of the sender before minting tokens for the specified beneficiary."
Get number of wallet owners; return uint number of owners.
"Function to give tokens to users who have purchased Genbby tokens, checking the current round and token availability before minting and updating the tokens sold for the respective round, returning a boolean indicating the success of the operation."
Users can withdraw their funds if the total received Ether is below the soft cap.
Minimum goal was reached return true if the crowdsale has raised enough money to be a success.
Update token Name and symbol
Queue up dice session so that it can be processed by others.
Sets unlock for given allocation address.
Get the amount of tokens a user would receive for a specific amount of ether based on the current state of the contract and the exchange rate.
Calculate the percentage of the funding goal achieved.
Function to unfreeze an account from a frozen state.
Set new user bonus amount.
Fallback function to prevent any ether to be sent to this contract.
"The function `addDistributionPeriod` in the Profiterole contract adds a new distribution period, updating relevant data and incrementing the period count."
changeTotalSupply is the function used to variate the variable totalAllocatedTokens.
Distribute presold tokens and bonus tokens to investors.
Returns the count of buildings for a city.
Set social multiplier value with security check for minimum value requirement and only accessible by the contract owner.
"Function to unpause transfer restriction: Unpauses token transfers by setting the transferPaused variable to false, with a validation that only the contract owner can execute this action."
"The function ""get"" retrieves the cumulative score and total ratings for a specific address from the scores mapping, returning 0 values if the address does not exist."
"This function sets the status of a property for a specific user, with the core logic being the internal function call to update the property status."
Check if the current tier's cap has been reached; return False if it's still open.
Check if a wallet address exists for a given account address and index.
Get max number of wallet owners return uint Maximum number of owners.
Get the balance of the specified address; return the balance.
Creates a new refid if the address does not have one.
Return true iff the assignments are closed and there are no restricted tokens left.
Refund function enables users to receive a refund if the ICO fails to reach the minimum capital requirement.
Allows anyone to transfer the MOO tokens once trading has started.
Summarization: Change dates before crowdsale has started.
Encodes the string representation of a uint8 into bytes.
recordDealCancelReason creates an event of not paid deal that was cancelled.
Check fund controls before forwarding call to standard token allowance spending function.
"Function to burn tokens, checking if the sender has enough balance, subtracting the burned amount from the sender's balance and the total supply, emitting a Burn event, and returning a boolean indicating the success of the operation."
Get IAC token balance for provided address.
Check if it is safe to add two numbers.
airdrop tokens for a specified addresses.
The function `parseInt` converts a string of ASCII characters to an unsigned integer value.
This function takes an address as input and returns the ERC20 token balance of that address.
"Approve transfer of tokens manually, return bool success."
This function takes a token ID as input and returns the immediate owner of the token.
Increment the number of shares for a member.
Function to prevent targets from sending or receiving tokens by setting Unix times with security checks for array lengths and unlock times validation.
"Enables retrieval of base stats for a specific monster ID, optimizing gas usage and simplifying the evolution process by sharing base stats among monsters of the same ID."
Transfer tokens from one address to another only if the contract is not paused and the accounts are not locked.
Allows the owner to update the month on the contract.
Approve all an owner's pixels to be managed by an address.
Transfers the collected fees to the owner.
Fallback function for deposit and blessing income.
Withdraws the money to be spent to Blind Croupier Project needs.
Start the crowdsale by checking conditions and transferring tokens accordingly.
An external method that retrieves and calculates the combined strength of a fighter based on specific attributes stored in the contract.
"Emit an event when receiving tokens, without any security checks or validations for the transaction."
Returns the number of asset events that has happened to an asset item.
Returns minimal amount to wager to return a profit in case of max win.
A function to retrieve the balance of a specific address from the 'deposits' mapping.
"The function ""setPromoted"" allows the owner to set a promoted status, promoting registration of new affiliates."
Concatenates two input strings and returns the concatenated result.
"Add a new transaction to the transaction mapping, return the transaction ID, with a security check ensuring the destination address is valid."
Increase the airdrop count to allow sweet humans asking for more beautiful Lemon Tokens.
Function created to emit the ETH transfer event from the child contract only.
Return the name of the ERC20 token.
Compute the fees and return the expected amount of fees in wei.
Function for the frontend to show ether waiting to be sent to fund in contract.
"This function returns the total amount of LNC in circulation, which is displayed on the website during the crowdfunding."
Function for checking if the crowdsale soft cap has been reached by comparing the sum of fiat and ETH balances to the soft cap.
Check if participant is allowed to contribute in the current tier.
Override so that minting cannot be accidentally terminated.
Gets totalSupply return Total supply.
Function for transferring tickets from the owner's address to a designated address with security checks ensuring the sender owns the ticket and the recipient address is not zero.
"The ""start"" function sets the start and end times, with a security check to ensure that the caller is the designated wallet address."
Remove addresses from the whitelist.
Increase the length of the snake by setting it to a specific value and assign the sender as the owner of the snake.
Change eth address of agency for create deal.
"Remove operator role from an address, with the validation that only the contract owner can execute this action."
"The function `receiveApproval` is an external function that is used to handle token approvals and transfers, and it must be compiled with a specific version of the compiler."
Return the pixels owned by an address.
Return the total reward balance of the member in question.
Whitelists a list of addresses.
Withdraw available funds from contract.
Get the TripCoin balance of any address.
Voters agreed on proposed contract and Ethereum is being sent to that contract.
Function to withdraw ether from the contract and split the amount equally between two specified addresses.
PLCCrowdsale fallback function for buying Tokens.
Get total bets for every team.
Get the current hardCap for the current SaleState.
Get security token offering smart contract details by the proposal index return Contract struct.
Will send all ETH in contract to the owner.
Set the minimum team number with owner-only access for security.
Store an image string and retrieve a numerical identifier.
Remove owned tokens from circulation and destroy them.
"returns the Keccak-256 hash of the string ""sale_min_purchase_amt"""
allows the owner of the contract to change the bonus if it is different from the current bonus and greater than zero
in a smart contract transfers a specified amount of tokens to another address
converts a softcap in CHF to Weis
fetches a user's details by their name from a directory using the keccak256 hash of the username as an index
is a public view function that returns the name of the token as a string
allows the contract owner to add an address to a list of addresses that are permitted to transfer tokens
is a public function that can only be executed by the owner of the contract and when the contract is up
"calculates bonuses based on the current time and a given value, returning the calculated bonus"
selects a God with the given ID and emits an event if the sale is closed and the caller is the owner of the God
"adds a spender to the whitelist of spenders for approveAndCall, which can only be called by the contract owner"
"""The function 'forceOraclizeUpdate' allows the owner to trigger an Eth rate update with a specified delay"
allows a user to activate or deactivate an entity and modify its associated data if they are the owner of that entity
is used to increase a position in the system
allows a user to destroy (or 'burn') a certain amount of tokens from their balance
"retrieves and returns the current value of the variable ""directOffersComissionRatio"""
returns the current withdrawal wallet address
mints coins for multiple accounts in a smart contract
"""A function that grants a voter and sets their public key"
"is only accessible to the contract owner and can be called when the token status is ""Trading"""
"transfers tokens from the sender to a specified address if the recipient is not ""0x0"" and the transfer value is non-zero"
adds a new NameTAOInfo and returns true on success
"returns the index of the closest tier to a given block number, or zero if the block is before the first tier's start block"
returns a percent rate based on the contract's current balance in relation to predefined phases
tokensale performs a token sale operation and transfers the transaction address and sends an event as Transfer
returns the balance of BBD tokens held by the contract
"allows players to send crystals to the pot, subject to certain conditions and updates player's share in the game round"
retrieves and returns the bet numbers for a specific choice from an array named `numberOfChoice`
retrieves the token amount rewarded to a participant in a specified round of an ICO (Initial Coin Offering)
is used to add a group of 16 genesis cats
"is used to stop the crowdsale for contributions, it can only be called by the owner of the contract and requires that the current state of the sale must be ""Started"""
adds an account to a list of allowed addresses in the contract
sets the variable `advertising` to an empty string if the caller is whitelisted
"calculates the total cumulative charity for all campaigns, taking into account unfinalized campaigns and finalized ones separately"
enables the addition of a one-off additional text to a specific token
allows the current owner to change ownership of a specific token in a child contract
"is used to start a crowdsale, which requires the current state to be ""Pending"""
retrieves the count of deposits made by a specific user in the smart contract
checks if a maximum goal amount has been reached
_createFighter creates a fighter with specified attributes and emits a FighterCreated event
"""The function 'forbid' sets the value of 'lastRewards' for an address to 'cumulativeRatios'"
retrieves an array of contract addresses from a smart contract
"checks whether the user's purchase amount is above the required minimum for either a main sale or pre-sale, returning true if it is and false otherwise"
transfers a specified value from the sender's balance to a contract receiver and calls its fallback function with a specific code
is a payable function for taking the prize in an Ethereum smart contract
retrieves and returns the balance of a specific address
transfers tokens from one address to another if the sender has sufficient allowance
in the smart contract returns the amount of tokens left with a delegator
"""This function sets an allowance for a specified spender to transfer tokens from one account (_to) to another"
"This function, named queryToken, takes a token ID as input and returns the price and last deal time of the specified token."
Use 1 super privilege to permanently own a company.
Allows for the exchange of tokens between specified addresses and returns the amount of makerToken received.
Logs the data request with the requested ID.
"Retrieve and display a player's locked, unlocked, and withdrawable tokens based on their address and game ID after validating the player's existence."
"Execute immediate order settlement on a decentralized exchange platform, validating permissions, asset quantities, and ownership within the smart contract code."
A function allowing the contract owner to reduce the balance and total supply of a specific address for recycling purposes.
"Gets the balance of the specified address overridden from previous to save gas, returning a uint256 representing the amount owned by the passed address."
Allows the contract to receive Ether.
Transfer the balance from token owner's account to user account.
Check if a player has referral bonuses from a previous round that have yet to be recorded.
Transfer ownership and transfer account balance.
Function to pause the contract can only be called from the owner's wallet.
"The function ""finaliseICO"" finalizes the ICO by sending the remaining tokens to the contributors' address after the crowdsale ends."
Withdraw call for refunding balance accumulated by payee.
Calculate dev fee in game.
The deposit will be transferred to the main pool in the parent contract after verifying that the betting period has not ended.
"Get the number of markets by returning the length of the ""markets"" array."
"The function ""allowance"" returns the amount of tokens a spender is allowed to spend from an owner, with security checks or validation not explicitly mentioned in the provided code snippet."
"Transfer Ether to a specified address and return whether the transfer was successful or not, without including any security checks or validations."
Report the amount of tokens of an ask order.
Override transfer token for a specified address to include security checks validDestination and onlyWhenTransferEnabled.
The function grantFoundationToken transfers foundation tokens and bonuses to the sender if certain conditions are met.
Inputs: None. Outputs: Purchase limit amount and duration in blocks. Summarization: Returns the purchase limit amount and duration in blocks.
Allows the owner of the contract to set the token address.
The function retrieves the number of blocks since the initialization of the core contract.
Function to check if a proposal code matches the stored hash in the contract.
Distribute token to multiple addresses.
"Whitelist many user addresses at once, allowing only the owner to perform this action, with a maximum limit of 150 addresses to prevent gas limit exhaustion and potential DoS attacks, adding the user addresses to the whitelisted mapping."
"The function `didWithdrawCollateral` is called by bZx after a borrower has withdrawn excess collateral token for an open loan, and upon successful execution, it returns a boolean value."
Public function to retrieve the balance of a specific address.
Enable tokens transfers to allow tokens to be traded.
Set the rate of ETH to EUR.
Charge a fee in protocol tokens.
Only owner is allowed to mint a specific amount of tokens.
Returns the total token supply.
"Finish minting process by setting mintingFinished to true, triggering the MintingFinished event, with security checks for onlyOwner and onlyMintingNotFinished."
Function for the Crowdfund to transfer tokens from the crowdfund address to a specified address.
Get dividends from hourglass contract.
Sets the new conversion rate.
"Function `finalize` disperses token payouts to two parties based on the provided state, ensuring the token balances match the bonded value."
Internal method returns discount tokens amount based on the provided non-zero ETH amount and discount rate.
Get minimal balance to maintain in contract.
Get the maximum total supply of tokens available in the contract.
"Sets the jackpot amount for the game, with a security check to ensure a positive value is added."
Updates the current bid price according to the rules.
Amount of blocks left to the end of this stage of TGR.
Update node status if children sum amount is enough.
Return true if crowdsale event has ended or cap is reached.
Withdraw collected ether to ethWallet.
God can set a new blind auctions contract.
"Perform security checks to ensure the recipient is a contract, validate the transfer amount against the sender's balance, update balances accordingly, and call the NSPFallback function on the receiving contract for recycling NSPs."
Override for getting Ethereum only after finalization.
"Creates a token timelock contract where tokens are locked until a specified release time, with a validation check ensuring the release time is in the future."
Users can retrieve their ether if the crowdsale fails to meet its funding goal.
"Function called by apps to check ACL on kernel or to check permission status, returning a boolean indicating whether the ACL allows the role or not."
"Set an upgrade agent that handles the transition of tokens during an upgrade process, ensuring the agent is valid and matches the original token supply."
Lock the vault for the three wallets.
Sets the minimum investment amount with the input parameter `_minInvest` and returns a boolean value.
Function to pause ICO sets ICO status to Paused.
Change the current generation of all stars by importance.
Sets TGE to new main sale address upon completion of the sale.
"Set the bonus percent for each purchase, with security checks ensuring only the owner or minter can modify the bonus and the percentage is non-negative."
"Function calculates the fee for a transaction, including special promotions based on token balances, using a loop to check for applicable special fees."
Calculate the current price of tokens based on the number of tokens sold and different pricing steps.
Return total amount of burned tokens.
Get the remain unreleased tokens of the locked stages of an account.
Anyone can deposit funds to the contract for the experiment.
Summarization: Reject all ERC23 compatible tokens.
Remove address from whiteList by whiteListOwner.
"Returns the combined total supply of two tokens, drpsToken and drpuToken."
Return an array of transaction IDs within a specified range based on the specified criteria of pending or executed transactions.
Allows qualified crowdsale partner to purchase Star Tokens.
"The function ""price"" returns the latest price for pressing the button based on the active campaign or the starting price if no campaign is active."
Attach many addresses to many users.
"Set various game settings such as upgrade gems, gem conversions, battle round limits, and event card ranges, ensuring constraints are met, through an external function accessible only by the contract owner."
Returns the version details for the given contract and version.
"Sets the variables related to the Token contract such as name, symbol, initial supply, and decimals."
"When a user logs out or loses connection with the DApp, the function ""logoutUser"" is used to unfreeze the user's account by setting ""freezeUser[_user]"" to false, and this action can only be performed by an admin."
"Send tokens to the specified address, return excess coins, and execute CRM, with limitations on the input amount of coins and the output address."
"Function to transfer tokens to a specified contract address, performing necessary checks and invoking the tokenFallback function as per ERC223 standard."
Get fashion attributes by tokenId.
Returns the topics for a crowdsale configuration event.
Return if the presale is open.
Inputs: `_gas` (uint256). Outputs: uint256. Summarization: Calculate the gas cost in Wei from the provided gas amount. [XRT emission value for consumed gas: 0.000000000000000001 XRT]
Checks if the given address is a contract using inline assembly.
Get influence by token return tavern contract address influence.
Returns true if the game is in running mode.
Allows anyone to transfer the Reporter tokens once trading has started.
Returns an array of all CryptoBeasties token IDs stored in the Storage Contract.
"The function ""emitBegin"" triggers the start of a sale by initiating three separate processes."
This function is used to transfer ether to a particular address.
Summarization: This function is called externally from the Natee Contract to deduct Warrant tokens from a specified address.
"The function ""longMul"" takes two uint256 inputs x and y, performs a long multiplication operation, and returns the high and low parts of the result."
Transfer tokens from one address to another with proper validation checks and emit a transfer event.
Return whether the locking was successful or not.
Update all MC's status.
"This function calculates and displays the unpayed percentage of a deposit based on the invested amount, percentage, and time elapsed since the deposit was made."
Notifies about the ownership transfer in the constructor function.
Owner can take ETH from contract.
Creates a number of instances of ChildDeposit contracts.
Add contract address to tokenFallbackWhiteList.
Returns true if the registry looks ready.
Resets specific variables and flags related to safe keys after a certain condition is met.
Terminate the Affiliate contract and destroy it.
Allows merchant or Monetha to initiate exchange of funds by withdrawing funds to deposit address of the exchange.
"Fallback function for a crowd sale contract ensuring minimum contribution, pre-sale start date, stage validity, token allocation, total supply cap, and secure transfer of funds."
This function will return only the price of a specific Video Game Item.
Allows participants to reward their tokens from the current round.
Get the total number of contributions made by a specific sender.
Take all oraclize ether to contract owner and stop automatically update.
Update the contributions contract states.
Return an array of token IDs that are transferable from the contract.
Propose ownership transfer.
"Change the scientist assigned to a specific element by adding the provided scientist ID to the starting scientist ID, accessible only by the CEO."
Change exchange rate of ether to tokens.
Add to 1-year locked balances and total supply.
Return whether the proxy is executed.
Check the balance of a Beercoin user.
Return contract's current dividends including referral bonus.
Get ending time of the last bonus.
This function will be used to update the details of a DBZ hero by the contract creator.
Remove a specific address from the list of pools.
