The function allows the contract's owner to withdraw a specified amount of Ether from the contract's balance. 
"This function is a public, onlyOwner function that adds an address to the 'wallets' array if it isn't already there. It emits a 'WalletAdded' event with the added wallet address as parameter. "
This function allows a user to transfer tokens while also participating in an operating jackpot. The total transfer amount includes the Jackpot reserving deposit and custom reserving percentage. 
"This function is a public one that can only be called by the owner. It removes balances from specified addresses (dests), but only if they have enough balance to cover the requested revocation amount, which is ten times larger than the value being removed. The function emits a 'BalanceCleared' event for each successful removal operation. "
"""Function checks if game is in stopped mode."" "
"""Withdraws all dividends and coupons to caller."" "
This function starts multiple auctions by iterating over an array of hashes and calling the 'startAuction' function for each hash. 
This function undelegates a specified amount from a pledge and transfers it to another pledge. It returns the ID of the new pledge. 
"This function checks if a message sender can cancel their bet, based on certain conditions. "
"""Returns an array of vendor IDs and the next ID."" "
The function checks whether the sender is entitled for a cluster based on their withdrawal status and current segment position. It returns a boolean value indicating if they are eligible or not. 
"""Sets a new unlock time for all accounts."" "
Converts a uint256 to a decimal string. 
"""Burns all unsold tokens by the owner after a certain closing time."" "
"""Internal function to calculate token amount in Wei based on price."" "
This function allows the owner to burn a specified amount of tokens from the caller's balance and update total supply. 
"""Receives approval for a certain value of a token from an address."" "
"""The function returns the total supply of tokens."" "
"This function can only be called by the owner after the crowdsale has ended, ensuring that all funds are forwarded to a designated wallet. The function checks if it's already finalized and ensures that either the end time has passed or the amount sold is equal to or greater than the cap. If these conditions are met, the contract's balance of tokens is transferred to a specified wallet, and then the contract's current balance is transferred back to itself. Finally, it emits an event indicating that the crowdsale has been finalized, and sets the 'isFinalized' flag to true. "
"""Converts a given number into a hexadecimal string."" "
"""Sets the status of an agent (owner or not) for airdrop functions."" "
This function is a balance accessor for ERC20 tokens. It returns the balance of an address by adding up all locked values associated with that address. 
"""Lets the contract's owner change a boolean variable 'bet' to a new value."" "
"""Returns the number of Rick holders."" "
"A function that sets pricing parameters for a contract, accessible only by the owner, returning a boolean indicating success. "
"""Sets a new passport logic implementation as current one."" "
"""A function that sets the current stage as owner and ensures stage."" "
"""Updates the participant cap for tier 2."" "
"""Returns player's game info based on current game."" "
This function creates tokens for investors who have paid in other cryptocurrencies by adding the investor's _aidValue and a bonus to create a total number of tokens to be minted. It then remembers these tokens for future use and mints them to the investor. 
The function checks if a specific bit in a uint256 number is set. It uses assembly language to perform the operation. 
"""Pauses presale until explicitly enabled."" "
"""A function that is external, views its state but doesn't modify it and returns a string."" "
"""Returns a boolean indicating if the specified user has KYC approval."" "
"""This function is only callable by the developer and changes the state of 'StopSell'."" "
"""Sets the ETH price of a token in Finney."" "
"""Allows owner to transfer raised funds."" "
"A public payable function named ""TokenDestructible"". "
"""Returns the balance of a payee for a given request."" "
Creates a new CSCToken instance with total supply of 10^8 * 10^18 and assigns it to two addresses. 
"This function sets a note with a given key and content for the sender's user profile in the contract. If the note does not exist yet, it adds the key to the list of keys associated with the user. It then updates the note content and emits an event signaling that the secret note was updated successfully. "
"This function is a public one and can only be called by the owner. It changes the start time of an ICO (Initial Coin Offering). The new start time must be in the future, at least 7 days after the previous start time. "
"""Sets the AIUR token exchange oracle to a specified address."" "
"""Withdraws from ZethrContract and sends to ZethrMainBankroll, then calls the function 'WithdrawToBankroll'."" "
"""Forwards received ether to the contract's owner."" "
"""Changes the owner's website to a new one."" "
The function checks if a given uint256 value is contained in the set based on certain conditions. 
"""Sets the ICO wallet to which ETH funds are sent."" "
"""Revokes the authorization of an agent to mint debt tokens."" "
Creates a new centralized oracle contract and emits an event. 
"""Function sets the selling price of tokens."" "
"This function returns player information based on an address and includes player ID, ETH balance, general vault affiliate vault calculations. "
"""Allows merchant to withdraw funds to a specified beneficiary's address."" "
"The function checks if the goal or time limit has been reached and ends the campaign, returning false when contract does not accept tokens. "
"This function checks if a ticket is valid by comparing the contract address with zero and checking if the current time (now) is less than the expiration date of the ticket. If these conditions are met, it returns true indicating that the ticket is valid. Otherwise, it returns false. "
"""Returns the number of ads currently stored in the contract."" "
"This function adds to the balance of a specified address, ensuring it's within safe math operations and updates an array of addresses that hold tokens. "
This is a utility function for heapSort that calculates the index of the left child. It takes an input index and returns the calculated index of the left child. 
"This function is only callable by the contract owner and it initiates a final distribution in case of project wind up, requiring that tokenStatus is currently Trading and sets it to WindingUp. It then calculates the reward for each token based on the total value sent with the transaction, adds this reward to an array called rewards, and distributes any remaining funds to the owner's holdings or creates a new entry if none exist yet. Finally, it emits a WindingUpStarted event with the amount of wei used in the wind up process. "
"""Returns the number of elements in 'coins' array."" "
"""Reclaims all ERC20-compatible tokens accidentally sent to the contract's SGM token."" "
"""Sets the price for an item."" "
"This function checks if a transfer is valid for locked tokens based on the holder's address and value. It returns true if the transaction is not from managementLocked or optionPool, or if it has been past their respective periods, otherwise it compares the balance of the holder after subtracting the transferred value with the locked balance of the holder. "
"""Returns the total bet amount for a specific team by a given address."" "
Converts a uint to its ASCII representation. 
"""Returns true if the given buyer is in the whitelist."" "
"""A function that sets the 'mintingFinished' variable to true and emits an event, returning a boolean value."" "
"""Function to allow owner account approval for spending of owned tokens."" "
"This function is an internal sale function that requires a valid crowdsale to be open, the value must be greater than zero, and it collects ether by adding the input value to the total collectedEther. It also updates contributions of the beneficiary and calculates tokens amount based on referrer status. If no referrer is specified, it simply gets the token amount without bonuses; otherwise, it includes referrer bonus in its calculation. The function then mints tokens for both the beneficiary and referrer and adds them to total sold tokens. "
This function allows the Committee Room to upgrade the application by returning the index of a new revision. 
"""Mints new tokens and sends them to a specific address."" "
"""Returns the name of the used API as a string."" "
"""Resets the time lock of a specified address to zero."" "
The function `unlockAccount` is an external one that can be called by the owner. It unlocks a locked account by setting its status to false (0). The address of the account to unlock must be provided as a parameter and it should be a valid destination. 
This function allows the admin to finalize a sale by transferring any remaining funds to the wallet and mints more tokens if there is room left in the supply. 
"This function sets the admin wallet address, ensuring it is not null and only accessible by the owner. "
"""A function that sets 'releasedForTransfer' variable to true."" "
This function is a public method named delistToken that accepts an address parameter (_tokenAddress). It can only be called by the owner of the contract. The function requires that the token entity exists in the system and sets its active status to false before emitting a TokenStatusChanged event with the _tokenAddress and new active status (false). 
"""A function to transfer ownership of a specific token."" "
This function allows the owner to mint new tokens and returns a Boolean indicating successful minting. 
"""Sells a specific zone with the given price."" "
"""Allows owner to change market fees."" "
"""Returns the number of remaining PublicSale tokens for purchase."" "
"""Disables token transfers."" "
"""Returns the sum of a player's total carrots for four different categories."" "
"""A function to set addresses as either burners or non-burners."" "
"""Returns the remaining possible sale contribution for a given wallet."" "
"The function checks the status of a license based on its completion, issue date and expiration time. If it's completed, it returns ""Licensed"". If not, it checks if the current block timestamp is beyond the issuance date plus the expiry time, returning ""Expired"", otherwise it returns ""Pending"". "
"This function calculates the total amount in the jackpot after fees and a cascading percentage has been applied. It returns an instance of Jackpot with four values: the original jackpot, the fee, the total amount from the cascade, and the remaining balance after subtracting the fee and cascade total. "
"This function transfers token amounts to other ICO platforms. It calculates the total tokens by adding booked and bonus tokens. If the total is greater than zero, it transfers these tokens to two different addresses (OvisAddress). Finally, it triggers an event indicating that the transfer has occurred. "
"This function resolves an error report by transferring the associated audit price to either the requester or auditor depending on the 'toRequester' parameter. It emits a log event indicating that the resolution was successful if the audit state is in error, otherwise it emits an invalid resolution call log event. "
"""A function that adds an owner's address to a list."" "
"This function allows a user to withdraw their funds, emitting a 'WithdrewFunds' event upon successful completion. "
"""Returns the amount of tokens that can be withdrawn on a specific date."" "
"""A function that allows an owner to override the Initial Coin Offering (ICO) dates."" "
"""Returns the token balance of a user in the most recent lottery."" "
"""This function allows the owner to give tokens to a new owner."" "
"The function `defineTranchePeriod` returns the index of the first tranche with a positive value for its `valueForTranche` property. If no such tranche exists, it returns `MAX_TRANCHES + 1`. "
"""Allows the contract owner to re-list a genesis sale with a new price."" "
"""Returns the Ethereum address of an investor's affiliate."" "
"This function calculates the remaining tokens and costs based on hardcap, total distributed amount, and bonus remainders. It subtracts various parts of the calculation from the total to arrive at a final cost. The result is returned as an array with two elements - the remaining token count and the calculated cost. "
"""Pauses the ICO round C if it's started."" "
"""Changes WeTrust signer of NFT contract to a new address."" "
"""Function starts crowdsale with parameters validation."" "
"""Returns the address of the contract owner."" "
"The function is a public onlyOwner function that returns an array of addresses (users). It works in write mode and gets the users who are awaiting the transfer of tokens. The function checks if KYC (Know Your Customer) approval is true for each user and if they have any tokens to be sent, then it pushes their address into a list 'u'. "
"""A function that receives funds."" "
The function checks if the sender has a balance and block for redemption. 
"""Manages fund movement by transferring tokens from one address to another."" "
The function checks if the recipient is a contract and calls its onERC721Received method. It returns true if the call correctly returned the expected value (ERC721_RECEIVED). 
"""Sets the owner-controlled wallet to hold unsold tokens."" "
"This function retrieves pixel data based on the given pixel ID, including its id, owner's address, RGB color values, price and text content. "
"A function that increases a variable ""remaining"" by the value of ""msg.value"". "
This function allows a user to withdraw a specified amount of ERC20 tokens from their balance and triggers an event notifying about the transaction. 
"The function ""registeredUsers"" is an external view function that returns an array of unique addresses from the struct ""users"". "
"""Returns a human-readable representation of the contract's current state."" "
"""Transfers a specified value from one customer to another and checks if it was successful."" "
"""Returns the number of sold out tokens."" "
"The function checks whether all tokens have been distributed to all contributors. It iterates over the list of contributor addresses, and for each one, it checks if their token has been distributed. If any token is not distributed, it sets `isARTDistributed` to false and breaks the loop. "
"The function sets the ICO status to ""RoundDStarted"" if it's not already in ""RoundCFinished"" or ""RoundDPaused"". It requires that the caller is a manager. "
"This function retrieves round statistics based on the provided index. It takes an uint parameter and returns four values: a round number, a winner address, a position, and a block number. "
"""Transfers tokens from contract to any address."" "
"""Returns the amount of tokens allowed by owner to spender."" "
"""Changes the frozen status of an address."" "
"""Transfers a specified amount of currency to the beneficiary."" "
The function changes the pre-sale end date to a new value if it is within certain constraints. It only allows the owner of the contract to do this. 
"""Returns the number of points held by a player."" "
"""The function destroys the contract by transferring its balance to 'cashout' and terminating it."" "
A function that allows the owner to change a feature's status based on its name and new status. 
"This function allows a minter to mint tokens for a specified recipient and update the balance of that recipient, the total supply, and returns true upon completion. "
"""Returns minimum amount."" "
"""Returns number of admin signatures required."" "
"This function swaps the position of a specific token in an array with the last element, then deletes the last element from the array. "
The function checks if either the pre-sale or main sale are running. 
"""Returns the selling price of a specific block."" "
This function calculates the dividend amount for a given address by iterating over each round of dividends and adding up the earnings based on pool balances. It is viewable to anyone but does not modify any state. 
"This function returns the post-deployment state of a contract, including cause secret, message, withdrawal statuses for both participant and owner, cancellation status, number of participants, and entries. "
"""Private function to clear current approval of a given token ID, reverting if the given address is not indeed the owner of the token."" "
"""Checks if there are any pending orders for a given account."" "
This function sets a public metadata with given key and value in the smart contract for XNR mainnet purposes. 
"""Transfers tokens from one address to another while checking if the contract is paused."" "
The function checks if the contract's balance is greater than or equal to a certain percentage of the funding goal. 
"""Returns the amount of vested tokens still locked for a specific address."" "
"The function approves tokens allocated to a beneficiary and transfers them to the beneficiary. It requires that the beneficiary is not the null address or any of the founders' addresses. The function then resets the allocation for this beneficiary and emits an event indicating successful approval. Finally, it returns true. "
"""Returns the approved address for a given token."" "
"""Burns a specified amount of beercoins from the caller's account."" "
"""Returns the current Paycarnita price."" "
"""The function allows the owner to disable a designated presale contributor's allowance."" "
"""Transfers Change tokens to a specified address if trading has started."" "
This function retrieves an array of transaction IDs based on a defined range and filters them by pending or executed status. It returns the filtered list of transaction IDs within the specified range. 
"""Internal function _processPurchase that delivers tokens to a beneficiary."" "
This function allows the contract's owner to burn (remove) a specified amount of tokens from their balance. It also updates the total supply and triggers a transfer event. 
"""Returns whether a reference link is available for the caller."" "
"""Adds a new member to the blocksquare group."" "
"""Calculates the sale return for a given supply, reserve balance, reserve ratio and sell amount."" "
"This function requires a minimum and maximum bet amount, checks if the gambler has enough balance to cover both the bet and fee, generates a random number for determining winning or losing, calculates the winnings based on luckynum, transfers the appropriate amount to the sender, and logs the result ('win' or 'lose'). "
"""Function to start next era with new mint price."" "
"""Updates the ETH price for the token sale."" "
"""Returns a boolean indicating whether the contract's pause status is active."" "
"This function is a modified version of the `transferFrom` function from an ERC20 token contract. It allows transfers only if trading is open or if the sender is the owner or communityTokensAddress, otherwise it returns false. "
"""Sets the admin address to a new value."" "
"""Checks if an operator has a specific role."" "
"""Pops the first entry from a linked list based on direction and returns the removed node."" "
"""Updates consumable quantity in the narcotics core contract."" "
The function is for withdrawing the balance from an auction contract as the owner. 
"""Returns the next transcoder in pool for a given transcoder."" "
"""External function that allows admin to withdraw balance from the admin pool."" "
The function checks if the current time is within a specified period for a given beneficiary. 
"""Removes a role from an address."" "
"""Internal function to safely send ETH based on passed parameters."" "
Ensures that the contribution does not exceed the minimum and maximum limit while respecting parent behavior. 
"This function checks if the provided data hash was signed by a valid Ethereum address and that this address has the required role to sign. It returns true if both conditions are met, false otherwise. "
"""Checks if a given block is mature based on its number and compares it with an external block."" "
"""Updates the multisig wallet address to a new one."" "
"""Function identifies is a pure external function that returns an arbitrary number."" "
"""Function to transfer tokens from one address to another."" "
"""Returns the maximum amount that can be sent."" "
"""The function 'liquidate' is a public function that can be called by the team. It destroys the contract and sends all funds to the owner."" "
"""Returns true if given address has been refunded."" "
The function allows the owner to withdraw a specified amount of Ether from the contract to a designated wallet. 
"This function allows the owner to burn (remove from circulation) a specified amount of tokens. It updates the sender's balance, total token supply and total burned amounts, then emits Burn and Transfer events. The function returns true if successful. "
"""Called by the owner to start token distribution."" "
"""Returns the count of empty indexes in an array."" "
"This function allows an owner to add a new account with specified parameters (address, uint256, string). The maximum number of accounts is checked before adding the new one. If successful, it emits ""ok: acct added"", otherwise it emits ""err: max accounts"". "
"This function transfers a specified value from the caller's balance to another address and emits a 'Transfer' event. It requires that the caller has enough balance for the transfer. The function also emits two different types of 'Transfer' events, one with full details (including data) and one without. "
"""Calculates bonus based on given value and the current auction bonus."" "
"""Returns the second-level referrer bonus percentage."" "
"""Returns the appropriate token contract based on input parameter."" "
"""Allows the owner to burn existing tokens."" "
"This function allows the owner to unlock and transfer tokens from their respective teams (TEAM1 or TEAM2). It checks if the team's wallet is unlocked by comparing the current time with a predefined UNLOCK_TEAM_x timestamp. If the conditions are met, it transfers all available balances to the respective team's address and resets their balance to 0. "
"""The function 'setMaximumEtherToAccept' sets the maximum ether to accept for a given value."" "
A function that requires an admin address to be provided when the contract is initiated. The admin cannot be set to zero. 
"""Changes the state of the contract by allowing or disallowing deposits."" "
Distributes rewards to winners based on their odds and the amount they bet. 
"""Allocates tokens to an early contributor from the fundraiser's share."" "
"""Empty external function."" "
"""A function to set a locked account with an end date for funds."" "
"""A function to allow users to claim all their deposited tokens if KYC is complete."" "
"""Sets the owner of the contract to the first Torch Runner."" "
"This function is an internal Ethereum smart contract function that distributes rewards among users based on their proportional contribution. It iterates over all active users, calculates the reward for each user proportionally to their contribution and transfers it to their balance. The remaining balance after distribution should be zero in a perfect world. "
"""Transfers ownership-only balance to a specified address."" "
The function ensures that the beneficiary is not a zero address and the wei amount is not zero. 
"""Returns the number of tickets held by a given account."" "
"The function is for updating the maximum processing capacity with a new value between 5 and 15. It can only be called by the contract owner. The new value must be within the allowed range, otherwise an error message will be thrown. "
"""The function allows the owner to reduce the maximum limit, but not beyond the value of a previous call."" "
"""Removes an address from the whitelist."" "
"""Locks 50 million reserve tokens for a team fund for one year."" "
"This function allows a user to retrieve their funds only during an emergency, by emptying the balance of the sender's address and transferring it back to them. If the transaction fails or the sender is not in the 'emergency' state, an exception will be thrown. "
"""Emits a 'ReceiveEther' event with the sender and received ether amount."" "
"""Initiates a poll with specified vote quorum and duration parameters at pollID emitted by PollCreated event."" "
"This function is a public method named 'collectTokens' that only the owner can call, it accepts an array of addresses and amounts as parameters, checks for valid inputs, updates balances accordingly, emits a transfer event for each transaction, and returns true. "
"""A function that sends Ether from the contract's owner to an address and returns a bool indicating success."" "
The function sets the lockup contract if the crowdsale hasn't started. 
"The function ""checkTokDev"" is a constant returning function that calculates the total number of Dev Tokens issued during an Initial Coin Offering (ICO). "
A function that transfers multiple tokens from the contract to specified addresses with corresponding values. Returns a boolean indicating transaction success. 
"This function is an external deposit method that requires the user to have set allowance for a certain value on an ERC20 token. It calculates the deposited amount after subtracting fee from the total value and makes a deposit for a specific period, updates the last period participated by the user, transfers tokens from sender to contract, handles fees, emits a TreasuryDeposited event, and returns OK. "
"""Returns the balance of a client's address."" "
This function allows the owner to deny future token transfers. 
This function is used for allocating tokens to a specified beneficiary based on the stage and rate provided. It also updates the total tokens by stage and indirect investors' token holdings. The function is restricted to owner only. 
"The function is a view function named ""getCommodityNum"" that only the owner can call. It does not take any arguments and it returns an unsigned integer value (uint). The returned value is one less than the stored value of ""commodityNum"". "
"""Returns the number of transactions."" "
"This function is a hash of a meta-transfer operation. It takes in parameters (address to transfer to, amount to transfer, nonce for uniqueness, reward to be given), and returns the keccak256 hash of an ABI encoded packed array containing these parameters along with the contract's address and the string ""metaTransfer"". "
Initializes a new token with given parameters and assigns the total supply to the creator of the contract. 
"""A function that sets a property status to 'agent' by an agent and signs the property for a user."" "
This function is a viewer that returns the timestamp of the last received transaction for a given Ethereum address. 
A function that allows depositing Ether into the contract and emits a 'Deposit' event with the sender's address and amount of Ether sent. 
"""Limits the minimum sale price to a specified value."" "
"""Function to get the total Ethereum balance."" "
"""Adds a vesting entry for the specified user with the given amount and sets its end time to be 180 days from now."" "
"""Internal function to destroy specified number of tokens from a specific owner's account."" "
"""Function to set the start of a crowd sale, can be called by owner."" "
"This function is a viewer that returns the number of diamond caps scanned from the contract. The returned value is shifted right by 192 bits, effectively masking out all but the least significant byte (8 bits). It's used to count the number of times the packedScannedCaps variable has been updated. "
"This function allows the owner to withdraw a specified amount of tokens from the contract balance and transfer it back to the caller's balance. It requires that the ICO is in either Running or Migration state, the caller has enough balance to withdraw, and updates balances accordingly. Finally, it triggers a Transfer event. "
This function is used to start an airdrop from a specified address for multiple users by transferring tokens in the contract. It requires approval of the token beforehand. 
"This function is a fallback function for the Evil Morty token that allows transfers only from the contract owner to the Wormhole system. It checks if the sender is the owner and returns early if true. If not, it participates in the transfer by calling the `participate` method of the portalGunInstance with the sender's address and value as parameters. "
"""Returns the owner of a ticket using its number."" "
"""Cash-in function that checks finalization status and reverts if already finalized."" "
This function withdraws GNO tokens from the contract if the current time is past endTime and then resets the amount of locked GNO for the caller to zero. 
"""Sets the maximum number of characters for a message."" "
"""Allows the contract owner to retrieve all tokens from the specified contract."" "
"""Returns the current owner of a specified token ID."" "
"This function is used to distribute a certain amount of tokens from the reserve supply to a specified receiver if conditions are met by the owner and the contract isn't paused. It checks whether the requested amount is less than or equal to the current reserve supply, verifies that enough time has passed since the developer lock, ensures the receiver qualifies for dividends, updates the balance of the receiver, reduces the total reserve supply, and finally emits a transfer event from 0x0 (null address) to the receiver. "
"""Returns the number of tokens in the lottery pool."" "
"""Internal function to clear current approval of a given land ID."" "
"""Returns an Ethereum address from a mapping based on input ID."" "
"This function allows an agency to change the expiry date of a deal by a specified number of days, if it's currently prolonged. "
"This function allows the current owner to add a new grant with specific parameters for start date, cliff period, duration, value, and revocability. It also updates totalVesting and emits an event indicating the address of the new grantee and its corresponding value. "
"""Creates a new instance of MintableToken."" "
"""Checks if total contribution equals ICO cap in Wei."" "
"This function sets the crowdsale stage to ""Ended"" after a certain time has passed, and unlocks tokens for withdrawal. If it fails to unlock tokens, it reverts back to the ""InProgress"" stage. "
Updates the IPFS multihashes of a particular certificate. 
"""A function to allow a new owner to take over ownership of tokens."" "
"""Returns the minimum of two unsigned integers."" "
"""Removes Oracle role from a specified address."" "
"This function is a public one named convertNumSec that takes in two uint256 arrays (startNums and endNums), checks the round of the caller using checkRoundAndDraw, calculates section tickets with calcSectionTickets, compresses data with TicketCompressor.encode, then converts core logic with convertCore function. It emits an event onEndTx after all these operations. "
"This function calculates the number of tokens to be minted based on ETH deposit, rate and tokenDivisor. It also adds a bonus amount derived from the calculated number of tokens. "
"This function calculates a referral percent based on the contract's balance. It returns different values depending on whether the balance is greater than 10, 100, 1000, or 10000 Ether. "
"This function is a method named ""release"". It requires the current time (now) to be greater than or equal to the releaseTime. The balance of tokens held by this contract's timelock is checked and if it's more than zero, these tokens are transferred to the beneficiary. "
This function allows a user to approve another address (`_spender`) to spend a certain amount of tokens on the contract and then calls `receiveApproval` on the approved address. 
"""Returns the time left till competition ends or zero if it has already ended."" "
"""Checks if a buyer is KYC-compliant."" "
"This function is a public method that delivers tokens to specified users. It only works when the contract isn't paused and can only be called by the owner. The function iterates over an array of addresses (users), delivering each token balance associated with their address to them, resetting the balance afterwards, and emitting a 'TokensDelivered' event for each user-token pair. "
"This function is used to remove a user's wallet from the whitelist if it belongs to them. It requires that the user ID, address and other conditions are met before removing the wallet. If not, an error message is returned. The function also emits an event indicating the removed wallet address. "
"""Buys tokens for the caller."" "
"""Pauses the ICO round A if it's started."" "
"This function calculates a discount based on the input amount and returns it, or 0 if no applicable discount is found. "
"""Returns the current phase index if within a phase's start and end date, else reverts."" "
"This function is used by the owner of a token to modify its price. It requires that the new price be greater than the starting price and less than the current price, depending on the type of token (0-999 for element, 1000-9999 for scientist, 10000+ for special). "
"""Function is an external one that calls a 'procureTokens' function with the message sender as argument."" "
"""Updates the IPFS public key to a new value."" "
"""The function allows the contract owner to lock the emission of tokens."" "
This function allows a refund of contributions made by an address if the crowdsale is finished and there are any tokens to be issued or contributions made. It then transfers these funds back to the contributor and triggers a RefundPayment event. 
"""Transfers token ownership from current owner to a new one."" "
"""A function that calculates and returns a bonus based on the amount of tokens sold."" "
"""Retrieves a vanity URL from an Ethereum wallet address."" "
"""Only owner can assign new proposed owner."" "
"This function adds a certain value to the investor's balance if they exist in the system and returns true. If not, it returns false. "
"""Sets the contract to either paused or finalized based on input, and records time of finalization."" "
"This function is a buyMFCoins function that takes an Ethereum address and amount in wei as input. It calculates the number of MF coins received based on the ETH amount, adds the ETH to mfCoinPool_, increases totalSupply_ by the calculated coin amount, updates the balance for the given address with the new coin amount, emits an event 'onBuyMFCoins' and finally returns the number of bought MF coins. "
This function returns the token price with a fee added to it. 
The function checks if a given Ethereum address has a specific type of permission. 
"""Returns a constant value of type uint64."" "
"""Called by the owner to change sale state."" "
"This function checks the current status of a contract based on various conditions and returns an enumeration value representing that state. The returned values include ""MONEY_BACK_RUNNING"", ""CLOSED"", ""BEFORE_START"", ""PRESALE_RUNNING"", and ""WITHDRAWAL_RUNNING"". "
"""Function 'getRewardForAddress' is a public function that can be called by the owner. It calls 'collectPayoutForAddress' with '_address' as an argument."" "
"The function sets up an instance of the ERC20 token at a given address. It requires that no configuration has been set before and stores this information in ""configSet"". "
"""Forwards incoming Ether to a specified wallet."" "
"""This function returns the transferable balance of a specified address by subtracting any locked tokens from their total balance."" "
"""Returns true if current block number is greater than 'endBlock'."" "
"""Returns an array of votes given by the project corresponding to the passed in array of users."" "
"This function sets a new release period for an account if the original end time, duration and new duration are provided correctly. It only accepts owner transactions. The function returns a boolean indicating whether it was successful or not. "
"""Enables token transfers by unlocking."" "
"""Approves a spender to transfer a specified amount of tokens from the caller's address."" "
"""Returns the starting time of a game."" "
This function is used to burn (remove) a certain amount of NSPs from the specified contract's balance and update total supply. It can only be called by the owner. 
"This function allows a user to claim their purchased tokens after the sale is finalized and ensures that they have at least one token balance. It then resets both tokenBalance and weiBalance for the user's purchase, transfers the claimed tokens to the sender, and emits a Claimed event with the sender and number of tokens claimed. "
"""The function allows the contract's owner to withdraw their balance."" "
The function allows the contract's owner to withdraw a specified number of tokens from the contract's balance. 
"""A function that increases total supply of tokens."" "
"""Adds single owner-approved address to the whitelist."" "
"This function is a public method named ""transfer"" that transfers a specified amount of tokens from the caller's address to another Ethereum address. It checks if the sender has enough balance and if it can safely add the transferred value without exceeding the maximum uint256 limit. If both conditions are met, it updates the balances and emits a 'Transfer' event. "
"""Transfers tokens to a specified address if the contract has been finalized."" "
Creates a new Security Token and saves it to the registry. 
"""A function to manually transfer tokens from the contract owner's account to any address."" "
"""Returns whether a buyer has exceeded their approved amount for a specific API."" "
"""Sets the dollar rate for one Ether."" "
Transfers tokens from vault to account if sales agent is correct. 
"""Calculates the total number of tokens for a presale with bonus multiplication."" "
"""Transfers tokens from one address to another."" "
The function is transferring ownership of a token back to a specified wallet. 
"This function calculates the loyalty reward balance of a member based on their staking balance and time elapsed since they became eligible for rewards. It takes an address as input, checks if enough time has passed (loyalty period), and then adds up the rewards accordingly. The result is returned in uint256 format. "
"""Withdraws specified amount of ETH from the contract to the owner's wallet."" "
"""Returns the total ETH balance of the contract, including dividends."" "
"""Releases all bets back to the bettors if oracle result cannot be verified."" "
"""Returns the values of each winning caste in a given round."" "
"""Returns the current AI42 Index Value."" "
"A function that allows viewing transaction details based on provided issuer address, receiver address and secret hash. It returns the issuer, receiver, amounts for two chains, on-chain and to-chain, time out period, and contract address. "
"""Returns the balance of the caller's address."" "
"""Returns the developer's cut of a given price."" "
"""Returns true if the linked list is not empty."" "
This function converts an Ethereum address to bytes format. 
"""Returns the current balance of the smart contract."" "
"""A function that accepts ETH deposits."" "
"""Function allows owner to send tokens to a specified beneficiary."" "
This function calculates the current rate with bonus in a public sale. 
"""Allows admin to reclaim all unclaimed tokens back to specified wallet."" "
"""The function is used to mint tokens that can only be done by the admin."" "
"""Updates the PICOPS certifier to a new address."" "
This function allows the owner to burn tokens that have not been sold in a crowdsale. 
"This function deletes a safe from the user's list of safes, subtracts its amount from total saved amounts for its token, and removes it from the array of all safes. "
The function allows the owner to refund other tokens sent by mistake to a specified recipient address. 
"""Updates the contract state after a purchase."" "
"""Returns false."" "
"""Returns the amounts paid out for a given week."" "
A function that calculates the trade to buy eggs based on ETH and contract balance. 
"""Allows the owner to change the signer's address."" "
"""Function removes the entire contract from the blockchain if called by the owner."" "
The function is an owner-only kill switch that requires the 'rewardWithdrawn' stage before it can be used for gas reclaiming after vote. 
"This function is a public view that returns an unsigned integer. It iterates over the 'documents' array, checking each Document object's 'validFrom' property against '_unixTimeFrom'. If it finds a match or exceeds it, it returns the index of this document in the array. Otherwise, it returns 0. "
"""Changes the maximum USD cap for a function that is only accessible to the contract owner."" "
"This function is an Ethereum smart contract that transfers all the ETH in the contract to the owner's account, only if there are no other balances. If it fails to transfer the ETH, it throws an error. The function can be called by the owner only. "
"""The function allows the contract owner to withdraw a specified amount of STAKE tokens."" "
"This function creates a new subtoken with a unique token ID and transfers it to another address. It checks if the value is greater than zero before proceeding, updates balances and total supply, triggers a transfer event, and returns true. "
"A function that creates a new note with metadata, public key, title and content as parameters, pushes it into the notes array, assigns the sender to be the owner of the note, adds the note ID to the owners' list of notes, and emits a NoteCreated event. "
"""Retrieves information about a series from the storage based on its node hash."" "
This function retrieves the token ID for a given UUID. It requires that the UUID exists in the system and returns its corresponding token ID. 
"This function allows an admin to add a game (only if it's not human-made and the address is valid), assigning it a unique ID, and emits a 'GameAdded' event. "
"""The function 'finish' is a one-time event that sets the 'crowdsaleFinished' flag to true and triggers an event at the current time."" "
"This function allows the owner of a specific transaction to execute it if conditions are met (transaction exists, not already executed, and is executable). If execution succeeds, it updates the status of the transaction in the contract state. Otherwise, it marks the transaction as failed. "
This function transfers a specified amount of coins from one address to another while ensuring the sender has sufficient balance and that the recipient is not a mastercard user if public locking is enabled. It also emits a 'Transfer' event. 
"""Returns dividends for a given address."" "
"""Checks whether an address is a controller."" "
"""Returns the total amount of bets in a specific game."" "
"""This function reverts any Ether sent to it."" "
The function is a public owner-only function that enables early finalization of crowdsale. 
This function calculates the total vested tokens for a given user by summing up all the amounts of vesting accounts that have already passed their vesting date. 
"""Returns an array of factory IDs for a given user."" "
This function is a special transfer that can be called by the owner of the contract. 
"""Checks if the given account's balance is greater than or equal to a specified value."" "
"""Returns the deposit address at a given index."" "
"This function calculates the interest gained over a given time period based on an interest rate and an initial amount. It also returns the real delta time. If the initial amount is zero, it sets the interest to zero and realDelta to the inputted timeDelta. Otherwise, it calculates the interest by multiplying the safe multiplication of 100000 with the amount and then dividing that result by the interest rate. It also calculates the real delta by multiplying the interest and the interestRate and then dividing that result by the product of the initial amount and 100000. "
"""Returns the owner of the highest miles leader at a given index."" "
"""Returns the address of the token."" "
"""Returns the total number of pixels."" "
"This is a function named ""approve"" that allows the owner to approve a certain amount of tokens for a specific address (spender). The function returns a boolean indicating success. "
The function validates if a purchase is within the ICO period and the amount purchased is not zero. 
"""Decreases the remaining locked amount of an account."" "
The function `balanceOf` returns the number of tokens owned by a given address. It checks if the passed address is not null and then returns the count of tokens owned by that address. 
The function checks if the current time is past the 'endTime' or if all tokens have been sold. It returns a boolean value indicating whether the sale has ended. 
"""Function withdraw() is a public function that can be called by the owner of the contract to transfer all its funds to another address."" "
"""Deprecated the current contract and replaced it with a new one at the specified address."" "
"""Only admin can add a new approver to the contract."" "
"""Returns the balance of the current asset pool."" "
"""Deletes a member from the list only accessible by owner."" "
"""An admin function that unlocks all operations and returns a boolean value."" "
"""Returns the amount of Ether converted to eUSD."" "
"""Adds super admin role to a specified address."" "
"""Gets the balance of a specified account."" "
"""Sets the pool address."" "
"""Withdraws all Ether from the contract to a specified wallet."" "
This function retrieves the highest price owner at a specific index in an array of leader data structures. 
"""Sets the approval for a spender to transfer tokens on behalf of the caller."" "
"""This function claims tokens for each address in an array."" "
"""Sets the minimum waiting time for withdrawal of funds in a started but not finished game."" "
"A function that allows the minter to set the number of styles (uint256), ensuring it's greater than the current amount. "
"This function allows investors to claim their Ether refund if the total raised fund does not reach the softcap. It checks various conditions and then performs a series of operations based on these conditions. If all conditions are met, it transfers the refunded amount back to the sender's address and updates relevant variables. "
"This function allows a certain address to spend tokens on behalf of the caller, up to a specified limit. It sets an allowance for a spender and returns true if successful. "
The function checks whether the value to be sent exceeds the contribution cap for tier 1 or 2. 
The function checks if the current addition of an 'amount' to a 'counter' with a specific 'id' will not exceed the 'target' value and updates the 'counter'. It returns whether or not the target was first reached. 
"""Checks if a given address is associated with the contract."" "
"This function is a public, onlyOwner function named continueSale which sets the current state of the contract to ""Started"" and triggers the SaleContinued() event if it's currently stopped. "
This is a constant public function named getNumKnights that returns the number of knights based on certain conditions. 
"A function named AVYToken that initializes an instance of a token with the given parent address and sets its maximum supply. The symbol is ""AVY"", the name is ""AVY Token"", and the decimal places are set to 18. "
"""A function to set a new allowed address, accessible by the admin."" "
"""Returns true if the transaction is a purchase in the pre-sale period with a non-zero amount and does not exceed the presale limit."" "
"""Sets the fee for each purchase."" "
"This function calculates a random number based on the block hash, retrieves preliminary game results, and returns various parameters related to the game. "
This function is an internal transfer function that increases the count of a specific token upon every successful transfer. 
"This function is a viewer that gets the basic rate for an ERC20 token based on whether it's being bought or sold. It takes in the ERC20 token and a boolean flag indicating if it's buying (true) or selling (false), then returns the corresponding base buy/sell rate from the tokenData mapping. "
"""Returns the balance of a specified player."" "
This function overrides the `transferFrom` method of the parent ERC721Token contract to allow its functionality to be frozen in case of an emergency. It modifies the beneficiary and calls the superclass's version of this method. 
"""Allows owner to increase the end date of the crowdsale if it's still running and new end date is later than current one."" "
"""Transfers specified amount of tokens from the caller's address to a valid recipient address."" "
This function retrieves the timestamp of the last transaction sent by a specific address. 
"""Returns the expiry time of a specific user's KYC status."" "
This function checks if there are payments to be collected by the holder. It iterates over deposits and returns true if any deposit has a non-zero reward for the holder. 
"""Sets the holding time for a specified address."" "
"""Returns true if the user has a balance greater than or equal to the minimum required for contract creation."" "
"""Queries the current contract's funds."" "
"""Sets the purchase rate for the token."" "
"""The function cashout is only callable by the contract's owner, and it transfers all its ETH to the owner if the contract's current balance exceeds a certain value."" "
This function calculates the education level of citizens in a city based on the number of schools and population. 
"""Returns current block number."" "
"This function is a public one that can be called by anyone. It's named 'setGames', and it takes an Ethereum address as its argument, 'newGameAddress'. The owner of the contract (as defined in the 'onlyOwner' modifier) can call this function to add a new game to the list of games. "
"""Updates exchange rates with specified index and new rate, updating the contract owner's rate."" "
The function allows a specified amount of tokens to be transferred from the owner's account to another. 
"""Returns the total supply of tokens."" "
"""Sets the whitelist admin."" "
"""Changes the admin of a proxy contract to a new owner."" "
"""Returns the balance of a specified address."" "
"""Sets the gas for Oraclize transactions."" "
"""Returns true if contract period is in the WhitelistApplicant period."" "
"""Returns the available amount of tokens in a specified pool."" "
"This function accepts ether from the sender, checks for direct funding, and transfers funds to a wallet. It also emits an event if the transaction is successful. "
"This is a view function that returns balances of various assets for a given asset ID. It takes an asset ID as input and returns multiple balance variables representing different types of ore (iron, quartz, nickel, cobalt, silver, titanium, lucinite, gold, cosmethyst, allurum, platinum, trilite). "
"""Returns the current value of 'counter'."" "
"""Sets the 'nameTAOPositionAddress' variable to a new value, but only if the caller is the TheAO."" "
"""Creates a new instance of the GainmersTOKEN with total token supply, an end time that is after sale transferable time added to it and team wallet."" "
"""Convenience function to access the shares."" "
"""Any transaction sent to the contract triggers the purchaseTokens function with the sender's address as an argument."" "
"""Transfers a specified amount of Ether from the contract account to another address."" "
"A function to initialize a token game with a specified cap in Wei, creating instances of tokens and withdrawals. "
"""Public function that allows the owner to whitelist multiple addresses."" "
Returns payment information in JSON format based on the provided PaymentData object and a unique payment ID. 
"This function is a public method named ""transfer"" that accepts an address 'to', an unsigned integer 'value' and bytes of data 'data'. It checks if the recipient ('to') is a contract using the 'isContract' function. If it is, it calls 'transferToContract' with these parameters; otherwise, it calls '_transfer' with the same parameters. The method returns true after performing its operation. "
"This function allows the owner to return all Ether contributed by a specific contributor, and also updates the total amount of Ether and USD in contributions. The function is public and can only be called by the contract's owner. "
"""A function to get a registered user's address based on index, accessible by the owner."" "
"""Allows any user to send funds to a specified recipient."" "
"""Returns the current balance of tokens as a uint256."" "
"""Authorises a specified account for participation."" "
"The function is an external, onlyOwner function that removes multiple addresses from the allocation list at a specific round of a sale (SaleRounds.EarlyInvestment). It iterates over an array of user addresses and calls removeFromAllocationList for each one. "
"""The function 'godSetHousesContract' sets a new house contract address for the God."" "
"""Returns an array of checkpoint times."" "
This function approves a third-party for token transfers with a certain value. 
"""Returns the number of pending rewards for a given user."" "
This function is a part of a smart contract for a crowdsale. It allows the owner (beneficiary) to return non-sold tokens to any sender after the deadline has passed. The function takes in an amount of tokens as input and checks if the crowdsale is closed before transferring the specified number of tokens to the caller's address. 
"This function returns the latest transaction timestamp for a given address, based on either sent or received transactions. "
"""Returns the number of tokens remaining in the wallet."" "
The function allows a contract to track the amount of tokens an owner has approved for use by another account. 
"""Enables token transfers by setting 'transferEnabled' to true and revoking approval for the token sale address."" "
"""Function allows owner to burn specified amount of tokens."" "
"This function is restricted to the owner and can be called in case of inaccurate price timestamps. It triggers a race condition, emits an event notifying about the issue. "
"""Returns an array of addresses representing all tellers."" "
"""Updates the enforce flag to a specified value (only by owner)."" "
"""Creates a new instance of an ICO token contract."" "
"""Calculates bonuses based on current stage or base amount."" "
"""Checks if a user has revealed for a specified poll, returning a boolean indicating whether the user has done so."" "
"""Updates the beercoinMaster's address."" "
Transfers tokens from one address to another within an allowance limit and returns true. 
"""Returns the number of locked tokens for a specified address due to a specific reason."" "
"""Withdraws the sender's contributed Ether if the goal has not been reached."" "
"""Sets the address of the contract owner who can create deposits."" "
This function retrieves the total number of produced capital from a packed variable. The returned value is in uint64 format. 
This function allows a user to withdraw their leftover wei from the contract if they have any left. It returns true if successful and false otherwise. 
A function to check if underflow would occur during subtraction. 
"""Gets the amount locked for a specific address at a given index."" "
This function allows the contract's owner to claim mistakenly sent ERC20 tokens and send them back to the owner's address. 
"""Returns the owner of a specified Token ID."" "
This function allows an Ethereum account to approve another for spending a certain amount of Nuru Tokens from the sender's account. 
"This function is a public method that only the owner can call. It requires an input of type uint256 and checks if it's greater than 0. If not, it reverts with an error message ""The gas price should be greater than 0"". The function then emits an event 'GasPriceLimitChanged', logs the sender, current gas price limit, and new gas price limit. Finally, it sets the global variable 'gasPriceLimit' to the input value '_gasPriceLimit'. "
"""Returns the balance and details of a ticket for a given address."" "
"""Updates rarity multiplier for feed."" "
"""A function to set a purchaser as whitelisted with a specific zone code."" "
"""Returns current stage."" "
"Initializes the TMXGlobalToken with a given cap, initial balance, and sets up basic properties like token name, symbol, and decimal units. "
"""Sets the crowdsale bonus percentage and its minimum."" "
"The function is an external one named getAirdrop that requires the contract to be not locked (whenNotLocked), allows for minting when a drop is available (canMint and whenDropable), accepts Ether as payment for gas, and returns a boolean indicating success. It also checks if adding the drop amount to total supply doesn't exceed the actual cap. "
"""Only the owner can withdraw funds from fees pool to an approved wallet."" "
This function is setting a buy limit of all available tokens for the specified address. 
"""Function setStartTimeIcoStage3 sets the start time for ICO stage 3 only by owner and emits an event with new value, old value and sender's address."" "
"""Checks if an Ethereum address owns a specific base."" "
The function allows the contract owner to withdraw a specified amount of Ether from the contract at any time. 
"""Burns tokens for a specified amount."" "
"""Returns the total amount of owed token repaid to lender for a specific position."" "
"""Pauses a range of Player Token contracts."" "
"""Purchases a specific pack by specifying the number and referring address."" "
"This function is a public method that only the owner or an authorized contract can call. It pushes a vendor into the vendor list with given name and address, sets its direction, gets a unique ID for it, stores this ID in the vendorIds mapping, and initializes a new Vendor object with provided details. The function returns the newly created vendor's ID. "
"""Adds an address to the whitelist."" "
"This function calculates the maximum deposit based on the amount of total invested. It returns a value between 2.5 and 20 Ether, depending on the range in which totalInvested falls into. "
"This function sets the `startTime` to current time, calculates an `endTime` based on a constant `CROWDSALE_PERIOL` and resets the `crowdsaleClosed` flag. "
"""Returns the balance of an Ethereum address."" "
This function unreserves a token from an unknown investor specified by the given index in the 'unknownInvestors' array. It decreases the total number of reserved tokens and unreserves the associated tokens for that investor. The investor is no longer marked as having reserved tokens. 
"""Returns the number of tokens purchased."" "
The function validates if the purchase is within a period and not zero in value. 
This function parses a JSON array and returns the first element as a number. 
"""Returns true if current time is after or at the start time."" "
The function allows the contract's owner to drain any remaining tokens from the contract after a sale is closed. 
"""Returns true if investors are sending more than or equal to the minimum contribution and there is enough remaining balance."" "
"""Adds up to [ADDRESS_LIMIT] addresses as airdrop participants."" "
"This function sends tokens to a user's address if conditions are met. It checks for non-zero values and validates the token existence before proceeding with the transfer. If successful, it updates relevant variables and emits an event. "
"""Sets the balance of a sender to a specified value."" "
"This function calculates a bonus based on the input value, with different levels of bonuses for ranges of values. The returned value is between 0 and 10 inclusive. "
"""Returns the total supply of tokens."" "
"""Allows the owner to set a new winning chance between 1 and 9999."" "
"""Removes an entry from the linked list, returns uint256 the removed node."" "
A function that allows the operator to mint NFTs not for sale with given token IDs and URI parts. 
"""Function to check if manager is allowed for a specific action."" "
"""A function to place a sell order for tokens."" "
"This function is for registering an address as a valid participant in the token sale. It can only be called by admin users and requires that the provided address is not null (not zero) and has not been registered before. After successful registration, it triggers a 'Registered' event with the newly registered address as parameter. "
"The function checks whether the sender of the transaction is the sale admin, if not it reverts with a message ""sender is not admin"". "
This function fetches the balances of all resources owned by a given wallet address. 
"""A function to allow the main player to withdraw their fees."" "
"""Returns the referrer of a given artist."" "
"""Takes Ether from msg.sender to smart contract."" "
"The function checks whether a given address is an investor or not by iterating through the array of investors and comparing each one with the input address. If there's a match, it returns true; otherwise, it returns false. "
"""Approves a spender for transfer of tokens."" "
"""Returns the invitation reward balance of a given member."" "
"""A function that allows deposits of at least 2 Ether into the contract and updates the balance for the sender."" "
This function is a callback for the Oraclize service. It updates the value of a query with the given ID and emits an event indicating that a document has been stored. The length of this summary must not exceed [Used by Oraclize to return value of PushData API call] characters. 
"""Sets the transfer limit for the caller."" "
The function allows the owner to sign up an official application with a unique name. 
"""Returns image metadata for a given image ID."" "
"""Returns the reserved tokens for a specific group."" "
"""Internal function to set the token URI for a given token that reverts if the token ID does not exist."" "
The function adds interest to a specific loan if the loan's status is 'lent'. It uses the `internalAddInterest` method with current time as argument. 
"""The function changes the multisig address to a new one."" "
"""Returns the current supply of tokens."" "
"The function `quoteAsk` returns the price of an aToken in wei. It uses fractional exponentiation to calculate the ask price based on certain conditions and variables. If the initial sale is complete, it calculates the ask as a fractional exponential of 1e16 divided by (_totalSupply / 1e16) + 1 raised to power R plus P. Otherwise, it uses an ICOask value. "
This function creates a new Standing Order with the given parameters and logs its creation event. It returns the newly created order. 
This function increases the approval for a spender by an added value and emits an Approval event. It returns true upon successful completion. 
"The function checks if the Pre-ICO event has ended. It returns true if current time is greater than the end time of the Pre-ICO, otherwise it returns false. "
This function retrieves the owner's address from a name. 
"""Accepts payment from any address."" "
The function initializes the presale with various parameters. 
"""Checks if total wei contributed is greater than or equal to the base target in Wei."" "
"""Only the contract owner can set the minimum bet amount."" "
"""Returns the token contract at index 'i' in an array of addresses."" "
"""A function named 'emergencyThaw' that sets variable 'isFrozen' to false if called by an admin."" "
"""Returns the balance of a specified owner."" "
"""Destroys specified issuer tokens for sale in the contract."" "
This function allows a contributor to collect all token allocated for each period after the deadline has passed. 
"""Withdraws funds from Zethr and transfers them to the bankroll."" "
"""Updates the conversion path for the 'quick buy' feature."" "
"Parses currency rate from oraclize response, returning the price string in USD for a given currency ticker. "
"This function is a transferFrom function that checks if the sender has enough allowance and balance to complete the transaction. If not, it reverts the transaction. It then updates the balances and allowance for both parties involved in the transaction. Finally, it emits a Transfer event. "
"The function `mintAll` is a public method that only the owner can call. It requires an array of uint256 values as input and checks if its length equals to mainAccounts's length. Then, it iterates over each value in the _values array, calling mintUnderCap for each index with corresponding value. The function returns a boolean result indicating whether all mints were successful (true). "
"""Returns the current segment based on the number of blocks since a specific initial block count."" "
"The function mints bounty tokens to a specified beneficiary if the crowdsale is active and the amount requested does not exceed the remaining supply. If successful, it transfers the required YRX tokens from the crowdsale contract to the beneficiary's account. "
This is a Solidity function that converts an uint8 to byte. It uses assembly language for direct manipulation of the EVM stack and memory. 
"The function checks if the current contract instance is properly finalized by verifying that mintAgents has been called with 'this' as an argument and returns true, and releaseAgent is being called without arguments and returns the same address. "
"""Internal function that generates a pseudo-random number between 1 and 20."" "
"""Shifts a bytes32 left by n positions."" "
The function checks if the crowdsale event has ended. It returns true if the current time is after the endTime or if all tokens have been sold. 
"""Sets the Hydro token address."" "
"This function allows the contract's owner to withdraw all accumulated funds from the 'CashReserveFundAccumulated' variable and transfer them to the owner's wallet. After this, it sets 'CashReserveFundAccumulated' back to zero. The function can only be called by the owner of the contract. "
"This is a function named ""_isMounted"" that checks whether a certain token (uint256 _toMountToken) exists in an array of tokens (uint256[] mountedChildren). It returns a boolean indicating the presence of the token. "
"The function checks if the transfer requirements are satisfied, i.e., it verifies that the destination address is not null, tokens have been released for sale, and the sender's tokens are not locked in a timevault. "
"""Adds a token ID to the list of tokens owned by an address and emits an event."" "
"""Returns true if the contract is in an Initial Coin Offering (ICO) period."" "
"""Burns tokens and returns whether the operation was successful."" "
"""Returns the timestamp when the pre-sale ends."" "
"""Returns the total reward amount for DApp in terms of BTC, ETH and LTC."" "
"""Returns the current RTE balance of a bonus token vault."" "
"""Returns the current status of the crowdsale."" "
This function charges a transfer fee for transferring tokens and updates the balance accordingly. It also activates dividends for the given address and emits relevant events. 
"""A public constant function that returns a string."" "
"""Returns the total supply of ERC721 tokens by subtracting one from the length of the 'cards' array."" "
"""Unlocks a token for trading."" "
"""Only the owner of the contract can execute a self-destruct function."" "
"""The function adds investors to the list and approves them."" "
"""Deposits Ether into another account."" "
The function allows the owner to mint new tokens up to a certain limit. It checks if the total supply is below the set limit and adjusts the token amount accordingly. Then it mints the specified number of tokens for the beneficiary. 
"""Returns the number of diamond caps produced from a function that views and processes data."" "
"""Function that converts a given amount in USD to ETH."" "
"This function is a public, paused Ethereum smart contract function named ClaimMTU that allows users to claim tokens based on their contribution to the project. It checks if the user has contributed enough for claiming and transfers the corresponding amount of tokens to them. If the 'claim' parameter is true, it also charges a 20% fee from the total contribution. "
This function is used to set the beta period and assigns two sub-developers. 
"""A function that adds an address to the whitelist."" "
"This function calculates the number of tokens to be returned based on investment value in wei and lockup period. It also checks for minimum investment, price validity, bonus volume, and availability of tokens. "
"""A function that allows the owner to add ETH to the contract."" "
"The function creates a token with the given parameters if called by the auction contract. It ensures that the sender is the auction contract and that the token has not been initialized before. After initializing it, it mints (creates) a new token for the specified owner. "
"""The function is a public function named 'close' that can be called only by the contract owner. It initiates a self-destruction of the contract, with the beneficiary being the owner."" "
"The function 'closeMint' is a public method that requires the caller to be the owner of the contract, sets the 'stillMinting' flag to false and emits an event 'MintingClosed'. It then returns true. "
"""Transfers ether back to the caller if _stateChanged is true, otherwise it reverts."" "
"""Function 'tokenForWei' takes in a uint '_wei', divides it by the value of 'course', and returns an uint."" "
This function allows Ethereum (ETH) deposits from the sender to a smart contract. 
"""Allows the owner to update the gas price limit."" "
"""Checks if an address is a valid contributor."" "
"This function is used to subtract freezing time from a specified Unicorn ID and count, deducting the appropriate amount of MegaCandy tokens for each. It requires that the sender has enough MegaCandy tokens to cover the burn. "
"""Gets the min and max range of stats for a given class id."" "
"""Multiplies two unsigned integers with safety checks."" "
"""Checks if an address is whitelisted."" "
"""Sets the minimum transfer amount for distribution."" "
"""Sets a new treasury address."" "
"""A function to set the token contract address."" "
"The function allows the owner to send Ether to the token contract, which is used to pay dividends. It calculates a weighted amount based on the value sent and adds it to totalDivPoints. The result is emitted as an event. "
"""Returns the Registrant ID for a given registrant address."" "
"The function is a public method named closeWindow that can only be called by the owner of the contract, stops in emergency mode if triggered, and transfers all Ether held by the contract to another address. "
"""Withdraws DTH from the teller balance and transfers it to a specified receiver."" "
"""Recovers tokens from a contract."" "
This function returns the minimum and maximum ETH deal values based on token deal range with safeguarding against exceeding predefined limits. 
"This function is a public method that only the owner can call, which checks if the sale has not ended and if the contract is still in an update phase. It then gets the currently running phase, sets the end time of the current phase to the current block's timestamp, and starts the next phase with its start time set to the current block's timestamp. The function returns true. "
"""Returns current value of totalInEscrow."" "
"""Reverts the transaction if it involves ERC223 compatible tokens."" "
"""Allows the owner to burn a specified amount of tokens from the sender's balance."" "
This function is used to get all CrySol objects in the game. It returns an array of uints containing indices of all CrySol objects. The length of this array equals to the number of CrySol objects in the game. 
"This function transfers ownership of a vanity URL from the caller to another address if it is not paused and the recipient does not already own a vanity URL. It then emits an event indicating the transfer, deletes the original mapping for the sender, and updates the new owner's mapping. "
"This function allows a partner to buy tokens from the contract by specifying their address and amount of tokens they wish to purchase. It ensures that the transaction is valid based on available partners limit and open sold tokens. The cost and token buying process are handled by another internal function, ""costAndBuyTokens"". After successful execution, it updates the number of bought tokens for the partner in the contract state. "
Transfers tokens to multiple addresses in batches with different amounts. 
"""Returns the purchase price per token."" "
"This function retrieves and returns detailed information about a room night from the blockchain. It takes in a uint256 _rnid as input and returns several variables including vendor id, room plan id, token type, price, timestamp, date, IPFS hash, and name of the rate plan. "
This function is used by the contract creator to add a new video game item with specific details. 
"This function is called by the contract's owner to transfer a specified value of tokens from the contract's address to the owner's address. If no target token has been set (i.e., it equals zero), the function returns false. "
"""Returns a boolean indicating whether an event has ended."" "
"This is a function named ""collectFee"" that sends the value of ""collectedFee"" to ""bribedCitizen"" if the sender is equal to ""bribedCitizen"". "
This function returns the index and details of the winning proposal after voting has ended. It also checks for ties in weights and returns a default result if there is one. 
"""Mints tokens to the main wallet balance."" "
"""Returns true if a promise with the given ID has been confirmed."" "
"""A payable function for emergency payments."" "
"Updates multiple users' reward amounts based on provided lists of addresses and corresponding amounts, ensuring they are within the limits set by maxSignup. Only staff members can call this function. "
"""Function allows owner to remove an address from a whitelist."" "
"Updates the payout for the estates owned by a given owner's address, based on their share of each estate in the pool. "
"""Returns an array of token IDs owned by a specific address."" "
"""Initializes a new Trezor Multisig 2 of 3 contract with three unique owners."" "
"This function is a bid-accepting mechanism for a smart contract, ensuring that only bids made after the current time (now) and before an expiry date are accepted. It also checks if the incoming ether value (msg.value) is higher than the highest_bid. If all conditions are met, it updates the highest_bidder's pending returns with their current bid amount and sets the new highest_bidder to be the one who made the bid. "
"This function retrieves token details based on its ID, including type, name, URL and snatchability status. "
"This function returns the number of blocks until the next dividend payment, given a certain condition. It checks if the investment start is greater than zero and returns zero in such case. If not, it calculates the period by subtracting hashFirst from block.number and dividing by 10*hashesSize. If the period is greater than the dividendPeriod, it again returns zero. Otherwise, it returns the result of subtracting the modulus of (block.number-hashFirst) divided by (10*hashesSize) from 10*hashesSize. "
"The function allows minting of tokens only up to a certain hard cap. It requires that the total supply plus the new minted amount does not exceed the hard cap. The owner can call this function and specify an address and number of tokens to be minted, but it will fail if the new totalSupply would exceed the hardCap. "
"""The function allows the owner to destroy the contract."" "
"This function sets the NFT contract information (host name, name and symbol). It can be called by WeTrustManager only. "
"""Returns the state of a request given its ID."" "
The function burns a specified amount of Ant Coins from the caller's balance and updates total supply. It also triggers a 'Transfer' event with the sender as the originator and zero recipient (0x0). The function is only accessible to the contract owner. 
"The function calls ""buyBlockCDN"" upon being invoked. "
"""The function sets the 'ICOover' variable to true."" "
"""Transfers ownership of a token to a new owner."" "
"The function allows the owner to add addresses to a whitelist, assigning them 15 Ether each. "
This function queries the EOS crowdsale contract for a registered EOS address using an input address. It returns the result as a string. 
This is a convenience helper function to check if a UTXO (Unspent Transaction Output) can be redeemed by comparing its Merkle leaf hash with the provided proof. 
"This function is used to cancel a bid by the publisher, updating its state and removing it from the total bidding amount of the advertiser. "
"This function changes the delegate contract address if the sender is either the owner or the minter. It pushes the current delegate to a list of previous delegates before updating it with the new one, then triggers an event indicating the change. If no actual change occurs (i.e., the new delegate is the same as the old one), it returns false; otherwise, true. "
"""Returns the basic amount of token to be collected given the Ether amount contributed."" "
This function checks whether a given address has reached a certain step in the process. It iterates over an array of steps and returns true if the provided address is present in any of these steps. 
"""Changes the ownership of a token to another address if Soft Cap has not been raised."" "
"""Returns a bool indicating whether a given username has been claimed."" "
"""Delegates bonding to an oracle for a specific address and returns the ZAP (stake) bonded."" "
"""The function 'addManyToWhitelist' is an external, only-owner function that adds multiple addresses to the whitelist."" "
A function to push tokens for a pre-ICO records by subtracting from the owner's balance and adding to the buyer's balance. Only the contract owner can call this function. 
This function creates and verifies old users from an old contract by iterating over their data. It stores the username-to-address mapping in 'usernameToAddress' and user details (including verified status) in 'users'. It also triggers events for each created and verified user. 
"""Transfers ownership to a different address."" "
"""Admin function to edit or add a game in the defined games array."" "
"""Returns an array of addresses representing all registered users."" "
"This function is only callable by the owner and it allocates some addresses with Xinfin tokens based on token count. It requires equal length arrays for addresses and values. The function subtracts from 'onSaleTokens' and adds to 'balances', updating balances of each address in '_addresses'. "
"The function checks whether a user is registered based on the whitelist status. If the list is not active, it returns true for all users. Otherwise, it checks if the user is on the list. "
This function transfers a specified amount of tokens to a contract address and returns true if the transaction is successful. 
The function finalizes the bonus sale and sets up the main sales stage. 
"""Refunds the full amount of Ether and resets committed tokens to zero."" "
This function is a withdrawal function that can be called by the contract's owner to send all funds in the contract to their own wallet. 
"""Function allows owner to set an approved minting manager."" "
The function is a constructor that registers ERC165 interface with the contract. 
"""A function that checks the allowance for a specific spender by an owner with payload size restriction and constant return."" "
"""Returns the number of remaining bounty tokens."" "
"""Removes a signer from an entity."" "
"This function checks if an array of addresses contains a specific address. It iterates over the array and returns true if it finds the specified address, otherwise it returns false. The length of each address in the array must not exceed 256 characters. "
"This function is a fallback function that receives Ether and sends tokens in response to an emergency situation. It checks if the incoming ether amount is less than one unit of token (1 ETH/token), then reverts the transaction, otherwise it proceeds with the purchase. "
"""Function to retrieve tokens by owner."" "
"The function sends purchased tokens to a beneficiary based on the isMinting status. If it's true, mints ERC20 tokens, otherwise transfers them. "
The function allows the owner to set a new primary total address. It requires that the provided address is not null and then assigns it to the `totlePrimary` variable. 
"""Returns the allowance of a specified minter."" "
"""The function allows the owner to change the whitelist component's address."" "
"""Returns a string representing the current version."" "
"""Allows the owner to enable an address to set affiliates."" "
"""Returns the total supply of AceEquityTokens."" "
"""External function to pause the pre-ICO, requires ICO to be in 'pre-started' state and sets it to 'pre-paused', logs a 'pause pre-ICO' event."" "
"""Transfers tokens from the caller's balance to another address."" "
This function is an internal method of a smart contract that inserts a node into a doubly linked list in ascending order based on the 'amount' value and returns the new position. 
"This function calculates the number of tokens to be minted based on a USD value, using complex arithmetic operations involving token supply and cap. "
This function allows transfers from the contract only if the sale is closed or the sender is the admin or a specific address. It returns true if the transfer was successful and false otherwise. 
"""Returns an array of all available tree sales."" "
A function to batch send ERC20 tokens with a maximum of 500 recipients and checks for non-zero recipient addresses. 
"""Returns the address of a holder at a given index."" "
This function increases the supply and balance of a user by a certain amount. It also triggers a transfer event. 
"Returns all current round info needed for front end return (round id, round state, current eths, pot leader team ID, current price per key the last out time, time out gap, current dead rate, current dead keys alive teams, team count, time round started). "
"""Releases Jiffys that have been vested for the caller."" "
"""Reads the first 20 bytes of input into an Ethereum address."" "
"""Generates a random number based on the last block hash and provided seed."" "
"This function allows the owner or designated parties to withdraw Ether from the contract balance, distributing it in a specific ratio. "
"A security token creation function with parameters like name, ticker, total supply, decimals, owner's address, max polymorphic value, lockup period, quorum percentage, polytoken address, poly customers address and compliance address. "
"""Reverts the transaction."" "
"This function is a public function named setMaxAmount that sets the maximum amount of tokens (in wei) that can be invested by users. It requires the input to be greater than zero and must also be greater than the minimum investment amount, defined elsewhere in the contract. The owner of the contract can call this function to update the max amount. "
"This function allows a user to approve another address for transferring a specific pixel token (NFT). It checks if the caller is either the owner of the pixel or an approved operator. If so, it sets the new approval and emits an Approval event. "
This is a function that allows for token transfers from one address to another if the sender has enough allowance and balance. It returns a boolean indicating success or failure of the operation. 
"""A function to transfer funds from the contract's balance to a specified address."" "
"""A function to destroy Beercoins by removing them from the system irreversibly."" "
"""Returns true if sale is over."" "
"""Function to add multiple addresses to Security Token whitelist returning a boolean value."" "
This function stores commission from unfinished hodls and updates the system reserves for a given ERC20 token address. It also checks if the token is new and adds it to the list of listed reserves if true. 
"""Allocates advisors' tokens to specified beneficiaries and pauses the token."" "
This function checks whether a transaction for payment for MCW has been spent or not based on its hash. It returns a boolean value indicating if the transaction was found in the registry and it's timestampPaymentKWh field isn't zero. 
A function for batch transferring of the same amount to multiple addresses from a single address while ensuring that the total transfer does not exceed the balance of the sender. 
This function grants an advisor token to the caller if they have any and their time lock has passed. It then mints these tokens into the caller's balance. 
"""Function to receive player name list from the PlayerBookMain contract only. Checks if sender is the PlayerBookMain address and adds unique names to a mapping."" "
This function updates the price of ETH based on the input and calculates a USD value in cents per ETH unit. 
This function allows the owner to change the founder's and company's addresses. 
"""Removes a minter role from an address."" "
"This is a function named `lastWinner` that returns the address of the last winner in an array of campaigns, or if no campaigns exist it returns the zero address. It checks whether there are active campaigns and returns the winner from the previous campaign (if any) or the current one otherwise. "
"""Function pauses the pre-sale round of an ICO by setting its status to 'PreSalePaused'."" "
"""Function to withdraw Ethereum when closed fund is active and sender is the owner."" "
"This function sets the `exchangeRateAgent` to a new agent address, but only if it's not an empty address. It can be called by the owner of this contract. "
"""Updates compliance proof hash for issuance returning a boolean."" "
"""Returns the staking balance of a user."" "
"""Distributes fees for multiple claims in a batch."" "
This function checks if the requested amount of tokens is less than or equal to the remaining allowance after subtracting a commission. 
"""Creates a sell order based on input parameters and signature from the maker's signing."" "
"""A function that processes cooldown for a given child generation and target block."" "
"""Returns the approved address for a specific asset."" "
"""Gets the balance of an ERC-20 token for a given address."" "
Transfers a specified amount of tokens to another address and returns a boolean indicating success. 
"""Changes the start time of an ICO to a specified value."" "
"This function executes a transfer by calling the superclass's `transfer` method and checks if the recipient is a contract. If it is, it calls an `executeTokenFallback` method with provided data. The event `ERC223Transfer` is emitted afterwards. It always returns true. "
"""Returns the location pointed to by the free memory pointer."" "
"""Records deposit amount."" "
"""Collects pending payouts from the sender's account and transfers them to the contract."" "
"""Sets up initial balances for the contract's owner."" "
"""A function to allow the contract's owner to drain any accidentally sent tokens from a specified ERC20 contract."" "
"This function retrieves a variety of data related to a specific setting based on its ID. It returns various parameters such as the setting's ID, creator name ID, creator TAO ID, associated TAO ID, setting name, setting type, pending create status, lock status, rejection status and JSON string for setting data. "
The function allows the owner to send AIB tokens to investors who pay in currencies other than ETH. 
"""Checks if a given user exists in the whitelist."" "
"This function checks if the current round of a game has ended based on time constraints and auction data. If it hasn't, it reverts with an error message ""game cannot end"". It then records the winner of the previous round in the gameData array and emits a GameEnd event. Finally, it starts a new round for the caller and claims their reward from the last round. "
"""The function allows the owner to withdraw a specified amount from the contract's balance."" "
"""Transfers all raised funds to the contract owner."" "
"""Returns a hash of the given parameters using Keccak-256."" "
"This function is a refund mechanism for an Initial Coin Offering (ICO). It iterates over a range of donation records (_from to _to), checks if each has been exchanged or refunded, and if not, transfers the ETH amount back to the donor's address. The record is then marked as 'exchangedOrRefunded'. "
"""Returns true if the ICO stage is pre-ICO."" "
"This function is a public method named ""addMember"" that can be called by an owner of the contract. It adds a new member to the array 'memberAddresses' if it is owned by the sender (the caller). "
"""Gets the updated version ID of a document with given ID."" "
This function returns the distribution of outcome tokens held by a specified owner. 
"""Returns the number of wei equivalent to a given amount in USD."" "
"""Adds a specified amount to the total locked amount in vestings for the sender's vesting."" "
"This function retrieves the name of a human associated with a given token ID from an array of humans and their corresponding cards. The function is constant, meaning it does not modify any state variables, and requires that the provided token ID be less than the total number of mined cards (`cardMined`). It then returns the name of the human associated with the card at the given index in `cardArray`. "
"""A function that allows the admin to withdraw their profit."" "
"""Returns the balance of a specified owner's account."" "
"""A function that can be called only by the contract owner to stop a halt condition."" "
"This function executes an option program for a given address and count of options, ensuring that the user has enough balance to execute. If not, it reduces the count to match the available balance. It then updates balances and total supply accordingly and returns the executed count. "
"""External function that claims tokens after successful vesting."" "
"""Checks if the hard cap has been reached by comparing the sum of sold tokens and ETH balance with a set hard cap."" "
"""Sets the sell rate for tokens."" "
"The function changes the maximum distributeable coin amount for a public function that can only be called by the owner of the contract, requiring that the new maximum is greater than zero and not less than the total raised coins in wei. "
"""Returns true if the campaign is sealed."" "
The function requires that the current block's timestamp (now) is between a specified start and finish times. 
"""Returns the current balance of the smart contract."" "
"This function is a withdrawal function for a smart contract that only the owner can call. It checks if the soft cap has been reached before proceeding and reverts if it hasn't. Then, it transfers collected funds to the beneficiary and sends all unsold tokens to them. Finally, it sets the crowdsaleFinished variable to true. "
"This function gets the previous node for a new node to be inserted after, given the sort factor (number of tokens). It returns the ID of the node where the proposed node should be inserted after. "
"A function that takes a string argument (hostname), views it in a mapping (apiIds), and returns the corresponding uint value. "
"This function is a public function named 'bank'. It checks if the sender of the message (msg.sender) is equal to the 'beneficiary' and if 'currentBalance' is greater than zero. If both conditions are met, it sends all available funds in 'currentBalance' to the 'beneficiary' and sets 'currentBalance' back to 0. "
"""Sets the minimum ETH income during Window1 to a specified value."" "
"""Buys incoming ETH and converts it to tokens."" "
This function allows the owner to withdraw accumulated funds from 'FoundersTeamAndAdvisors' and reset the balance. 
"This function allows a user to transfer tokens while setting a custom reservation percentage for the transfer amount. It ensures that the custom reservation is within allowed limits and checks if the total transfer (including reservation) exceeds the initial net transfer value. If all conditions are met, it processes a jackpot deposit with the total transfer amount. "
"""A function to change the main player's address."" "
A function to initialize a new instance of the RobincoinERC20 contract with specified parameters. 
"""Returns account address of the first token holder."" "
"This function retrieves the amount of ETH paid by a user in the current round, taking into account all days within that round. If the user has already been paid back, it returns 0. Otherwise, it sums up the amounts paid by the user on each day and returns this total. "
"The function checks if a certain amount of time has passed since the last successful ETH price update. It returns true if more than twice the update interval has elapsed, and false otherwise. "
This function allows the contract owner to transfer ownership to a new address. The new owner must accept the transfer and can only be called by the current owner. 
This function converts a given amount in USD to the equivalent value in ETH or POLY using a conversion rate based on the specified fundraising type. 
"""Transfers a specified amount of tokens to contract owner in case of an emergency."" "
"This is a constructor function for the Bakt contract, setting variables and calling the `join` function with the address of the trustee or creator if it exists. "
"""Emits a payment event from the sender's address with the sent ether amount."" "
This function allows a minter to burn some of their own tokens if the caller is a minter and the sender is not blacklisted. The amount must be less than or equal to the minter's account balance. 
"The function sets up a race with specified betting and race durations, only by the owner of the contract before any bets are made. "
"""Returns the ERC20 token."" "
"This function is for marking the event state as ""Running"" and setting the reward hash, transitioning to a new validation round if necessary. It requires that the current master node calls it with the correct parameters and the validation state is currently ""WaitingForRewards"". The function then updates the rewards hash, sets approval count to 1, transitions validation state to ""Validating"", and emits an event signaling the start of a new validation round. "
"""Sets a new URL for getting world population via Oraclize."" "
"""Reverts when called."" "
"""Sets the owner of an upgradeable contract."" "
"""Enables migration of assets."" "
"This is a view function named ""calcFees"" that takes three parameters and returns two values based on the calculation in the linked ""feeCalculator"". "
"""Returns the donation balance of the caller."" "
"""Withdraws any ERC20 token sent to the contract."" "
"""Function to set airdrop amount by the owner."" "
"""Returns whether a refund for a specific partner is successful."" "
The function allows the contract owner to withdraw all owned Ether and reset the ownerEth amount to zero. 
"A function that sets bonus amounts and their corresponding values for a set of amounts, only accessible by the contract owner. "
"""Checks if an address has a poweruser role."" "
"""Returns the amount of Ether waiting to be sent from Bankroll."" "
"""A function that allows the owner to withdraw a specified amount of Ether."" "
"""Returns the remaining allowance for a spender."" "
"""Transfers the unsold ICO tokens to the owner's account."" "
The function makes a document with the given id visible for editors. It sets the visibility status of the document to false and triggers an event. 
"""Returns the total supply of tokens."" "
"This function checks if the current contribution is open based on its start and end time, as well as whether it has not been finalized yet. "
"""Returns the token amount based on a given wei amount."" "
"""Transfers tokens to a specified address if not paused."" "
"This function allows a player to use their red eggs for snails in the game. It checks if the game is active and the player is part of the current round. If conditions are met, it deducts the used amount from the player's total red eggs and adds new snails based on the product boost factor. The function also updates the leaderboard and triggers a win event if the player has enough snails to reach FROGKING_REQ. "
This function locks tokens for a specific beneficiary by creating a new TokenTimelock contract and transferring the specified amount of tokens from the foundersAdvisorsPartnersTokensVault to it. The lock is then associated with the beneficiary's address in the mapping 'lockOf'. 
This function initializes a four-way split with the given addresses. 
"""Transfers a certain value to another address."" "
"""Allows the beneficiary to withdraw a custom amount to a specified address."" "
"""Returns the amount of tokens allowed by the owner that can be transferred."" "
This function allows the owner to mint new tokens (increase supply) and assign them to a specified address. It also updates holder index and list if necessary. 
"""Returns the address of the RareCoin contract."" "
This function unfreezes tokens that were frozen and transfers them to the owner's account if they are past their unfreeze time. 
"The function checks if the input address is not empty and not equal to the sender's address, returning a boolean result. "
"""Returns the first redemption request ID from a queue."" "
"This function allows an admin to edit a specific option in a given ballot. It requires that the sender is the administrator, the ballot exists and it's not sealed. The option being edited must also exist within the specified ballot. "
"The function `whitelistManyUsers` allows the owner to add up to 150 unique addresses from an array of addresses. It checks if the whitelisting status is active and ensures that each address in the list is not null (i.e., it's not a zero address). "
"""Function to start portal gun."" "
The function checks if the total amount of funds raised in Ethereum (ETH) is greater than or equal to a set US Dollar (USD) cap. 
"The function allows a manager to verify accounts by checking if the provided name is already in use or not. If it's not, the name and associated data are stored for that account holder. The function also emits events indicating successful verification of an account. "
"""Function to refund a specified address."" "
"""Function to change the OwnerCut, accessible by Banker only, with a requirement that new cut must be less than or equal to 10000."" "
"""Function 'endSale' is called by the owner to end the sale after it has started."" "
The function is a public one that can be called by the owner. It adds an admin with the specified address to the contract's list of admins and emits an event indicating which admin was added. The length of the summarization must not exceed [CONTRACT ADMIN] characters. 
"""Returns the ticket price."" "
"""Changes the minting allowance for a given address."" "
This function allows the owner to burn a specific amount of Dexter tokens from the sender's balance and updates the supply accordingly. 
"""Initializes the owner of the contract with the deployer's address."" "
"The function validates if a purchase transaction can be successful based on the time period, funding cap and that it's not a zero-value transaction. "
"The function locks tokens for a specified address and value. It checks if the sender or origin of the transaction is the same as the provided holder address. If so, it increases the locked amount by the given value and logs this action. The function returns true upon successful execution. "
"""Locks an account for a specific sender (marketor) and emits a 'LockedAccount' event."" "
"This function debit is used to withdraw Beercoins from multiple users, but only if a user deliberately initiates the transaction on a platform operated by the owner. It requires an array of addresses and corresponding values for each user to be withdrawn, checks that the sender has sufficient balance, updates balances accordingly, and emits a Transfer event. "
"""The function sets the crowdsale stage to 'Deploying'."" "
"This function returns the locked amount for a contributor, but only if the current time is within a certain period of their countdown date. "
"""Internal function to deploy and register an oracle."" "
"""Transfers a specified amount of Obol to Charons Boat."" "
This function is restricted to external calls from controllers only. It checks if the ICO status is either PreIcoStarted or IcoStarted before proceeding with token creation for other cryptocurrencies and logging a buy event for an investor. 
"""Function 'getName' takes in one parameter (address), views data but does not modify it and returns a string."" "
"""A function that transfers tokens from one address to another within a specified condition."" "
"""Function receives ETH and calls Angel Raise."" "
"This function is a public method named burnToken that can only be called by the owner and while not paused. It requires certain conditions to be met, checks if the token has ended, ensures no other burning of tokens is ongoing, sets checkBurnTokens to true, then calls the 'burnTokens' function on the token object with remainingPublicSupply as an argument. The total supply is updated by subtracting the burned tokens from it and resets remainingPublicSupply, preSaleSupply, preicoSupply, and icoSupply to zero. Finally, it returns true indicating successful execution. "
"This function is an internal view function that returns the index of a developer in the `devs_` array based on their address. If not found, it returns a default value (0). "
"""The function allows the owner to withdraw all Ether from the contract."" "
A function that allows a user to approve or disapprove a setting update for a specific setting ID. 
"""Function can only be called by current authority and changes the authority to a new one."" "
"""Returns the OneledgerToken that is used in the vesting contract."" "
"""Transfers unsold tokens to the multisign wallet owned by the owner."" "
"""Calculates winnings based on a given bet and percentage."" "
"""Returns the total supply of a token."" "
"This is a function named ""transfer"" that transfers an amount of tokens from the caller's address to another Ethereum address if the sender has enough balance and it doesn't exceed the safe limit. It emits a 'Transfer' event after successful transfer. "
"""Transfer function for ERC20 tokens with pre-condition check."" "
"""Returns the amount of wei a user has to send in order to fulfill another user's request."" "
"""Returns number of signatures required for minor transactions."" "
"""Sets a new renaming per character cost in wei for the owner."" "
A payable function that accepts payments. 
"""Approves a specified token for transfer by the proxy."" "
This function returns an array of message numbers for unopened messages by a user. 
This function throws an error if called within a block that is equal to or greater than the 'unlockedBlockForFounders'. 
"""Returns a tuple of (player address, time since, next shared sent time, boolean indicating if the MC has been passed)."" "
The function checks if it's possible to invest based on the state of the contract and the restrictions set by the admin. 
"This function is an external one that only the owner can call, requiring two arrays of addresses and uint256 numbers to be equal in length, each element in the address array not being zero, then pushing these elements into respective arrays A and N. "
"This function initializes balances for given addresses and transfers the ownership to them. It requires that the number of provided addresses equals the number of provided balances, checks if each address has a balance of zero before adding new balances, and finally subtracts the total value from the owner's balance. "
"""The function 'Transfer_of_authority_data' changes the owner of a contract to a new address."" "
The function validates if the contribution (in Ether) is within a specific range and returns whether it's valid or not. 
"This function is named ""finalizeLastRound"" and it's a public function. It retrieves the last round from an array of rounds (rounds[]), finalizes that round (_finalizeRound(rnd)), and then stores it back in the same location. "
"""Returns the block number of the last mined by the caller."" "
"This function allows a director to add a specified amount of tokens to the company's balance, subject to a maximum token cap. The function is only callable by the director and returns a boolean indicating success or failure. "
"""Returns the main account at a given index."" "
The function allows the owner to withdraw all ETH from the contract to the owner's account any number of times. 
"""Gets a position from the holdings array at the given index, returning the market, stock name, quantity of shares held and average price."" "
"A function to change the eternal storage contract address, accessible only by the owner of items storage. "
"""Generates a random integer in the range of 1 to 'max' using SHA3 hash and modulo operation."" "
"This is a function that allows a user or another contract to transfer funds to the smart contract and returns a boolean indicating if the operation was successful. It uses the `_transferFrom` function from an unknown source, then calls the `tokenFallback` method on the recipient's address with the sender's address, this contract's address, and the value being transferred as arguments. "
"Function restricts access to DAO and only allows minting of tokens to winners if the crowd sale is in ""WorkTime"" state. "
"""Migrates ownership of the contract to a new address."" "
"""Allows owner to delete committed destination address."" "
The function is a public one that always reverts. 
A publicly accessible payable function without any specific logic implemented. 
This function is a public view function named getShare that returns the user's share value based on their address and round ID. It also calculates unmasked earnings for the given user and adds them to the returned share value. 
"""Retrieves the pledged amount and details of a whitelisted user."" "
"""Sets the price in wei for a one-time operation."" "
This function is an internal Ethereum smart contract function that transfers a specified value from one address to another while updating the balances and emits a 'Transfer' event. 
"""Changes the minimum and maximum burnable TrueVND amounts for users."" "
"""Gets the total number of locks for a given address."" "
"This function is a view function named ""tokenMetadata"" that takes in one parameter ""_tokenId"", and it's constant, public, and returns the ""infoUrl"" of the Chibi with the given ""_tokenId"". "
"""Returns true if the transaction is made during a certain period and has a non-zero value."" "
"""Initializes a WalletConnector with the given owner, latest version and logic address."" "
"""Returns the payer of a request by its ID."" "
"This function retrieves the details of a team, including its name, owner's address, and current price, based on the provided team ID. "
"""This function allows an admin to propose a new owner of the token."" "
"""Sets the percentage for when price exceeds or equals cutoff, resets to a given percentage."" "
"""Refunds the investment if sale is unsuccessful."" "
"This function is a constructor for the CurrentToken contract. It initializes the ICO address, sets total supply and balance of the ICO, transfers tokens to the ICO, and pauses the contract. "
"""Returns a boolean indicating whether an ICO is currently running."" "
"""Function `getOwner` is a constant function that returns an address."" "
"This function reloads tickets for a user with the given ETH amount and affiliate ID, checks the round and draws, then emits an event signifying the end of transaction. "
"""Returns the total supply of tokens."" "
"""A function that allows a new proposed owner to take ownership of the contract, provided the caller is the new owner."" "
"""Returns a pseudo-random number based on the input parameters."" "
"""Creates a new MiniMeToken with the given parameters and assigns its controller to the caller."" "
"""Returns true if current time is in a period between 'startTime' and 'endTime', false otherwise."" "
"""Checks if the specified address has an entitled supply in the whitelist."" "
"This function reviews signatures against a list of signers. Signatures must be provided in the same order as the list of signers, all provided signatures must be valid and correspond to one of the signers. The function returns the number of valid signatures or 0 if the inputs are inconsistent. "
"""Function is empty and allows funding."" "
"""Transfers funds to a beneficiary address."" "
"""Returns the remaining blocks for a big promo."" "
"""Pays out transaction fees and distributes the remainder to the artist and shareholders."" "
"""Returns a uint256 value representing the natural unit."" "
"""A function that allows an owner to retrieve all policy addresses."" "
"""Multiplies two values safely and returns result."" "
"Creates a new post with the given link, assigns it an ID, and returns that ID. "
"""Sets the start time for pre-ICO with a value greater than zero."" "
Converts a uint in a string. 
"""Changes the congress contract address to a new one."" "
"This function is a public function named floatEconomy that only the owner can call. If it's called with more than 0 Ether, it will distribute part of the sent funds equally to all districts (up to 7). The distributed amount per district is based on the total value sent divided by 14. "
"""Allows a cat owner to make an adoption offer for a specific cat to another address."" "
This function is a view function that takes an Ethereum address as input and returns the corresponding TxRegistry address. It's used to retrieve the transaction history of a specific customer. 
"""This function is only callable by the admin and shows who the pending admin for this contract is."" "
"This function is an external withdrawal method that requires a valid oracle and checks for non-zero user key, value, fee amount, and withdraw address. It then calculates the number of periods and updates the last period participated by the user. The token transfer to the fee address (if applicable) and withdrawn amount are also checked before proceeding. If any of these operations fail, it reverts the transaction. Finally, it emits a 'TreasuryWithdrawn' event and returns an OK status code. "
"""Checks if a given address equals the contract's owner."" "
"""Returns the buying price of a token from another contract."" "
"""A function that allows a transfer to an address with a certain value if the sender is allowed."" "
"""Returns the number of tokens sold, either total or minted depending on whether it's finalized."" "
"""The function allows the contract's owner to withdraw all their funds."" "
"This function checks if the provided address is a contract. It uses assembly to get the code size of the given address and returns true if it's greater than zero, indicating that there is code present at this address. "
The function `unallocated` is an internal view function that returns the amount of unallocated tokens in a pool by subtracting the already allocated tokens from the total supply of tokens. 
"This function is an external view that returns a list of addresses (channels' GUIDs). It requires that the length of 'channelsGuids' array is not zero, otherwise it throws an error ""No channels initialized"". The function iterates over 'channelsGuids', copying each element into 'registeredChannelsGuids'. Finally, it returns 'registeredChannelsGuids'. "
"""Function 'changeOwnerSharePerThousandForBuying' can be called by the contract owner to set a new buying share."" "
"""Returns the total number of stored deeds."" "
"""Returns the Oracle Address Resolver Interface."" "
A function to check if addition of two unsigned integers will not overflow. 
"""Sends received tokens to a specified address."" "
"""Mints tokens for a specified address if the function 'mint' returns true."" "
"This function is used to get the owner of a specific token from the mapping ""teamIndexToOwner"". It requires that the owner isn't zero (address(0)). "
"This function allows a user to transfer pharmcoin tokens from their balance to another address's balance if the sender has sufficient balance and the recipient is not the zero address. The function then triggers a 'Transfer' event with the sender, recipient, and transferred value as parameters. "
This function tracks a reverse stock split by dividing the quantity of shares held in a position and adjusting their average price accordingly. It also emits an event indicating the operation. 
This function updates the top referred numbers and addresses in an array by inserting a new value into its correct position while ensuring that the array remains sorted. It also emits events for updating both arrays. 
"""Returns total number of tiers."" "
"""This function sets the presale status to 'off'."" "
"""Contributes a certain amount of Ether to a DCORP member."" "
"""Function batchBuild is an external function that can be called by the superuser only. It accepts arrays of uint256, int and uint8 as parameters and calls a corresponding internal function _batchBuild."" "
"The function requires a valid contract ID, the sender must be the participant of the contract, and it checks if the contract has not been signed already before signing it. "
The function checks if there is an open commissioner auction for a given real world player based on their md5 token. It's only accessible to commissioners and returns a boolean value. 
"The function ""returnToSender"" is a public function that only admins can call, transfers all ETH and tokens to the original multisig address, and returns true upon completion. "
"The function ""addTokenShop"" is an external function that only the owner can call. It adds a certain value to the balance of a specified address in the DTH shop. "
"This function is an internal function named ""curse"" that burns tokens from a specified address and issues new ones to the same address. It returns a boolean indicating success of the operation. "
"""Returns the total account balance of a member by adding their stake and reward balances."" "
"""Creates a new instance of an application if it doesn't exist yet and sets its base implementation."" "
"This function allows the contract's owner to set a positive Ether value as the ""finalized capital"" if and only if the contract is initialized, not paused, and the caller is the owner of the contract. "
"""Returns the allocation at a specific index for a given preminer."" "
This function allows a user to extend the expiry of their performance bond by a specified number of blocks if they are the beneficiary and the extension hasn't been stopped yet. It returns a boolean indicating success. 
"The function sendDeposit is a public method that allows the depositManager of a specific listing to send an amount of tokens (deposits) to another address. It checks if the sender is the depositManager, if there are enough deposits for the transaction and transfers the specified value to the target address. "
"""A function that adds a locked time to an account."" "
"This function allows the owner of a token to decrease its price, or if there is no owner, the contract's coo can do it. The new price must be less than the current price. "
"""A public payable function that accepts Ether and returns a uint."" "
"""Withdraws from a specified coin pair."" "
"This function retrieves share details based on the provided share ID. It returns the company ID, owner address and current price of a share. "
"""Sets a new exchange rate if it is greater than 0."" "
"""Returns the item category for a given class ID."" "
"""Disables a user from the whitelist and allows them to buy tokens."" "
"""Sets the reward token and its availability for distribution."" "
"This function is an internal one that adds a new LAND id to an Estate and updates all related storage requirements. It checks if the Estate exists, if the LAND isn't owned by another Estate, and if the Estate Registry can manage the LAND before adding it to the Estate's list of LANDs and updating its index in the registry. "
"""Returns the amount of locked tokens for a given address."" "
This function allows users to buy tokens by sending ETH and receives a certain number of tokens based on the amount sent. It also emits an event 'TokenPurchase' for each successful transaction. 
"""Checks if user has enough Ether in whitelist to buy token."" "
"The function ""nextBid"" is a view function that calculates the next bid amount by adding the current highest binding bid and an additional value (potato). The returned result is a uint type variable ""_nextBid"". "
Transfers ERC20 tokens from the wallet to a given address if within limits. 
"""Configures the script execution contract with provided parameters."" "
"""Reclaims all ERC20 compatible tokens."" "
"""Mints tokens for a specified address if the caller is the owner."" "
"""Returns the number of votes given by a specific user."" "
"""Allows current owner to transfer control of the contract to a newOwner."" "
"""Returns the amount of tokens that have been approved for spending by a spender."" "
"The function mints new tokens for a specified receiver. It can only be called by the owner and the token supply is not frozen. The value to be minted must be greater than 0 and less or equal to the remaining supply after subtracting dropSupply from maxSupply. After successful minting, it updates totalSupply and balance of the receiver, emits a Mint event and a Transfer event. "
"""Sets the exchange contract address to a provided value."" "
"""Issues a specified number of reserved tokens to the contract's owner."" "
This function sets the team token address for a campaign only if it is after the campaign has started and a non-zero new address is provided. 
"""This function transfers tokens to a specified address and emits an event."" "
This function is called by the owner of the contract and adds a new wallet address to an array. It requires that the provided wallet address is not zero and then assigns it to the specified index in the array. 
The function is a view function that retrieves the ERC20 token balance of an Ethereum account. It takes in an address and returns a uint value representing the balance. 
A function to add a tier with a given discount and available supply is only callable by the owner when the contract is paused. The function adds a new tier to the discounts array and emits an event of the newly added tier. 
"""Returns the number of points the king has."" "
"""A function to allow the creation of new coins by a specified amount for a specific address."" "
"""Allows the current signer to transfer control of the contract to a new signer."" "
"""Function to pause all operations for owner in case of emergency."" "
"The function ""saleOpen"" checks if the current time is between ""startTime"" and ""endTime"". It returns a boolean value. "
"""Returns true if called from an OMIS crowdsale contract."" "
"""Returns the total number of pieces."" "
"This function is used for locking a certain amount of STE tokens before a specific block number, ensuring that the transaction conditions are met (e.g., the user has enough balance, the block number does not exceed the maximum lock period, and the vesting block number is after the current one). It then updates the vesting details for the sender. "
Function allows owner to withdraw funds from ICO only if it is fulfilled and sufficient balance exists in the contract. 
"""Sets the minimum balance needed for token distribution."" "
"""Changes the withdrawability status of top investor in a specified round."" "
"The function `getTierTokens` is an internal view function that returns the number of tokens based on the tier provided. It checks for different conditions and assigns a specific rate to each tier, with additional logic applied if the current time is within a certain period. "
"This function shows the unlocked balance of an account by subtracting locked funds from the total balance. It does this by iterating over all locked funds for a given address and checking if they are still locked (i.e., their lock time has not passed). If so, it adds these values to the unlocked balance. "
"""Sets the token price and Ethereum USD rate."" "
"This is a function named ""deleteUser"" that deletes an account from the system if it's owned by the caller. It takes a username as input and checks if this username exists in the directory before deleting it. The function emits a UserDeleted event with details of the deleted user. "
This function generates a hash based on the input address and a constant string 'script_exec_permissions'. The result is a bytes32 value. 
"The function starts the ICO process for the contract owner only, if it's not already ended. It sets the stage to 'sale', and records the start date as the current block timestamp. "
"""Allows the winner to withdraw all funds from contract."" "
"""Reverts the transaction."" "
"""Approves a spender for a certain value of tokens."" "
"This function mints new tokens and restricts the total supply to a certain limit. It requires that the sender of the transaction is the minting contract, adds the specified amount to the supply, updates the recipient's balance, emits a Mint event with the recipient and amount, and an Transfer event from 0x0 (null address) to the recipient. "
"This function sets the dates of a token distribution event. It requires three parameters, all unsigned integers (uint), and only the owner can call it. The values must be in ascending order with _presaleStart being less than _start, which is less than _end. "
"""Sets the gas price for oraclize queries in the contract if it is at least 20 ETH."" "
"This function is a burnByAmount function that allows the owner to remove (burn) a specified number of tokens from their balance. It requires the input to be greater than zero and less or equal to the owner's current balance, subtracts the burned tokens from the owner's balance, updates the total supply by subtracting the burned tokens, emits a Transfer event with the details of the burn, and finally triggers an OnTokenBurned event. The function returns true upon successful execution. "
"""Enables token transfer if not already enabled."" "
The function sets initial owner addresses and the number of confirmations required for a multisig wallet. 
"""Gets the deed ID of a specified owner at a specific index."" "
"""Checks if a given address has an existing Royalty partner."" "
This function checks if selling a certain amount of tokens (BBD) is possible and calculates the equivalent ETH in wei. 
This function reads a 20-byte value from the input byte array and returns it as an address. The offset is provided by the user. It's internal pure and uses assembly language for efficiency. 
"""Returns an array of addresses representing past winners."" "
This function is used to transfer the ownership of a knight to a new address if the caller is the current owner. It requires that the sender is the knight's owner and then transfers the balance to the new address. 
"""The function pauses the contract by setting 'paused' to true."" "
"This function is an internal Ethereum smart contract function that allots tokens to a specified address based on the provided parameters and conditions. It calculates the total amount of tokens to be minted, checks if it doesn't exceed certain limits, adds these tokens to the recipient's balance, updates token supply, and increases raised amounts in relation to BTC and USD. "
"""This function overrides the setApprovalForAll method of the parent ERC721Token contract to allow its functionality to be frozen in case of an emergency."" "
The function allows the owner to create a new event with provided id and attend hash. It also emits an 'Attend' event. 
"A function that allows a message sender to deposit Ether into the contract, but only if it is greater than 0 Wei and can only be called by the owner. "
"This function is a public method that only the owner or an authorized contract can call. It adds an order to the list of orders for a specific owner (if it doesn't exist, it creates one). The order includes room night id and direction. "
"""Gets the Note for an Account Address."" "
"""Mints a token with given URI for an address."" "
"""Unregisters a DSP and returns unused deposit."" "
"This function releases tokens to an investor based on their ETH investment. It checks if the ICO has ended, calculates how many tokens should be released, compares it with existing balance and issues new ones if necessary. "
This function is a transaction function that transfers an amount of tokens from one address to another while ensuring zero fees. It's accessible only by the central account and returns a boolean indicating success or failure. 
"This function is an internal Ethereum smart contract function that appends an early purchase log. It checks if the purchased time (purchasedAt) is valid, calculates the remaining amount to raise before reaching WEI_MAXIMUM_EARLYPURCHASE, and pushes a new EarlyPurchase object into the 'earlyPurchases' array with the relevant details. "
"This function implements the Babylonian method for calculating square roots. It starts with an initial guess (z = (x + 1)/2), then iteratively improves this guess until it is accurate enough (when z >= y). The final result, y, is returned as the square root of x. "
"Updates the payout for each token owned by a specified address, taking into account the type of token and its current withdrawal status. "
"""A function to check the contract's balance."" "
"This function is an external one named ""payment"". It's marked as safe to use. If the message value sent with the transaction is greater than zero, it retrieves the admin ID from the 'playAddr_' mapping using the 'admin_' variable and adds the message value to the balance of the player associated with that admin ID. "
Auditor can increase certified assets by increasing the number of units of assets that are certified. 
"""Revokes the given address's permission for a specified kind of operation."" "
"""The function allows the owner to withdraw ERC20 tokens."" "
This function creates a new currency with the given parameters and puts all the total supply of the CC token in the Market Maker's reserve. 
"This is a function named ""whoHasTheBiggestDick"" that returns the details of the biggest dick in the form of name, notes, size, timestamp and address from the storage array ""biggestDicks"". It retrieves the last item (the newest one) from this array. "
"This function sends a subscription bonus token to an investor if they have not received it before. It calculates the bonus based on their balance and the percentage of the total supply that represents a bonus for subscribers. If there are more tokens to be issued than already issued, it issues them and updates the record in the contract state. "
"""A function that allows a parent contract to withdraw its dividends."" "
"""Transfers the remaining unsold token amount to the reward pool."" "
"""Returns true if the crowd sale is currently running."" "
"This function allows the owner to sell a certain number of coins (specified by 'amount') to another address ('seller'), ensuring that the transaction is validated and executed. It also emits a 'TransferSell' event after successful execution. "
"""Sends Ether with different values to specified addresses."" "
"""Admin can send money from their account to a user's account."" "
The function allows the contract's admin to recover all tokens held by the contract if it hasn't been closed for at least 61 days. 
"""Changes the owner's official address if it is not already set to a given address."" "
"""Sets the exchange rate for converting ETH to tokens."" "
"""Allows the owner to set a new maximum bet."" "
This function adds a specified value of tokens to the balance of an address and updates the total token supply. It checks for valid inputs (non-zero values and non-null addresses). 
"""Sets the USD to Ether exchange rate."" "
"This function is an internal one named ""unblockTokens"". It takes in a voter's address as input, checks if the voter has any locked tokens (if not, it throws), subtracts 1 from the voter's lock count and finally unblocks the account if there are no more locks. "
"This function sends surplus tokens to the GAT Found deposit account if conditions are met. It checks if purchasing is allowed and if sender is not the owner of the contract. Then it calculates the excess amount of tokens that can be sent. If there's no excess, it reverts the transaction. Otherwise, it adds this excess to the balance of the GAT Found deposit account and emits a Transfer event. "
"This function calculates the duration of a tier based on its index. It uses the Keccak-256 hash function and includes the index and ""duration"" as inputs to ensure uniqueness for each tier. The result is returned in bytes32 format. "
"""Updates the USD value of ETH."" "
"""Sets the address of a relay contract."" "
This function updates the isVerified status of multiple Monetha users in bulk. It requires equal length arrays for user addresses and updated verification status. The owner can call this function to update the isVerified status of any number of users at once. 
"This function checks if the pre-ICO is active by comparing the current time with a start time, checking if the number of sold tokens does not exceed a hard cap, and ensuring that the ICO isn't paused. "
"This function returns the balance of tokens at a particular address, taking into account any rewards that have been generated but not yet withdrawn. "
"This function retrieves the joining time and inviting address of a specific member in a group, given their investment details. It requires that the group exists and returns the join time and inviting address. "
"The function `getLastNonPublished` is a constant-time, read-only function that returns the ID of the last non-published pull request in the queue. If there are no more non-published pull requests, it returns 0. "
"This function looks up the resource points for a player by adding their balance of bronze, gold, steel, oil and uranium resources multiplied by specific amounts. It returns the total sum as an unsigned integer. "
"This function takes an unsigned integer as input, divides it by 2^48 and bitwise ANDs the result with 0xffff to return a 16-bit arbiter token from an hGame. "
"""Returns the balance of a specified address."" "
"Function for transferring tokens from one address to another with checks for non-zero recipient addresses, positive values, sufficient balance, allowance and unfrozen accounts. "
"""An internal function that adds a new contractor."" "
"A function named ""revealNumber"" that reveals a number for an address if the requestor or the sender is authorized by ""_canReveal"". "
"""Removes specified users from the whitelist A."" "
"""Returns the maximum profit from the game using the token bankroll."" "
"""Sets the number of tokens per Ether."" "
"""Returns the locked balance of a user."" "
"""Returns the token balance of the contract."" "
"""Approves a spender for transfer of tokens."" "
"""Manages account freezing by owner."" "
"Calculates fees based on the duration of a transaction and its starting amount. If the starting amount is zero, it returns immediately. It calculates the number of days between the start and end times, then uses this to calculate an amount and fee. The fee is calculated as the difference between the starting amount and the calculated amount. "
This function allows the owner to set a new whitelister address. It checks if the provided address is not zero and then assigns it to the `whitelister` variable. 
"""A function that pays out a Direct Token to a specified party."" "
"""Returns whether the token sale is currently paused."" "
"""Returns the total supply of tokens."" "
"""A function that checks if a contract is related to a mini-game and always returns true."" "
"""This function pools tokens based on a percentage of the total supply."" "
This function allows a contributor to claim his BTNT tokens at the end of an ICO. 
"This function calculates the owner cut based on the price of an item, with different multipliers applied depending on the price range. It returns a value that is a percentage of the input price. "
This function retrieves a list of units that are set to expire within the next 'maxInsurePeriod' days. The function returns an array of uint256 where each index represents a day starting from today and each value is the number of units scheduled to expire on that particular day. 
"""Updates the total value to a specified input."" "
"""Changes the token price to a new value only by owner or admin."" "
This function transfers tokens from the TeamAddress2 to an investor after a year has passed. 
"""Adds a new owner-approved cashier account to the contract."" "
"""Function for setting a new founder address that can only be done by the current owner."" "
A function for emitting events so that the Lamden Oracle can provide and register the proof. 
A public function that calls a contribute() function. 
"""Returns the deadline of the latest campaign."" "
Initializes the advisory vault supply and mints a specified amount to it. 
"This function allows users to buy KWH (kilowatt-hours) with Ether and updates the user's balance accordingly. The function checks if the buying price is not zero or if the sent value is less than the buying price before proceeding. It then calculates the amount of KWH that can be bought using the sent value, checks if there are enough tokens in the contract to cover this amount, and updates both the user's balance and the contract's balance accordingly. Finally, it emits a Transfer event. "
"""Withdraws all funds from the contract to a specified receiver if the oracle is no longer needed."" "
"""Registers a new passport version with its logic implementation address."" "
"""Returns 8."" "
"This function transfers a specified value of tokens from the caller's address to another address if the caller has enough balance and the value is greater than zero. It then triggers a 'Transfer' event with the sender, recipient, and transferred amount as parameters. The function returns true if successful, false otherwise. "
"""Withdraws the balance from an affiliate pot and transfers it to a specified address."" "
A function to set the maximum gas refund when an address sends ETH to buy tokens. 
"""A function that allows the owner to increase the balance of an ETH teller."" "
The function allows the contract owner to withdraw all Ether collected by users. 
"This function creates a new snapshot of the current state, storing it in an array and returning its index. The snapshot includes the token count and the address of the first user. It then emits a custom event with the snapshot's index. "
"""Returns true if current timestamp is before the allocation lock period."" "
"""Burns a specific amount of PLUTUS tokens by the owner."" "
"""Returns the contract's own token amount."" "
"""Sets the next game rules if the current game is not running."" "
"""This function is a view function that allows the owner to check their ether balance."" "
"""Gets the price of a player by returning their price from the mapping."" "
"""Sets new multisig address to which received ether will be sent."" "
"The function is for the owner to end PreICO and ICO, reset stage to 0, disable ICO_PRE_ICO_STAGE, decrease supply increased by balances of the contract's address, and set balances of the contract's address to 0. "
The function sets a new exchange lock time for the contract. It requires that the new lock time is greater than 0 and assigns it to the `exchangeLockTime` variable. The function can only be called by the owner of the contract. 
"""Updates the running round to a new index."" "
"This function allows a user to request a refund for their tip if they haven't done so in the last two weeks and the username is not verified. The amount of money to be returned is determined by the getTip function from data variable. After that, it transfers the funds back to the sender using transfer function and emits an event indicating successful refund. "
"A function for withdrawing funds from a smart contract, with restrictions on the amount and beneficiaries involved. "
"This function allows users to bet on the number of tweets made during a round. It checks if the betting period is active (5 days from the start time), updates user's bet, keeps track of different bets and total number of bets for each round. If the betting period has ended, it reverts the transaction. "
"""Converts the first byte of a given byte array to bytes1 and returns it."" "
This function allows a user to sponsor a job by sending DAI tokens from their account to the contract's escrow. It updates the job details and emits an event indicating that DAI has been sponsored. The sender must have approved this contract to transfer their DAI tokens. 
"""Only the contract owner can transfer any accidentally sent ERC20 tokens."" "
"""Updates the balance and total invested amount."" "
This function allows the owner to add a lock account with a specified value and ensures that the total locked balance does not exceed the contract's Rhem balance. 
"""Admin sets the crowdsale rate."" "
"""Sets Ether to Dollar exchange rate."" "
"This function is a transfer of tokens from the owner's balance to another address. It requires an amount greater than zero and a non-zero recipient address. The function then decrements the sender's balance by the specified amount, adds that same amount to the recipient's balance, and emits a Transfer event with the sender set to 0x0 (null address). "
"""Withdraws coins from the marketing vault to a specified address."" "
"""Returns the amount of Ether waiting to be sent from bankRoll in contract."" "
This function sets a new sales agent for the contract and emits an event. 
"""Updates the status of a specific board."" "
"""Allows anyone to transfer the SelfPayToken tokens once trading has started."" "
"""Changes the end time of the main function to a provided timestamp."" "
"""Authorized function to freeze multiple addresses with a specific date."" "
"""Processes a deposit for the Jackpot by adding the participant's address to the list of participants and updating their balance. The amount transferred is subtracted from the total transfer amount."" "
"""Withdraws tokens from the Foundation reserve."" "
"This function creates a fashion item with specified attributes and transfers it to the owner. It requires sender to be an authorized action contract, checks if owner is not null, ensures new Fashion ID does not exceed maximum uint32 value, increases array length by one, sets various attributes based on input parameters, transfers ownership of the token, and triggers a CreateFashion event with additional details about the created item. "
"""Sets the address of an ERC20 token and assigns it to 'token' variable."" "
"A function to change the maximum cap of a wallet, ensuring that the total paid amount does not exceed the new maximum cap. "
"""Returns a pseudo-random number based on the input data."" "
"""Withdraws funds from the contract, either to CEO or CFO based on 'who' parameter."" "
"""Checks if an owner has approved an operator to manage their assets."" "
"This function allows the owner to change the DEX (Decentralized Exchange) address while ensuring it is a valid contract. It also emits an event indicating who changed the DEX, and what was their previous and new addresses. "
The function allows a proxy to retrieve the allocation of a certain spender for an owner's tokens. 
"""The function allows an owner to add a new administrator."" "
"""Only owner can pause purchases during a land sale."" "
"""Internal function that calls ERC20's transfer function to send tokens to a beneficiary."" "
"""Sets new token address in case of update."" "
"The function [returns the current rate of the crowdsale] checks if a presale is ongoing and returns the presale rate, otherwise it returns the regular rate. "
"""A function that allows a user to send Ether and receive a specific token."" "
"""Returns total number of cards in the game."" "
"This function allows a party to remove their order from the orderbook if it exists and is owned by them or by the contract owner. It emits an event with details of who removed the order, what asset was involved, how much was ordered, and at what price. "
"""Enables token transfer for a specified address."" "
"""Returns the number of connector tokens."" "
"This function is a public method named 'withdraw' that can only be called by the contract owner. It requires currentVotingDate to be equal to zero and allows withdrawal if allowedWithdraw is greater than zero. The owner's balance is then transferred with the amount of allowedWithdraw, logs the withdrawal event (including timestamp and amount), resets allowedWithdraw to zero, and ends the function. "
"The function is for manually triggering a state change to 'READY' in the contract, which allows crowdsale prematurely. "
"""Adds a new address to the specified role."" "
"""Function to set a new base Ethereum cap per address for the owner before the general sale starts."" "
"""Removes an address from the blacklist."" "
"""Checks if a DCORP member is accepted."" "
"""Reverts the transaction if called."" "
"This function is used to update the base tokens per ETH rate for a pre-sale, but only if the current state of the contract equals ""Waiting"". The new rate is set based on user input. "
"""Cancels a battle with given ID."" "
"The function can only be called by the owner when a specific game is frozen. It sets the state of the game to closed and records the results, then emits an event indicating that the game has been closed. "
"""Returns an array of permission flags."" "
"A function for betting on a game with two teams, requiring the sender to provide a valid team (1 or 2), before the game starts and having sent a positive amount of Ether. It also checks if the sender has already betted and increases the counter accordingly. If the sender chooses team 1, it adds the value sent by the sender to their team's total bets and globally. For team 2, it does the same but for New England. "
"""Returns the frozen balance of a specified account."" "
"""Returns the count of bets."" "
This function retrieves incentive numbers based on the current time. It returns three values: total amount of tokens released in the current year and total number of tokens released on the day. The current year is also returned. 
"""Function `rate` takes in two ERC20 tokens (src and dest), an amount of source token (srcAmount), calculates the current rate between these two tokens based on a given source amount, and returns the current reserve and rate."" "
This function sets the property status for a user in the internal storage and emits a 'StatusChange' event. 
"""Converts ETH wei to USD mill."" "
"""A function that allows a C-level user to pause the smart contract."" "
A public payable function that accepts ETH payments. 
"""Sets the ICO phase 4 duration via start and end times."" "
The function allows the contract's owner to approve a specified crowdsale contract for token spending. 
"""Function allows owner to check if sale is paused."" "
"""Returns the current number of players."" "
"""Function checks if the investor is not the owner and allows contribution only."" "
"""The function 'getPrivateSaleEndDate' is a view function that returns the private sale end date by adding 30 days to the start time."" "
"This function initializes the Delphy Token contract by assigning token balances to owners, transferring ownership, and ensuring a total supply equals a constant. "
"""Returns the number of elements in 'bags' array."" "
"""Returns the number of allocations."" "
The function unconfirms a payment made via an investment ID by setting the 'confirmed' status of that investment to false and emits an event ChangedInvestmentConfirmation with the updated details. 
"""Checks if an address is registered for a token sale."" "
"""Burns a specific amount of tokens from the target address and decrements allowance."" "
"""Allows merchant to withdraw funds to specified beneficiary."" "
"""Adds a specified amount to the balance of a user with a given ID."" "
The function receives Ether and transfers it to the sender's address. 
"This function is executed by oraclize when multicurrency finalization is calculated, and it updates the USD raised amount based on ETH raised. It then checks if the goal has been reached, emits an appropriate log message, and either closes the vault or enables refunds depending on the result. If there are remaining public supply tokens, they are burned; ownership of the token contract is transferred to the owner. "
"""A function that allows the contract owner to toggle the paused state."" "
"""Sends a special taster package to recipient with enough balance of tokens."" "
"""Returns the affiliate rate based on the provided level."" "
"""Returns all the supported digital currency tokens."" "
"""A function that triggers the buyTokens procedure when called."" "
This function allows the contract's owner to retrieve all YUM tokens left in the contract and send them back to the owner. 
"""Calculates the CAK tokens to be minted based on received WEI."" "
"""Sets the owner of a property after an auction."" "
This function retrieves information about a specific buyer from the buyers mapping and returns certain properties of that buyer's info struct. 
"""Emits a stage event for a specified stage by an active PoA token."" "
"""Returns the block number when a token's price was last updated."" "
"""Enables access for everyone after checking if not everyone is allowed."" "
"""Returns a profile information from 'profileMap' based on input key."" "
The function allows the owner to modify the `endTime` variable. 
"""Admin function to reset the attempt count for a specific user."" "
"This function is an external one that adds a contract to the system, ensuring it's not zero and has not been added before. It sets the address of the new contract and marks its status as ""added"". "
"This function initiates a user if they haven't done so already, setting their 'initiated' status to true and initializing their resources array with five elements each set to 5. It also sets their map coordinates (mapX and mapY) to 6 and increments the total number of cities by one. "
This function allows the withdrawal of ETH and DAS tokens from the contract only after a specific deadline has passed. 
"""Returns the amount of Ether equivalent to a specified token amount."" "
"""Unpauses a PoaToken with given address."" "
"Function is restricted to ""StabilityBoard"". It sets a new Rates contract and emits an event of its change. "
"""Transfers a specified amount of tokens from one address to another."" "
The function allows the contract's owner to withdraw a specified amount of Ether up to their own balance. 
"""Returns the next redemption request ID in a queue."" "
"""This function allows an owner to withdraw a specified amount of Ether from the contract's balance."" "
"""Returns a list of animal IDs in the egg phase."" "
The function changes the ETH price feed to a new contract if called by an owner. It requires that the new address is not null and emits an event indicating the change in ETH price feed. 
The function allows the owner to finish the minting process of a token after it has started. It sets 'mintingFinished' to true and prevents further minting. 
"This function returns the ETH balance of the next campaign, which is a fraction of the total balance if the current campaign has not been finalized yet. "
"""Adds two values safely and returns result."" "
"""Transfers the raised funds to the target wallet if the ICO is over and the soft cap has been reached."" "
"""Returns the start timestamp of a specified tier."" "
"This function allows users to buy tokens based on the time and supply of the token. It checks if the transaction value is greater than zero, whether the current block timestamp is within a certain range (startDate - endDate), calculates the number of tokens to be minted based on the conditions, updates balances and total supply, transfers ownership of the contract, and sends the ether back to the owner. "
"""Converts an ECDSA public key into an Ethereum address."" "
"""Transfers tokens from one address to another if the destination is valid."" "
"""Transfers the balance of the sale auction contract to the Core contract."" "
This function checks the approval status of a list of addresses for tokens and returns an array of booleans indicating if each address has been approved. 
This function sets the available tokens for ZNT and ZLT to be equal to their respective balances in the contract's own balance. The function is only callable by the owner of the contract. 
"""Function to cancel a Security Token Offering (STO) contract proposal."" "
"""Sets the reserve pricing for a contract."" "
"""A function to remove addresses from a VIP list by the owner."" "
"The function retrieves information about a contributor (rewarded tokens, status of transferred reward tokens and whether they are a contributor or not). "
"""Checks whether max ether cap has been reached and returns true if it has."" "
"""Executes a buy order based on the provided parameters and signature."" "
"""Returns the minimum and maximum token deal values."" "
"""The function allows the owner to update the gas price limit."" "
The function checks if the loan is mature for interest based on its activation date and term length. 
"""Returns the number of signatures required for administrative changes."" "
"This function calculates the percentage difference between two values, considering edge cases where one or both of them are zero. It returns a value in the range [0, 100] representing the percent difference between the two input values. "
"""Returns the number of authorized payments."" "
"""Returns the count of items in the registry."" "
This function adds ERC20 tokens to a user's token list if they are not already in the list. 
"""Updates the expected start time and calculates betting closes time."" "
The function makes the coin tradable between users and cannot be undone. 
"""Checks the current Tokens affected to bounty by returning a percentage of the saved balance token."" "
"""Generates a random number from 0 to range based on the last block hash."" "
"""Returns the total supply of tokens."" "
"""Gets the bid of a given address, returning their current bid or pending returns if they are not the highest bidder."" "
"""Function finishIco is external, restricted to managers, and changes the status of an ICO to 'finished' after emitting a timestamp."" "
"""Returns the deposit address of a sale contract."" "
"""A function to send ETH from the contract to a given address."" "
"""Checks if a transfer transaction is made by an owner."" "
"The function calculates the required token balance by multiplying total price, token rate and percentage of token balance in the contract. "
"This function allows an owner to transfer or reserve a vanity URL from one address to another, ensuring the validity of the URL and updating mappings accordingly. "
"""Returns ETH balance of a specified address in wei."" "
"""Returns the amount of Ether waiting to be sent to charity."" "
A function that is publicly accessible and can accept payments in Ether. 
"""Function to distribute token sale jackpot by minting tokens directly and calling a function."" "
"""Allows the owner to update the Bancor converter's extension contract address."" "
"""Emits an event 'Received' with the sender and amount of Ether sent."" "
"""Only the owner of the contract can withdraw a specified amount."" "
This function allows users to withdraw a specified amount of tokens from the contract if they have enough in their holdings and it's been at least one block since they last withdrew. It then emits an event 'Withdraw' and transfers the tokens back to the user. 
"""Changes the tokenURI of a minted item by its tokenId."" "
"""Function withdrawTokens() is a public function."" "
"""Returns the number of contracts stored."" "
"This function is a view public method named getContributorAddressById that takes in one parameter (uint uId), checks if the caller is of type 6, and returns an address. It requires uId to be greater than 0 and for the contributor with this ID to be active before returning their mainWallet address. "
"""Returns the balance of a specified account."" "
"This function is a transferFrom function that checks if the sender has enough allowance and balance before transferring tokens. It then updates balances and allowed amounts accordingly and emits a Transfer event. If the conditions are not met, it returns false. "
This function generates a unique hash for a given whitelisted tier and spender. The purpose is to store the minimum token purchase amount for each spender in different tiers. 
"""Returns true if the current time is after the start time and presale hasn't ended."" "
"This function takes a byte array as input and returns an object of type Sig with its r, s, and v fields set based on the bytes array. "
This function creates a new NTToken instance with a total supply of 10 billion tokens. The creator's balance is set to the total supply and an event 'Transfer' is emitted. 
The function grants backer tokens to the caller if they have any and their time lock has passed. It then mints these tokens for the caller. 
"""Returns the balance of a specified address."" "
"This function retrieves information about a single investor from the contract's state. It takes an address as input and returns various details related to that investor such as end time, address, whether it is locked, lock amount, and investment amount. The function requires the provided address not to be zero. "
"""Returns the buy price of a bid order with specified id."" "
"""Returns true if the 'value' has an exact zero mantissa."" "
"""Returns details of a delegate."" "
"""Checks whether maxEtherCap is reached and returns true if it's reached."" "
"""Allows owner to unlock bonus tokens."" "
"""Burns a specified amount of tokens from the caller's balance and updates total supply."" "
"""Mints token rewards for a forecasting contract."" "
"""Function allows owner to withdraw a specified amount from contract's balance."" "
The function checks if an order is valid and returns its hash. 
"""Checks how much ETH is needed to send in order to change sell price to proposed price."" "
This function is an internal one that delivers a specified amount of tokens to a beneficiary's address and updates the total number of delivered tokens. 
"This function is a public one named ""addWallets"" that can only be called by the owner of the contract. It accepts an array of addresses and adds each address to its wallet using the ""addWallet"" function. "
This function is used to accept work on a specific project if the client has already completed their part and after the deadline. It changes the status of the project from WORKDONE to CLOSED. 
"This function allows for the reward addition and withdrawal of a marketing contributor. It takes an address, uint256 amount, and string as parameters, checks if the contribution has already been made by this contributor, adds it to their contributions, updates their rewardedTokens balance, checks if they are a contributor, adds them to the list if not, emits a NewContributor event with the contributor's address and token count, allocates tokens to marketing supporters, and then withdraws the contributors' tokens. Finally, it returns true. "
"""A function that sends a coin to another blockchain and uses an oracalized custom Shapeshift for the return address."" "
"""Empty function accepting ETH and ZETH dividends."" "
"""Transfers ownership of LLG tokens to a new owner."" "
"""Returns the number of registered ZTKChecks."" "
"This function returns game statistics, including status, timestamp, block start number, time left for the jackpot, queue length, total invested amount, multiplier, current jackpot amount and the member who won the last jackpot. It also updates some variables based on the conditions of the game (stopped, waiting or running). "
"""Returns the current unitsOneEthCanBuy value."" "
"""Revokes the ban on transfers for given addresses."" "
"""Allows the owner to approve a request for manual token swaps."" "
This function transfers tokens from the special address of the retailer to an investor's address. It is restricted and returns a boolean value indicating success. 
"""Function allows owner to withdraw specified amount of tokens from contract."" "
"""Transfers ownership of the contract to a new owner."" "
"""Sets the release manager's address and emits an event."" "
"This function is a contract method that allows the owner to send ERC223 tokens from one address to another. It takes three parameters (token address, recipient's address and amount of tokens), checks if the transfer was successful, and returns true in case of success. "
The function checks if the maximum funding cap has been reached and updates the crowd sale state accordingly. 
"""Creates a loan using an array of parameters and returns the Id of the loan."" "
"This function is only callable by the owner of the contract and it emits a 'Burn' event, indicating that all remaining tokens are being burned. It sets the balance of the burner to zero and also resets the total supply. "
"""Disables the ability to purchase with a given reserve token, but selling remains enabled."" "
The function adminDeposits an amount of a depositor's balance into the origin token for the admin. 
"""Replaces the animal with a given ID and updates related counters."" "
"""Returns the stake for a specific round, or the current round's stake if no round is specified."" "
"""A function that allows the owner to claim tokens for a specified user."" "
This function finds the index of an artwork in a list based on a randomly generated number. It also takes into account an extra probability for stealing from older artworks. 
This function allows a privileged address to transfer tokens from one address to another while checking for allowance and balance. It also prevents transfers if the token is frozen or during crowdfund/reward phases. 
"The function calculates a bonus based on the amount of tokens sold, with a decreasing rate for each token sold. If no tokens are sold, it returns 90. The calculation is simplified and does not include any additional conditions or logic beyond the provided code snippet. "
"""Returns the address of the token store."" "
"""Transfers tokens from one address to another while taking snapshots of both addresses."" "
"""An internal function that adds a new token holder."" "
"""Checks if an input address is either the 'ops' or 'admin' address."" "
"This function requires that the method ID is allowed and then calls a delegatecall for each order address with provided values. If any of these calls fail, it reverts the transaction. "
"""A function to remove a contract from watch list."" "
"This function allows an admin to add tickets for a player's purchase. It requires the user address, draw date, price and balls as input parameters. The function checks if there are draws already on that day, creates new ticket IDs, assigns them to the corresponding user, draw date, price and balls, updates the count of draws, and emits a log event summarizing the purchase. "
"""Returns the total amount of capital allocated."" "
"The function ""get_reward"" calculates a user's reward based on their UID, the time they have been holding and some predefined parameters. The calculated reward is capped at the maximum defined parameter value. "
"""Returns the current mining target as a uint256."" "
"""Returns the token ID associated with a given Blockhash."" "
"""Internal function that generates tokens for a specified address."" "
"""Returns a list of animal IDs with pending costumes."" "
"""A function that credits ETH to a customer's account."" "
"""Returns the total supply of tokens."" "
"The function checks whether a given address has invested or not, returning true if it does and false otherwise. "
"This function retrieves the information about a specific round's investment by index from a group of rounds, ensuring that the group exists and the index is within bounds. It returns the address of the investor, the amount invested (sum), and the timestamp of the investment (time). "
"""Returns the token balance of a user."" "
"This function updates the signed deals count of Monetha users in bulk. It requires two arrays as input: one for user addresses and another for updated signed deal counts. The lengths of these arrays must be equal, and it iterates over them to update each user's signed deals count and emit an event. "
"""Returns the deadline for exercising an option."" "
"""Returns the balance of a specific address (presaleAddress) in the contract."" "
"""Internal function to burn a specific token from an owner's balance and remove it from the owner's approved list. If the token does not exist, it reverts."" "
"""Returns the balance of a specified ERC20 token holder."" "
This function calculates the block subsidy based on a decreasing rate until reaching zero after a certain number of blocks. 
"""Allows owner to pause ICO."" "
"A function that sets an affiliation and buys a cozy for a given PEPE ID with a candidate cozy, whether the candidate is to be considered as the father of the current cozy, and assigns the PEPE receiver. "
"This function is a part of an ERC20 token contract and it allows the transfer of tokens from one address to another with approval by the sender. It checks for zero addresses, insufficient balance or exceeding allowance before performing the transaction. If all conditions are met, it updates balances and allowances and triggers a Transfer event. "
"""This function allows the owner to unlock a locked account."" "
"""Transfers all tokens held by the contract to its owner after a sale is over and tokens are unpaused."" "
This function is an external view that requires the owner of a token to be different from zero and returns its position in the 'itemPosition' mapping. 
The function sets the limit for bids on LANDs per bid and emits a change event. It can only be called by the owner of the contract. 
"""Accepts ETH transactions from users and sends them to a designated address as contributions."" "
"""Returns the number of transactions."" "
This function increases the lending position at a specific time for a given amount of tokens with a specified timestamp. It returns the number of owedTokens that will be borrowed. 
This function is an owner-only function that sends a specified number of tokens to a designated recipient. 
"""Sets the owner-controlled donation receiver to a specified address."" "
"This function retrieves the total balance of a request by adding up the balances from the payee and all associated sub-payees. It takes a bytes32 _requestId as input, returns an int256 value representing the total balance. "
This function checks if a given poll id is valid and returns the result of a ballot on that poll. 
"""Returns an array of addresses and their corresponding weights."" "
"This function sets the address of a ""fundariaPoolAddress"" variable to ""_fundariaPoolAddress"", but it can only be called by the creator. "
This function allows the contract's owner to set the BNT converter address to wherever the contract registry currently points to. 
This function allows a user to transfer tokens from one address to another while ensuring that the sender has sufficient allowance. It then updates the allowance and returns success as true. 
"""Calculates the reward amount in Ether for burning a certain number of tokens."" "
This function allows the owner to transfer the minting key to a new address. It checks if the new mint key is not zero and emits an event for the transfer of the mint key. 
"""Processes all ETH received and credits SBI tokens to sender."" "
"""Revokes an Issue Offer from a specified address."" "
"This function is a transfer method for Ethereum smart contracts, transferring tokens from one address to another ensuring safety and emitting a 'Transfer' event. "
"""Returns the address of the contract's manager."" "
"The function pauses the selling of a pack of tokens. It can be called by the owner only and requires that the selling process isn't already paused. When it's called, it sets isPausedForSale to true and emits an event MarketPaused. "
"""Returns unlockable tokens for a specified address due to a specific reason."" "
"""Gets the number of shares held and average price paid for a given stock."" "
"The function sets the minimum contribution for a round, ensuring that it is at least equal to or greater than the base minimum contribution. It's only accessible by the owner and during the SetUp stage of the sale rounds. "
"""Creates a promotion team with given name and assigns it to an owner's address."" "
"""A function that allocates restricted tokens to a partner by the owner in an emergency."" "
"""Returns the current rate based on stage."" "
"""Internal function that receives ether from a relay address."" "
"The function `unfreezeTeamTokens` is a public function that allows the owner to transfer frozen team tokens back to another address after a certain time has passed. It takes an address as input and returns a boolean indicating success or failure of the operation. The function checks if there are any frozen tokens for the FreezeAddress, ensures that enough time has passed since the last checkpoint (`FreezeTokensReleaseTime`), subtracts the frozen tokens from the balance of `FreezeAddress`, adds them to the balance of `unFreezeAddress` and emits a 'Transfer' event. "
"""Allows owner to finalize the crowdsale by transferring ownership of tokens."" "
"""Updates the Ether balance."" "
"""A function to set a special bonus for an address. Requires sender to be the owner or minter and percent must be greater than or equal to zero. Sets the specialBonus for target address as safeAdd of 100 and input percent."" "
"This function is a public method that only the owner can call. It releases locked tokens for multiple accounts (specified by an array of addresses). The function returns true if at least one token release was successful, false otherwise. "
"The function calculates the contribution in terms of ONL tokens based on ETH value received, with each unit of ETH equating to a certain number of ONL tokens. "
"""Returns the multi-signature wallet address."" "
"This function returns the available amount of bonuses to withdraw for a selected distribution date, calculated based on user's shares in the treasury and the deposit balance at that time. "
A function to withdraw ERC20 tokens from the contract's balance to a specified recipient address. 
"""Sets the callback gas limit for a given currency."" "
"""Performs a sell order with provided parameters."" "
"""A function named 'donate' that accepts public donations and transfers them to the contract owner."" "
"A constructor function that initializes the owner to the founder, assigns a portion of the supply to different addresses (founder, AirDrop, LongTerm), and sets their balances accordingly. The totalSupply is divided by 80 for the founder's balance, 10 for AirDrop's, and 10 for LongTerm's. "
"""Sets the API calls contract address."" "
This function allows the owner to withdraw a specified amount of Ether from the contract's balance to any valid Ethereum address. 
A function that is externally accessible and can receive Ether payments. 
"""Gets the token ID at a given index of the tokens list owned by the requested address."" "
"""Returns the current number of bounties."" "
"""Changes the extension status of a bond for a specified bond number."" "
"""Returns the amount of tokens allowed to be spent by a spender on behalf of an owner."" "
"""Returns the current tier id based on the block number."" "
"""Returns the genome of the hero with the given owner's address."" "
"""Returns an event hash."" "
Returns a boolean indicating if the purchase is valid based on various conditions. 
This function calculates the locked amount of a specific simulation (_simu) based on the current time and the simulation's date (simuDate). It applies different multipliers to the locked amount depending on how far in the future the current time is compared to simuDate. The function returns 0 if no applicable conditions are met. 
"""Recovers funds from the contract and sends them back to their owner if possible."" "
"The function is an external one that calls a function named ""buyUcCoins"". "
"""Returns the total supply of tokens."" "
"""Checks if current block number is within the range of start and end blocks."" "
"This function returns the details of a video game item, including its name, owner's address, current price and parent video game id. "
"""Approves an address to transfer a certain amount of tokens from the caller's account."" "
This function increases the percentage of a user if they have at least 10 CBC Tokens and authorizes them to burn tokens for MainSale contract. 
"""Transfers specified amount of tokens from the salesAgent's balance to a recipient's address."" "
"""Clears approval and transfers ownership of a token ID from one address to another."" "
"This function is a public onlyOwner function that distributes bonus tokens to addresses in the _bonusList array, ensuring they have at least one token and emits an event after distribution. "
A function to change the initial price of an empty block is being set by a primary user. 
"""Returns the frozen status of a given Ethereum account."" "
"""A function to close the presale period for two different variables (presale1 and presale2), accessible only by the owner of the contract."" "
The function refunds tokens to the specified address or all voters if no address is provided. It returns a boolean indicating success. 
"This function is a public function named ""bank"". It checks if the sender of the message (msg.sender) is equal to the 'beneficiary' and if 'currentBalance' is greater than 0. If both conditions are met, it sends all available funds in 'currentBalance' to the beneficiary and sets 'currentBalance' back to zero. "
"""Buys tokens from msg.sender."" "
"""Function deposit allows depositing ETH or token from user to the contract after it was signed by beneficiary. It includes a fee calculation and checks for allowance."" "
"""Returns the balance of a specified owner."" "
"""Allows the contract owner to transfer ownership to another address."" "
"""Function to retrieve asset type name by input."" "
"""Returns a list of all tracked broker addresses."" "
"""Function is a fallback function that calls the 'buy' function."" "
"""A function named 'DadaPresaleFundCollector' for collecting funds in a presale contract."" "
"""Returns the total amount of early purchases in CNY."" "
"""The function allows the contract's owner to withdraw ether from the contract."" "
"This function calculates the total number of carrots purchased by adding up the totalCarrots from each horse (H1, H2, H3, and H4). "
"""A function to halt or resume a token sale."" "
A function that allows the contract's owner to increase the token supply and transfer a certain amount of tokens to the owner. 
This function checks whether the tokens about to be purchased do not exceed the cap for a specific stage in storage. 
This function finds a level with specified price and returns the amount of available tokens on that level. 
This function calculates the maximum amount of vested tokens that can be returned to a user's withdrawal request based on their disbursement history and already withdrawn tokens. 
"""Sets the minimum balance for accounts in Finney."" "
"""Allows users to withdraw their dragons after a timelock has expired."" "
Converts a uint256 to its string representation. 
"""Calculates a bonus based on the value of PreIco sales."" "
"""Initializes the gas price limit for a fundraiser."" "
"""Returns the smaller of two uints."" "
This function validates a purchase by checking if the contract is not paused and then calling its parent's _preValidatePurchase function with given beneficiary and wei amount. 
"""Manages the finalization of an Initial Coin Offering (ICO), setting its status to 'IcoFinished', and mints tokens for contributions."" "
"""Returns the terms contract address of a given issuance."" "
"""A function to reject a proposal from the board."" "
"""Sets the addresses of ZNT and ZLT tokens, resets available tokens."" "
The function allows only the owner to set a specific allowance for a token transfer. 
"""Returns the subset of positive or all balance registered holders in a given range."" "
"""The function upgrades the Bancor Converter to a new version, which can only be called by the owner. After upgrading, the owner needs to call 'acceptOwnership' on the new converter."" "
"""Allows the owner to withdraw all funds from the smart contract."" "
"""Internal function to distribute tokens for non-vesting reserve wallets."" "
"This function allows a user to approve another address (spender) to use a certain amount of their tokens (value). It then emits an event named ""Approval"" with the details. The function returns true if successful. "
"""Returns the Ethereum address's token balance."" "
"""Returns the ID, owner's address and amount of a Primordial token in a burned lot with given ID."" "
"""Revokes editor rights of a passed address."" "
"This function is a view function that returns three values (bytes32, address, uint256) for a given Creator TAO Setting ID. It retrieves the corresponding Creator TAO Setting from storage and then returns its creatorTAOSettingId, creatorTAOId, and settingId. "
The function checks if a specified amount of tokens can be used by an owner based on the unfrozen token amount in their wallet. 
This function bulkWithdraw takes an array of addresses as input and iteratively calls the function 'withdrawTo' for each address in the array. 
"""Gets full info of an investor by address from the storage and returns it."" "
"""Returns the size of 'uuids' array."" "
"""Allows the owner to withdraw accumulated dividends."" "
"The function returns the discount rate value after adding a percentage of the current rate to it, given that the discount is possible. "
"This function checks if the goal or deadline has been reached. If the raised amount is equal to or greater than the funding goal, it sets `fundingGoalReached` to true and triggers an event `GoalReached` with beneficiary's address and amount raised. It also sets `crowdsaleClosed` to true. "
"The function changes the pre-ICO start time to a given future date, ensuring it's at least 7 days after the current block timestamp. The new start time must be in the future and more than 7 days from now. Only the contract owner can call this function. "
"""Transfers specified amount of any ERC20 tokens to the contract's owner."" "
"This function retrieves all details of a character based on its ID, including name, hit points (HP), magic points (MP), strength (STR), intelligence (INT), sanity (SAN), luck (LUCK), charm (CHARM), and magic type (MT). It also returns optional attributes as a string. "
"""Returns the current count of articles."" "
A function that allows token holders to cancel a previously submitted redemption request with the `cancelRedemptionRequest` function. 
The function changes the minimum NAC value. It requires a non-zero input and sets the new minimum NAC value. 
"""Function to allow a spender to spend tokens on behalf of the caller."" "
"""Returns whether mint time limit has been set."" "
The function withdraws the entire Ether balance of the contract to its designated dealer after a bet has been closed. 
"A constructor for the Foreground token sale contract that requires positive values for public token cap, checks if token floor is less than public token cap, sets base and current token price to token rate, creates a new deal token instance, calculates max sale balance as public token cap multiplied by current token price, sets min sale balance as token floor multiplied by current token price, and initializes the state as Deployed. "
"This function is a view function named ""getFeePercentage"", which returns the value of ""buyOutFeePercentage"" as an unsigned integer. "
"""Adds an admin with the given address to the admins mapping and emits an event."" "
"""Returns the user id associated to a wallet."" "
"This function is used to accept a management transfer from the current manager to a new one. It requires that the sender of the transaction is the new manager and emits a ManagerUpdate event with the old and new managers' addresses. The current manager is then updated to be the new manager, and the newManager variable is reset to address zero. "
"""Function returns total contribution in a constant time."" "
"""Allows owner to set the crowdsale timings."" "
The function changes the voting rules by setting a new debating period in days. 
"""Investing function is called with the message sender's address."" "
"""Function to be called by owner to end ICO and burn remaining tokens."" "
"""Function starts an offering and sends all tokens to a STO contract returning a boolean."" "
"""Function allows owner to get current balance of the caller."" "
"""Gets token metadata by passing in the ID and returns owner's address, body, feet, head, mouth, extra details, and birth block."" "
"The function is an external, onlyOwner, and whenEnded modifier. It invalidates a crowdsale purchase if something is wrong with it by setting the amount and rawAmount of the purchase to zero in the `crowdsalePurchases` array, then adds the purchase to the `invalidatedOrigPurchases` array. Finally, it emits a PurchaseInvalidated event. "
"""This function is restricted to the contract's creator only and prevents all token transfers."" "
"""Returns the number of allowance tokens for a given owner-spender pair."" "
This function is used to upgrade the balance of a specified address from one token contract to another by transferring the tokens to the new contract and updating the total supply. 
"""Returns the permission address of a specific item based on its kind and index."" "
"""A function that joins a community."" "
"""A function to transfer any specified amount of tokens from the contract to the owner."" "
"""Transfers tokens from balance to investBalance for a specified user."" "
"This function allows a sale agent (mintAgent) to mint new tokens for a specified address (to), with an external token amount and ether amount. It checks if the minting is not finished, if the caller is the mint agent, if the recipient has not been refunded already, adds the external token amount to total supply, ensures it does not exceed max supply, updates balances for the recipient, handles team-related operations, and emits Mint and Transfer events. "
"""Updates the pricing for messages if owner calls."" "
"""Returns whether or not a note exists at a given pitch and place."" "
"The function ""scanMany"" is a public onlyOwner function that grants beercoins to users who scanned bottle cap codes. It requires the length of 'users' and 'caps' arrays to be equal, iterates through each element in these arrays calling the 'scan' function with corresponding user and cap as arguments, and finally returns true. "
A function for batch transfers with different amounts to each address from the same account. 
This function is internal and it flushes the currently pending Ether to Croupier if there's any. 
"The function checks the registration status of a specified address and returns its white list state (Gold, Silver or None). "
This function creates an invitation for a user to sign in using their Ethereum address and signature. It ensures the signature is valid and that no pending invitations already exist for this address before creating the invitation. 
"""Calculates the profit by subtracting the threshold from the current balance."" "
"""A function to add an address to the blacklist by the owner."" "
The function allows the owner to set a presale rate during the crowdsale. It requires that the input value is greater than 0 and sets it as the new presale rate. 
This function allows the owner to update token information (name and symbol). 
"""The function drains the remaining tokens of the crowdsale to the TeamWallet account only for the owner."" "
The function checks whether a given sha256 hash has been registered before. 
"""Returns the name of a token."" "
"This function is a refund mechanism for the contract owner, allowing them to send Ether back to buyers if something goes wrong. "
"""Reverts transaction."" "
"""Allows the owner to update the Minimum required Wei."" "
"""Gets the purchase records for a given whitelisted address."" "
"""Returns the count of frozen cells for a given owner."" "
"""Burns all remaining tokens in the contract after sale has ended."" "
"""Transfers a token to any address."" "
"""Allows the current owner to grant control of the contract to another account."" "
"""Returns the balance of a specified owner's account."" "
This function commits dividends for a specified address by calculating the share of tokens owned and distributing them over time periods based on the dividend period. It then updates the balance in the wallet and resets the last dividend period. 
This function is used for allocating tokens to a specified beneficiary based on the stage and rate of EUR cents. It also handles presold and sale via fiat deposits. The function can only be called by the contract owner. 
"""Allows the current owner to transfer ownership to a new address."" "
"The function checks whether the sender is a manager. It iterates through an array of managers and returns true if the sender's address matches one in the array, otherwise it returns false. "
"""Returns the amount of tokens that can be purchased."" "
This function retrieves the addresses of owners who confirmed a transaction by providing their address. The result is an array containing only those addresses that have confirmed the transaction. 
"""Allocates tokens from the crowdsale contract to a specified address after the crowdsale."" "
"""A function to allow the contract's owner to withdraw all tokens from the contract."" "
"This function is public and only callable by the The AO. It requires a non-zero address as input, sets it as the new `taoFamilyAddress`, and assigns an instance of `TAOFamily` at that address to `_taoFamily`. "
The function sets the INNBC token address. It requires a non-null Ethereum address as input and can only be called by the owner of the contract. 
"""Gets the max between two uint params and returns result."" "
"""Sets the user's role globally."" "
"""Returns the number of addresses in a swap balances array."" "
"The function is a smart contract function that allows the owner to distribute Jcash tokens to specified addresses based on their value. It takes an array of addresses and values as input, checks if they are equal in length, updates token balances for each address, and finally returns true. "
"A function to update the costs of various types of visits, accessible only by the owner. "
"""Returns number of members in the contract."" "
"""This function allows the owner to transfer all Ether in the contract to a designated multisig wallet."" "
"This function is a public one named ""convertNums"" that takes an array of uint256 as input and performs some operations based on the sender's identity. It emits an event at the end of its execution. "
"""Returns the current total balance of tokens in the vault."" "
"This function is a public method named ""transfer"" that takes two parameters (_to and _value). It checks if the recipient address equals to the address of this contract. If so, it calls the ""swapForToken"" function with the value as an argument and returns true. Else, it requires (ensures) super's transfer method is executed with the same arguments and also returns true. "
"""Returns the total number of collections."" "
"""Function for updating token balances."" "
"""Checks if a day is in the list of locked days."" "
"""Checks HGame and returns arbToken from it, along with the lower 24 bits of HGame."" "
"""Returns whether a token is locked."" "
"""Sets the required amount for KYC in USD."" "
The function checks if a voter's account can be deregistered based on their last access time being more than 7 days ago. 
"""Function to add multiple addresses to the whitelist can only be called by the owner wallet address."" "
This function allows the current owner to transfer ownership to a new address while emitting a 'Transfer' event. 
"""Sets the member ID for a given member address."" "
"This function allows a user with level 3 root access to change the state of 'inMigrationPeriod' to false, effectively ending a migration period. "
This function allows a user to cancel their adoption request for a specific pet by providing the pet's ID and transferring the associated price back to them. 
"""Sets the minimum Ethereum required to invest and emits an event."" "
"This function sets the tradeability of an asset to a specified status (true or false), emits a TokenUpdateEvent with updated details about the asset. It is only callable by the owner and if the asset is valid and not splitted. "
"The function is a public, onlyOwner function that requires the ethFundDeposit to be non-zero and sends all its ETH to it. "
"The function calculates the bonus based on contribution date and adds it to the original amount. It has different bonuses for different time periods before the crowdsale start time, with longer periods providing less bonus. If no such period matches, the original amount is returned unchanged. "
"""Returns the amount of available (unsold) tokens."" "
"""Approves a specified account to spend up to a defined limit of the caller's funds."" "
This function allows the owner to burn (destroy) a specified amount of tokens from the caller's account. 
"""Function called when investment was made by a specific investor with an amount."" "
"""Creates a new deposit address for the caller and returns its address."" "
"""The function allows the contract's owner to drain a specified ERC20 token from an address."" "
"""Returns the index of a given Ethereum address."" "
"""Returns an integer value stored in a hash map."" "
"""A function to stop token minting and return a boolean indicating the operation's successful completion."" "
A function that changes the content data of a pixel if the sender is its owner. 
"""Returns the price of an order as determined by the ratio of buying quantity to selling quantity."" "
"""A function to check the amount of tokens an owner is allowed to a spender."" "
"""Refunds the investment if ICO is finished and soft cap has not been reached."" "
The function allows the owner to stop a crowdsale at any time. It sets the 'stopCrowdsale' variable to true and updates the 'wasCrowdsaleStoped' variable accordingly. 
"""Sells specified P3D tokens for Ether."" "
"""Returns true if a position with given id is closed."" "
"This function retrieves indices and balances of sellers for a specific user in auctions based on the provided parameters. It checks if there are any claimable tokens for the given seller in each auction, starting from the last N auctions (or all if N is zero). The function then returns the indices and balances of these auctions. "
"""Returns maximum amount of a specified maker token."" "
"""Requires low gas price and no input data, then calls the function `BuyHORSEtokens`."" "
"This function is a view public function named getSeasonInfo that takes an array of uint32 seasons as input, iterates over the array and populates two output arrays (matchTimes and results) with relevant information based on the input seasons. If a season number is zero or less, it breaks the loop and sets the length variable to the current index i. "
"""Updates the registered wallet address."" "
"This function is a public one named getSeed that requires the contract to be upgraded and the sender must be the next version before proceeding. It also checks if the round has been finalized and attempts to transfer the jackpot seed value to the next version. If any of these conditions are not met, an error message is returned. "
"""Allows users to sign up with their own address."" "
"""Function to change the house fee percent only if new value is less than current one."" "
"""Returns the balance of a token contract."" "
"This function allows investors to burn their tokens after the crowd sale has ended and before a soft cap is reached. It requires that the amount of tokens being burned is less than or equal to the investor's balance, subtracts this from the investor's balance, subtracts it from total supply, and emits a Transfer event with the address of the burner, zero address (indicating no recipient), and the amount burnt. "
Returns the storage location of the total token supply. 
"""Returns the count of token proxy contracts."" "
"""Returns the balance of tokens in the contract."" "
"""The function allows the owner to set a start time for pre-funding."" "
This function sets the `infoUrlPrefix` to a provided URL only if it is called by an owner of the smart contract. It returns a boolean indicating whether the operation was successful. 
"""Withdraws a specified amount of Snowflake balance from the caller's account to an external address."" "
"""A function that allows the owner to toggle whitelist filtering on or off. If it's active, it deactivates and sets a maximum participation amount of 30000 ether."" "
"""Returns the total token supply as a uint256."" "
"""Returns the token balance of a specified owner."" "
"""Triggers the sale finalizations process."" "
"""A function that shows the top winners of a contest after the contest has ended."" "
"""Function startMint is a public function that sets the minimum investment, minting rate and minting status for MTC."" "
"""Returns the minimum quorum required for proposal approval."" "
"The function triggers a minimum funding goal for a sale, but only the executor can do so. "
"""Returns the current stage of sale based on blockchain conditions."" "
"This function is a payout for dividend and unfreezes frozen accounts. It's only callable by the owner of the contract. The function transfers a percentage of the target's balance to the sender while adding an extra fee (5%). After that, it unfrozen the target account. "
The function allows the manager to update the exchange rate. It requires a non-zero value and can only be called by the manager. 
"The function receives approval for a certain amount of tokens, verifies the sender is the VRF address, transfers the approved tokens to this contract, and updates the number of claimed eggs based on the division of the token count by the cost per egg. "
"""Reverts the transaction."" "
"The function is a purchase of tokens for a specified beneficiary, but it always fails due to an explicit call to `revert()`. "
"""Returns the approved amount of tokens that can be transferred from owner to spender."" "
"The function places a bid if it is higher than the current highest bid or if it fulfills the lowest ask price condition. If conditions are met, it either transfers funds to the previous highest bidder or buys the piece and updates the state variables accordingly. Otherwise, it throws an exception. "
"""A function to get the total supply of tokens."" "
"""Returns number of sigs required for major wallet transactions."" "
The function checks if the crowdsale is open. 
The function sets the expiration date of a specific subscription entry (spid). It's accessible to the owner of the contract only. 
"""Upgrades the Evil Morty instance to a new contract at given address if it exists."" "
"""Gets the update time for a specific board and returns it in seconds."" "
"""Withdraws specified amount of Ether from contract to caller's account."" "
"""Sets the authorization status for a given operator-token holder pair."" "
"This function calculates the currently claimable amount for a given investor based on their balance, tokens claimed and time elapsed since last claim. If the current time is before freeze ends at, it returns 0. Otherwise, it calculates the maximum claimable amount considering the number of seconds passed from the last claim and the rate of token generation per second. The function then returns the minimum between maxTokensLeft and maxClaim. "
"""Transfers tokens to a specified address if not paused and account is not locked."" "
A function for purchasing a pixel in a promotional campaign with restrictions on ownership and text length. 
The function checks whether the address 'proposed' owns all cards identified by the array 'ids'. 
"The function checks if a time interval has passed since the last price update request. It compares the current time with the sum of the last update request and the maximum allowed interval, returning true if it's greater or equal to that value. "
"The function closes a contract if the sender is the PRE-TGE manager, otherwise it throws an error. The contract status is set to closed after this operation. "
"This function allows the owner of an ERC20 token to refund a participant's money if certain conditions are met. The function is named ""refund"" and takes an address parameter ""_participantAddress"". It checks for various conditions before transferring the balance back to the sender, cleans up the swap data, and triggers a callback function ""Refund()"". "
"This function allows users to buy bonds from the secondary market, ensuring that the bond has been issued and is not already redeemed. It also checks if a user can afford to pay for the bond and ensures the correct ownership of the bond. The sold event is triggered after successful transaction. "
"""Returns the total supply of tokens."" "
"This function retrieves a list of up to 10 ads from an array, starting from the given start index and returns their ids, ad types, expiries, and clients in separate arrays. If there are fewer than 10 ads left in the array after the start index, it will return all remaining ads. "
"""Returns the token balance of an account."" "
"""Sets the safe gas limit for Oraclize queries to a specified value."" "
"This function generates a checksum of the contents of an estate, including its ID and associated land IDs using Keccak-256 hash. "
This function calculates the number of eggs since the last hatch for a given address by taking into account the time elapsed and the amount of shrimps in the hatchery. It returns this value as a uint256. 
The function updates the details of an animal if called by its owner. 
The function is a public one that always reverts. 
A constructor function that initializes the contract with a certain supply of tokens and sets up two whitelists for transfers and burns. 
"This function is called when a player meets the snail requirement. It gives their earnings to the winner, pauses the game for 12 hours and resets the snail count of the sender. "
"""Deploys a new CDPer instance and sets the custom owner."" "
"""Withdraws ERC20 tokens from the contract."" "
"""Approves a spender for transfer of tokens."" "
"""Returns the number of bronze caps that have been scanned as a uint64."" "
This function calculates the fee pool share for a delegator and transcoder in an earnings pool. It takes into account whether the earnings pool has a separate transcoder fee pool or not. 
This function checks if a loan is considered defaulted based on its status and due time in the Engine contract. It returns true if the loan's status is lent and the due time plus seven days is greater than or equal to the current block timestamp. 
"""Returns the ID of the last token issued."" "
"""Updates the owner's sales agent permissions to a new address."" "
"""Returns the terms contract parameters of a given issuance."" "
"""The function 'resumeCrowdsale' can be called by the owner to unpause a paused crowdsale."" "
"""Returns a boolean indicating whether the crowdsale has started."" "
"This function transfers a bonus to the referrer of an investor if they are not the same person and if their investment is non-zero, then updates the referrer status for the sender. The bonus amount is calculated as 20% of the transferred value. "
"""Enables a method if called by the owner."" "
"""Sets the VIP rate if not finalized and greater than 0."" "
This function is used for purchasing SGDS tokens and emits a 'PurchaseSGDS' event. It allows only the owner to do so. 
A public payable function that accepts Ether transactions. 
"""Returns the last dividend period processed by a specified owner."" "
"""Returns the total supply of tokens."" "
"""Returns the current blockchain difficulty level."" "
A function that sends profits to game owners based on their hashes and profit amounts. It's accessible only by the contract owner or if the game is already started. 
"This function is a public buyTokens function that accepts an address parameter. It calculates token amounts based on the value sent with the transaction and processes the purchase accordingly. The function also includes validation, price calculation, balance transfer, and state updating steps. "
"""Owner can transfer out any accidentally sent ERC20 tokens as long as they are not the sale tokens."" "
"This function rewards the referrer from given amount of funds. It checks if the referrer's tokens are greater than or equal to a minimal stake. If so, it splits the funds into reward and taxed amounts, adds the reward to the referrer's ref_funds, emits an event, and returns the taxed funds. "
"""Converts a bytes32 value from MakerDAO's Medianizer contract into wei per USD rate."" "
"""Returns the number of unprocessed betting records."" "
"""Requires positive Ether transfer, checks if not stopped, adds transferred amount to totalWeiVolume and forwards it to targetContract."" "
"This function is used to register an Ethereum address and assign it a unique uint value, ensuring no duplicates are registered. If the address has already been registered, its assigned value is returned. Otherwise, a new value is generated based on the current length of the registry array and the address is added to the registry. "
"""Returns the total supply of tokens."" "
"""Function to add an address to the controllers, only callable by owner and checks if it's not already a controller before adding."" "
"""Returns the start timestamp."" "
The function checks if a specified address's funds are currently frozen. 
"This function generates a unique hash for the destination address and ""numtokens"", using the `keccak256` hashing algorithm. It is used to store the number of tokens reserved for a specific destination. "
"This function retrieves a gift with the given ID from an array and returns its properties (price and description). If the ID is out of range, it returns (0, """"). "
Transfers tokens from an approved account if conditions are met. 
"""Returns KYC state of a given address."" "
A function named emergencyERC20Drain that allows an admin or contract owner to drain a specified ERC20 token's balance and notify the system about this action. 
"The function checks if the remaining value is less than a specific amount and returns true if it is, otherwise it calls the parent's `hasClosed` method. "
"""Constant function that returns total tokens allocated so far."" "
This function allows the owner to withdraw tokens from an investor's balance if they are whitelisted and the sender is the token offering address. The function also ensures that the requested amount of tokens exists in the owner's balance before proceeding with the transaction. 
"""Only the contract owner can withdraw a specified ETH from the contract."" "
The function allows the contract's owner to reclaim any ERC20 tokens that were transferred into it. 
The function adds a list of addresses to the whitelist. 
"""Returns the level's price and availability by its array index."" "
Converts a string representation of an integer to its uint256 equivalent. 
"""Pauses a new instance of REBToken."" "
"""A function to withdraw some Ether from the contract's balance to the owner."" "
"""The function always fails and reverts."" "
"""This is an empty public function named 'FundContract'."" "
This function mints a new NFT and updates the necessary data structures based on the provided parameters. 
"The function is a public one that can only be called by the owner of the contract. It requires an amount to be less than or equal to the balance of the contract and then transfers this amount to another specified address (FundAddress). Afterwards, it triggers an event 'Funded' with the recipient address and the transferred amount as parameters. "
This function returns an array of addresses that are associated with the channel managers for each token in a smart contract. It is constant and does not alter any state. 
"""Returns how many wei an investor has invested in the contract."" "
"This function is used to freeze player accounts by setting a flag in the 'blackListFreezeTokenAccounts' mapping for the provided address '_freezeAddress'. The account will be frozen (_freeze == true) or unfrozen (_freeze == false), and the freezing time extends by 'blackListFreezeTime' seconds from the current block timestamp. "
"""A function to change the link of a property owned by the caller."" "
"""Allows admin to set registry exec id."" "
"""Adds an address to the whitelist."" "
"This function creates tokens for an investor who paid in ether based on their investment value and a bonus amount calculated from the same. The sum of the investment value and the bonus is then stored in memory and remembered for future use. Finally, the AID token contract mints these tokens to the investor's address. "
"""Returns the token price for a given period index."" "
"""Returns the number of live chickens for the caller's address."" "
"""Returns the balance of a specified owner's ERC-20 token."" "
"""Gets an owner by 0 indexed position."" "
"This function is a public method named refund that requires the caller's balance to be greater than the input 'value' plus a fee. It then deducts the fee from the value, subtracts this from the caller's balance and adds it to the owner's balance. The total supply of tokens decreases by the amount being transferred. Finally, it emits an event TokenPurchase with details about the transaction and transfers the remaining 'amount' to the sender. "
The function is a fallback function that only accepts ether from the eUSD contract. 
"""Function to calculate token price in Wei."" "
"""Function removes global constraint from avatar and returns a boolean indicating success."" "
"This function calculates the total price for minting a composition with given token IDs, taking into account their respective prices and applying a 5% discount. "
The function sets the admin status of an address to a specified value and emits an event. It requires that the new admin is not the zero address and that the current admin status does not match the new one being set. The function returns true after setting the admin status. 
This function calculates the total releasable balance for a given address by summing up all the releasable amounts from its vesting contracts. 
"This is a function named ""approve"" that takes two parameters (_spender and _value), and it returns a boolean value (success). It's part of an ERC20 compliant smart contract. "
"This function checks the status of both crowdsale and blocklord, returning variables related to raised funds, total amount, required amount, and whether the goal has been reached. "
"""Returns the avatar for a given proposal."" "
"This function allows the owner of a specific token (identified by _tokenId) to set its ""isRedeemed"" status to true. It requires that the caller be in the approvedAddressList and that the _tokenId is greater than STARTING_ASSET_BASE. The function then updates the corresponding CSCPreSaleItem's ""isRedeemed"" field to true and saves this updated item back into allPreSaleItems. "
"""Returns the address of the contract owner."" "
"""Approves another address to use a certain amount of tokens."" "
"""A function that buys tokens for a specified wallet."" "
"The function checks if the RTI's stake contract address equals its own address. If it does, it returns true. Otherwise, it throws an error. "
This function is a public onlyOwner function that requires an even number of elements in the _bits array and distributes tokens from one address to another based on pairs of addresses and amounts. It returns true if successful. 
"""A function to add free vineyards for existing plot holders."" "
"""Returns the number of investors."" "
"""Withdraws a specified amount of available tokens from the contract."" "
"""Reverts all ETH transactions."" "
"This function allows the owner to record a purchase made outside of Ethereum blockchain. It requires that the purchase has started and is not yet ended, checks if start date is set, gets bonus tier, records purchase, and emits an event for off-chain purchases. The function returns true after completion. "
"""Returns the remaining amount that can be transferred by a spender for an owner."" "
"""A function that changes the active state of an item class by its class id."" "
"""A function that triggers a purchase when not paused."" "
"This function is onlyOwner and whenNotPaused. It requires that grantBountySupply is not set, sets it to true, mints a certain amount of tokens to a specific address, and resets the remainingBountySupply to zero. "
"""A function that allows a user to send ether contributions."" "
"This function retrieves all registered auditors' addresses, their corresponding karmas and the owners of each record into three separate arrays. The number of records is determined by a variable 'numRecords'. "
"This function allows a user to sell tokens, ensuring that the transaction is valid and proceeds accordingly. It also handles exceptions by throwing if conditions are not met. The function returns total amount of wei sent. "
"""Function mints a specified number of tokens."" "
"""Converts a string to bytes32 by loading the first 32 bytes of the input string."" "
This function retrieves the number of dots from a subscription database for a specified provider and subscriber using an endpoint. 
"""Increases the 'weiAmount' by the amount of Ether sent to the function."" "
"This function allows the owner to mint tokens and send them to a specified address. It updates the balance of the recipient, total supply, and emits two transfer events. The function returns true upon successful execution. "
"This is a public function named ""changeVeredictum"" that accepts an address parameter and returns a boolean value. "
This function allows users to sell kilowatt-hours (KWHs) for Ether while ensuring price accuracy and gas reserves are maintained. 
"""Transfers ownership to a new address and destroys the contract."" "
"""This function allows the owner to withdraw all ether in the contract back to their wallet."" "
"""Only owner function to deliver tokens for ICO investors."" "
"""Transfers ERC20 tokens with controller callback."" "
"""A public constant function that fetches a record by its notarized data and returns the notarized data and timestamp."" "
"""Returns the contribution balance in ETH for a given owner."" "
"""A function that allows a developer to withdraw funds from the contract."" "
"""Returns current timestamp."" "
"This function retrieves ZTKCheck information for a given address and returns several details about the check such as account number, routing number, institution name, full name, amount, file path of the check, and fingerprint of the digital check. "
"""Sets the owner's BountyRegistry to a new contract."" "
"""Returns the refundable ETH balance of a given owner."" "
"""A function that transfers tokens to a specified address if the sender is allowed and returns true."" "
"""Enforces vesting requirement before transferring tokens."" "
"""Returns a hash of the string 'sale_tokens_unlocked'"" "
"""A function that adds a property for a user by an administrator."" "
"""Allows owner to set a specified address as a transfer manager in a locked-up period."" "
"""Returns the ETH cost of an order."" "
"""Function 'finalizeLiability' accepts parameters and returns a boolean."" "
The function is a public one that only the owner can call. It sets address lists for trueUSD contract. 
"This function allows only the owner to add a new controller, ensuring that it is not the zero address or the owner's own address. It also checks if the controller already exists in the list of controllers before adding it again. "
"This function is an external one called by contributors to refund payments if the crowdsale fails to reach a soft cap. It requires that the state of the contract equals FundState.CrowdsaleRefund and that the sender has made at least one contribution. Then it calculates the refund amount, resets the sender's contribution to zero, destroys all tokens held by the sender, transfers the refunded funds back to them, and logs a RefundContributor event with the sender's address, the refund amount, and the current time. "
"""Returns a boolean indicating whether a contractor proposal was ordered."" "
"This function calculates the bonus in percents for a specified sum of ETH. It first converts the ETH to USD, then checks different conditions based on the total USD value and returns corresponding bonuses. If none of the conditions are met, it returns 0. "
"""The function disables minting by setting 'mintingEnabled' to false."" "
"This function allows a player to withdraw tokens from their safe after the timelock period. It checks for valid token and player IDs, calculates the amount of tokens that can be withdrawn, transfers them to the player's address, updates safes and emits an event. "
"""Returns the current balance of the contract."" "
A managed utility token constructor function. 
"""Sets up roles for a new Sgame token by adding the new owner as both pauser and minter, removing the original caller from these roles."" "
"""Returns the number of contracts stored in the 'artworks' index."" "
"The function `getPrice` is a view function that checks the value of `loyaltyPart`. If it's true, it returns 1, otherwise it returns 8. "
"""Transfers all profit to the contract owner."" "
"""Returns the balance of tokens."" "
This function is a public one that sets the price for a specific pixel block. It requires a positive price and calls an internal function to set the price. 
"""Function checks if a SHA256 hash is registered."" "
"""Sets the value of 'currentPool' to a positive integer '_currentPool', which can only be done by the contract owner."" "
"""Sets the current funding round and its corresponding rate."" "
"""Checks if the contract is a core one."" "
"""Updates the current token price with given numerator and denominator."" "
The function checks whether the sale has been canceled based on certain conditions and updates the 'isCanceled' status accordingly. 
"""Withdraws funds from the contract only if the withdrawal time is after deposit time."" "
"""A function to start a migration process, only callable by the owner of the contract and only if it's currently running."" "
"""Internal function called when a crowdsale succeeds."" "
"""Returns the token address."" "
This function allows the contract owner to move to the next period of sales if the current period has started and a new one hasn't already begun. It also resets the token collection status for the new period. 
"This function is an internal view that counts the number of chickens owned by a specific user and returns it as a uint16. It iterates over all the elements in the 'chickens' array, compares each chicken's owner with the input address '_user', increments a counter if they match, and finally returns this count. "
"""Sets the price of an existing emoji if owned by the caller."" "
"""Sets the start date of the presale if it has not been set before."" "
This function deletes a phase from the 'phases' array at a specified index by shifting all subsequent elements one position to the left and reduces the array's length by 1. The admin can only call this function. 
"""Allows the owner or manager to replace the current manager."" "
"This function checks if a purchase is valid by ensuring the contract hasn't ended, checking allowance, and making sure the transaction occurs during a specific time period with a non-zero value. "
"This function allows the withdrawal of funds from a smart contract if the Initial Coin Offering (ICO) has ended and the soft cap has not been reached, provided that the caller's balance is greater than zero. The function then transfers all the available funds to the caller and returns true. "
"""Returns the current number of tokens in the contract."" "
"A function that compares two strings by their hashed values, ensuring they are the same length before comparison. "
"This function returns the amount of tokens frozen in a specific cell, the UNIX timestamp at which they will become available, and whether KYC verification is required to spend these tokens. "
This function calculates a bonus value based on the percentage of weiRaised to the cap and returns it. 
"""Returns true if the ETH fund in wei is greater than or equal to a minimum value."" "
"""The function 'beneficiary' is a constant public function returning an address."" "
"""Returns the number of outcomes as a uint8."" "
"""Unpauses the contract if it's paused and owner is calling."" "
"""Maps the seed to a value within an execution id's storage."" "
"This function is an internal Ethereum smart contract function that receives a donation in Ether and assigns the donor's rank based on their contribution. It then calculates the number of coins to send based on the amount received and sends these coins to the beneficiary address. The function also updates the backer's information, including the total amount of coins sent, the total wei received, and the user's rank. "
"The function checks if the token sale is closed before allowing a transfer from one address to another. If the sale is not closed, it returns false. Otherwise, it calls the superclass's `transferFrom` method with the given parameters. "
"This function is a view function that returns the price for a given block ID, initializing it to a constant value if not already set. "
"""Function checks if a given wallet address is an operation wallet."" "
"""Returns the owner's Ethereum address associated with a given signature."" "
"""Returns an array of token IDs owned by the specified address."" "
"""A function to change the exchange rate of a token."" "
"""Withdraws all tokens of a specified type to the contract owner."" "
"""Transfers tokens to another address if the sender is the owner of the bond."" "
The function checks if the given spender has enough allowance of owner more than a given amount. 
"""Returns whether the specified token is owned."" "
"This function is a public method named `transferTo` that transfers tokens from one address to another. It requires the sender to have sufficient balance and allowance for the transfer. If the sender is not the source of the tokens (i.e., they are approved by the token owner), it checks if the amount being transferred does not exceed their allowance. "
"""A function that can only be called by the contract's owner. If a certain time has passed, it sends all funds from the contract to its creator and then destroys itself."" "
"This function is an external one that allows a delegated token transfer and notification for a specified address with the use of a hash-based authentication scheme. It takes in parameters including sender's address, target receiver, amount to be transferred, additional data, max executor fee, nonce (randomly generated by client), signature, and requested executor fee. "
"""Checks if a contract is marked as trusted."" "
This function approves a certain address to spend tokens on behalf of the caller and then calls a method on that approved spender with specific data. 
"The function discontinues the bonus by subtracting the sum of token referral, bidder's bonus amount and already claimed tokens from MAX_TOKEN_REFERRAL. It then sets the bonus status to false. "
"""Checks if a given Ethereum address is frozen."" "
This function starts a migration process if it has not been started before. 
"""Wipes the balance of a blacklisted account by setting it to zero and subtracts its balance from totalSupply."" "
"""Receives payment/deposit from user and logs it."" "
"""A function that accepts two parameters and returns a boolean value."" "
"This function is a viewer that returns the ""dateFrom"" field of a specific proof associated with an address and a proof ID. "
"""Transfers ERC20 tokens from the maintainer's address to a specified destination."" "
"""Internal function that sets a new permission manager for an application's role."" "
"""Removes a burner role from an address."" "
"This function is an external, onlyOwner function that upgrades specific components (garage, portal gun, or spaceship) in a smart contract. It takes the index of the component and its new address as arguments. The function checks if the provided address has code by checking its size with extcodesize, and returns early if it doesn't. If the provided address is valid, the function assigns it to the corresponding instance variable based on the componentIndex argument. "
"""Sets a store to be used by the manager."" "
"This function is a hash of the string ""sale_start_time"". It's used to store and retrieve the start time of a crowdsale. The returned value is a keccak256 hash, which is a secure one-way hash function. "
"""Mints tokens for the owner and crowdsale participants."" "
Converts a hexadecimal string to bytes. 
"""Sets the gas price limit to a specified value."" "
"""Returns the number of available gas refunds in the pool."" "
"""Receives data from an on-chain provider."" "
This function sets an avatar for a given owner if no avatar was previously set. 
"Ensures that the purchase is valid by requiring a minimum wei amount and ensuring it does not exceed the maximum allowed wei amount for each beneficiary, while also extending the parent's behavior. "
"""Returns the ID of a given convert lot along with its owner's address and amount of Primordial tokens in it."" "
"""Allows owner to set new Monetha address."" "
"""This function allows funds to be sent to the contract only if the sender is the owner or a super contract."" "
"A standard crowdsale constructor that requires an ICO start time, presale times and rates, a wallet address, and creates a new token contract. "
"""Returns the unreleased balance of a given address."" "
"""Updates the pool address cap for tier 2."" "
"""A function named 'fuelContract' that is publicly accessible and can only be called by the owner of the contract."" "
"This function is a public member of the contract that only an owner can call. It mints time-based vesting tokens for a given beneficiary with specific parameters (start date, cliff period, and duration). The minted tokens are not transferable until the specified start date plus the cliff period has passed. "
"The function increases the contract's capacity by a percentage of ETH sent to it, and then emits an event with the new capacity. "
"""Function _cancelOrder is an internal function that cancels a published order. It can only be called by the seller of the order or the contract owner."" "
"This function allows a user to migrate a specified value from their balance to another contract (specified by the `migrationAgent`). The transaction must be finalized, the agent cannot be zero address, the value must be greater than zero and less or equal to the sender's balance. It then updates the balances of both the sender and the migration agent, subtracts the migrated amount from total supply, adds it to total migrated, and logs the transaction. "
"""A function that sets a minimum amount for an operation, only if the caller is the contract's owner and the new minimum is less than a maximum limit."" "
"""ReceiveClosePositionPayout function accepts various parameters and returns a boolean value."" "
This is an internal function that sets a permission for a specific entity-application pair with a role and parameters hash. It also triggers the SetPermission event. 
"""Returns the balance of an owner's account."" "
"This is a function named ""transfer"" that transfers a specified amount of tokens from the sender's balance to another address. It checks if the sender has enough balance and if the transfer amount is greater than zero before proceeding with the transaction. If all conditions are met, it updates both balances and emits a 'Transfer' event. "
"""Updates the availability of IOUs for purchase."" "
"""Updates token fee for approving a transfer."" "
"""Sets the rate if not finalized and greater than zero."" "
"This function is a public method named payAllBonuses that can only be called by the owner of the contract. It requires that the project has been closed, calculates the price per WPT for each ETH raised, mints tokens to beneficiaries based on their balance and deletes balances and beneficiary addresses after processing all data. "
"This function is an internal one named ""insertPlayer"" that takes in a single parameter (an address), checks if the number of players equals to the length of the 'players' array, and if so, increases the size of the array by 1. It then inserts the provided value into the next available index in the array. "
"""Transfers tokens from the caller's address to a specified address."" "
The function allows the owner to transfer external ERC20 tokens from one address to another within its own contract. 
This function allows a spender to transfer tokens from an owner while ensuring the total transfer amount includes a Jackpot reserving deposit. 
"The function adjusts the next tranche for a ratio of numbers. It requires two positive integers as input, sets them to be the new values of `trancheNumerator` and `trancheDenominator` respectively, and is only callable by the contract owner. "
The function `nextPriceOf` calculates the next price of a deed based on its current price. 
This function allows a user to pay their dividends by transferring the specified amount of tokens from the contract's balance to the user's address. 
"This function is a public one named setAffiliateRate that accepts two parameters (_level and _rate), checks if the caller is an owner, and if affiliates are enabled. It sets the affiliate rate for the given level to the provided rate and returns true. "
"""Returns the total number of eggs a player has, including those since their last hatching."" "
"""Transfers ownership of a token from one address to another."" "
"This function is used to ""burn"" tokens by subtracting a specified amount from the balance of a specific wallet and updating the total supply accordingly. The burned tokens are not sold in this context but are removed from circulation. "
"""Transfers the full balance of a token to its parent address."" "
"""Returns the current implementation address stored in a storage slot determined by 'implementationPosition'."" "
"""Internal function to clear current approval of a given unicorn ID."" "
"""This function allows the market creator to close the markets by transferring all remaining outcome tokens to them."" "
"""Reverts the transaction."" "
"This function is an internal one that pays dividends to a customer. It takes the amount of dividends and source description as parameters, calculates profit per share if token supply is greater than zero, then emits an event with the dividend amount, source description, customer address, and current time. "
"""Requires unicorn ownership and approval to transfer."" "
"""Returns the amount of DTH a teller has staked."" "
"""Function called by the owner to terminate contract."" "
This function retrieves the indices of all ticket numbers for a specified address in an array. 
"""The function allows the contract owner to send all ether in the contract to a specified address."" "
"This function allows the owner to remove an existing exchange entry from two arrays, 'exchangeInformation' and 'registeredExchanges'. It requires that the specified exchange (by address) actually exists in the array at the given index. If it does, it deletes this information from both arrays by shifting all subsequent entries back one position and reducing the length of 'registeredExchanges' by 1. "
"""Function sendTokensArray requires owner approval to transfer tokens to an array of addresses with corresponding amounts."" "
"""A function to set a new exchange rate for the contract, accessible only by the owner."" "
"""Returns the number of reserve tokens."" "
"""Updates exchange rates with given USD rate if called by the 'currencyUpdateAgent'."" "
"""Function checks if game is in waiting mode."" "
"""Increases the amount of weed in a specific district by a certain quantity."" "
"""Sets the required Kitten Coins for holding to receive rewards."" "
"This function allows an account to unlock its 2y locked tokens 2 years after the token launch date. It retrieves the balance of the sender from the `balancesLocked2Y` mapping, checks if it's greater than 0, updates the sender's balance in the mapping to 0 and decreases the total supply of locked tokens by the amount unlocked. Finally, it transfers the unlocked amount back to the sender using the token contract. "
"""Returns the number of leap years before a given year."" "
"This function is a public function named allocateEqual that only the owner can call. It takes an array of addresses (_beneficiaries) and an amount to distribute (_amounts). The function checks if the total amount to be distributed does not exceed the cap, ensures there are enough tokens in the contract balance for distribution, then transfers equal amounts of tokens to each beneficiary. "
"""Returns true if tokens raised are greater than or equal to the minimum goal."" "
"This function returns the data of an escrow with a given index from the `escrowLedger` array. It includes sender's signee address, whether the sender has signed, recipient's signee address, whether the recipient has signed, witness's signee address, whether the witness has signed and the block number when the escrow was created. "
"This function initializes a FairAuction with parameters including the funded address, start time in epoch format, duration in minutes, crowdsale cap on token, and contract address of reward token. It sets beneficiary to fundedAddress, deadline to startTime + (durationInMinutes * 1 minute), tokenReward to an instance of a token at contractAddressOfRewardToken, crowdsaleCap to capOnCrowdsale * 1 ether, and finalized to false. "
"""Refunds funds to the sender if not KYC approved."" "
The function sets the authorizer contract if the crowdsale hasn't started. It is only callable by the owner and requires that the crowdsale hasn't already started. 
"""Starts the crowdsale with given parameters if it has not started or stopped and is called by a manager."" "
"This function allows a user to purchase tokens with an ERC20 token within a specified timeframe and only if the correct token is used. It also ensures that the transaction doesn't exceed the remaining amount for sale. After successful execution, it emits a TokensPurchased event. "
"This function returns the information of a single user (ether and token amounts to be sent, and whether KYC is approved). "
This function allows the owner or partners to update their marital status only if both have previously voted. It then resets their voting status and saves a contract event with the updated marital status. 
"""Returns the ID of the owned active token exchange."" "
The function increases the approval for a spender by a certain value and returns whether it was successful or not. 
"The function ""registeredApps"" in the contract returns a hash of the sender and 'app_list'. "
"""Reverts all ETH transfers."" "
"""Distributes tokens to wallets based on provided lists of wallet addresses and values."" "
"This function retrieves an Associated TAO Setting by its ID and returns the associated TAO Setting Id, associated TAO Id, and setting Id. "
Updates the reserved Wei for withdrawal based on conditions and calculations. 
"""This function retrieves the owner's address of a specific hero from the DBZ."" "
A function that accepts external transactions and can receive Ether (ETH). 
"""Burns the remaining BBY owned by the contract minus locked tokens."" "
"""Returns the total number of snaps stored."" "
"""Creates a new instance of the token contract."" "
"This function is only callable by the owner of the contract and can be used to clean up after an ICO (Initial Coin Offering) has been completed, ensuring that it happens at least 60 days after the end time. It transfers all funds from the contract back to the owner's wallet. "
"""Returns the address of the contract owner."" "
This function allows the owner to burn a specified number of tokens from the sender's balance and decrease the total supply. 
This function calculates the number of tokens to be received based on the amount of WEI (Wether Units EIn) provided and the current stage's price. 
"""A function that can only be called by a designated developer and requires a specific time period to pass before it executes."" "
"""Function indicating commissioner auction cancellation."" "
"""A function to send tokens for bitcoin bakers and bounty."" "
"""Calculates the amount of royalties owed by a given account."" "
"""Disburses authorized payments based on an array of payment IDs."" "
A function that migrates a contract by admin with inputs and checks for various conditions using keccak256 hashes and balances of different tokens. It also handles gas fees and payment methods. 
"""Returns the manager for a given app and role."" "
"Transfers balance from token owner's account to ""to"" account if the sender has sufficient balance and allows zero value transfers. "
A function to transfer tokens from the contract owner's wallet to a specified address. It requires the recipient address not be null and the amount being transferred is non-zero. The token transfer must succeed for the transaction to proceed. 
This function calculates the expected number of tokens based on a given amount of funds. It applies a fee if specified and converts the remaining funds to tokens. 
"This function is used to remove an address from the whitelist, reset its maximum buy cap and refund any invested sum. It's only callable by the contract owner. "
This function sets the release time for a specified holder of an NFT and emits an event indicating this change. It requires ownership by the owner of the contract and that the new release time is in the future. The function returns true if successful. 
"A function to change the neighbour reward percentage is being defined as public and only accessible by primary users. It sets a uint value ""neighbourRewardPercentage"" in storage s with input parameter 'rewardPercentage' and triggers an event 'ChangedNeighbourReward'. "
"The function starts an auction with a specified duration and name, ensuring that it is only called by the owner. It sets the start time, end time, and name of the auction before returning success. "
"""Enforces transfer enabled requirement before transferring tokens."" "
This function is used to increase the bonus ownership of a user by sending Ether from the 'fundariaTokenBuyAddress' to their own address. 
The function checks if the provided hash and signature are valid for a bouncer role. 
"""Returns true if crowdsale is over."" "
"""Sets a new period for staking."" "
This function checks if the number of cards is correct based on a given game ID and that it was signed by the right entity. 
"The function burns a specified amount of VenusCoin tokens by subtracting the value from the caller's balance and total supply, then emits a Transfer event with the caller as the sender. The function is only callable by the contract owner and returns true upon completion. "
"""This function allows an admin to remove a contributor's address from the whitelist."" "
Transfers the unclaimed token amount for a given token and address to another account if conditions are met. 
"""Returns the specified entry in the Soulbook."" "
"""Removes an address from a specified role."" "
The function allows the current owner to transfer ownership to a new address. 
The function is a public one that buys tokens for the caller of the contract. 
"""Returns true if crowdsale has been completed."" "
"""Function pauses the crowdsale in case of any problems."" "
"""Allows users to withdraw their tokens."" "
"""Returns the locked tokens for a specified reason at a specific time."" "
"""Function allows owner to withdraw all ETH from contract."" "
Transfers a token from one owner to another while ensuring the correctness of ownership and approval. 
"The function checks if certain variables (transTimes, regularTransTime, minInvest, and rateSteps) are greater than zero. It returns a boolean indicating whether all these conditions are met. "
"""The function allows the owner to mint tokens for a specified address."" "
Transfers ownership of a property and resets their info. 
"""Allows the contract owner to destroy specified tokens."" "
"This function returns the next stage index if current stage's end date has passed, otherwise it returns the current stage index. "
"This function calculates the release amount based on a specific formula. It's public, viewable by everyone but doesn't modify any state, and returns an unsigned integer value. "
"This function is a manager approval process for transferring funds to an approved address. It checks if the action has been finalized, validates inputs, and ensures that only managers can vote. If conditions are met, it allows voting and triggers transfer of funds once enough votes have been gathered. "
"""A function to set the discount bonus for a mini game, which can only be called by an administrator."" "
"This function, ""redemptionCount"", is a constant public function that takes an Ethereum address as input and returns the number of redemptions made by this user as a uint64 data type. It ensures that the input address isn't zero before returning the length of the array tokenRedemptions at index _who. "
"""Function is an external function that calls _CalcDiv() for calculation of dividends."" "
"The function ""freezeAccounts"" is a public function that only the owner can call. It takes an array of addresses as input and freezes (or prevents from making any further transfers) for each address in the array. "
"""Reverts the transaction."" "
"This function is used for transferring tokens to a contributor's wallet if certain conditions are met. It checks the state of the sale, whether the wallet exists in storageContract, and if coins have been received by the contributor. Then it verifies if the pre-sale bonus has been received and unfreezes the refund period for pre-sale or all contributions. After that, it gets the contributor's ID and total coin amount from storageContract. Finally, it transfers the tokens to the contributor's wallet using coinContract and updates the status in storageContract if successful. "
"""Returns the next available debit nonce for a given wallet."" "
"The function `getLimit` calculates the remaining limit for a participant based on their current purchase and the number of blocks until reset. If no blocks are left, it returns the total limit; otherwise, it subtracts the participant's current purchase from the total limit. "
"""This is a private function that can only be called by the contract owner."" "
"""Updates economy parameters with new values."" "
"""Authorizes a user to access funds from a casino contract."" "
"""Checks if a given operator is approved by the given owner."" "
"""Reverts the transaction."" "
"""Returns the factory address for a given country."" "
"""Returns a string representing the current standing."" "
"""Returns a percentage of the prize fund amount."" "
"Tracks the contributions of a sender by storing their address and contribution value in arrays. If it's the first contribution, adds the sender to contributors array. "
"""Transfers 12.5 million dev tokens to a vesting wallet."" "
"""A function that transfers tokens from a Marketing Address to an investor."" "
This function retrieves a user query from the database using an ID and returns it as a string. 
"""Function to set the current stage of a campaign."" "
"""Sets the amount of gas allowed for token transfers."" "
"""Returns the current balance of the smart contract."" "
"""Returns the amount of WEI invested by a specific account."" "
"This function allows a holder to transfer tokens on behalf of another holder by reducing their allowance. It requires the sender's approval and checks if the amount is less than or equal to the sender's allowance before proceeding with the transfer. The function then updates the sender's allowance, triggers a 'Transfer' event, and calls an external 'xfer' function. "
"""Function 'claimMethodABI' is a constant public function that returns a string."" "
"""Internal function to clear current approval of a given token ID."" "
This function is used to send a payment from the manager of a specific Job in the contract to an evaluator using the transferFrom method on the DAI token contract. 
This function is an external view that returns a boolean array and address array based on the input uint parameter. It retrieves data from composition and composers arrays using the input pitch value. 
"""Returns the total committed amount."" "
"This function claims a free first card for an address that has not yet claimed one. It generates a random card and assigns it to the caller. If the user is a new user, their bonus card becomes non-tradable. The function then mints this card and allocates referral bonuses to the referrer. "
"""Returns the number of tokens minted by a specific sales agent."" "
"""Receives dividends from the caller and buys back in."" "
"""Admin can mint tokens for a beneficiary."" "
"""Updates the associated contract to a new address."" "
"""Sets minimum starting price for authors."" "
"""Sets the Ethereum price in USD."" "
"The function `whoBuy` is an external view function that takes a uint parameter and returns an address. It checks if the provided id is greater than zero, returning the associated bid's owner (address). If not, it defaults to returning the first bid's owner. "
"This function is an internal pure utility that returns the index of a given address in an array, or 0 if it's not found. "
"""Returns the user id associated to a wallet as an unsigned integer."" "
"""Returns the Ethereum balance of the contract."" "
"This function is a public minting method that requires the deployer's hash to be equal to the keccak256 hash of the caller's bytecode, and then mints tokens for the provided beneficiary address. It returns true upon successful execution. "
"The function ""getOwnerCount"" retrieves the number of wallet owners minus one from the given WalletData storage object. "
"A function to give tokens to other users, with restrictions based on the number of rounds and total tokens sold in each round. Returns a boolean indicating success. "
This function allows users to withdraw their own money if no softcap is reached. It checks whether the receivedEth is less than the softcap and then transfers any remaining balance back to the user's address. 
"""Returns true if crowdsale has raised at least the funding goal."" "
"""Updates token name and symbol."" "
"""Queues a game session for processing."" "
"""Sets the unlock status for a given allocation address to false, emits an event and returns true."" "
"This function calculates the total token amount based on ETH contribution in a presale state. In other states, it returns tokens for pre-sale and in presale state. "
"""Returns the percentage of the funding goal achieved."" "
"""Function to unfreeze an account from a frozen state."" "
"""Sets the bonus amount for a new user."" "
"""Reverts the transaction."" "
"This function is used to add a new distribution period in the Profiterole contract, setting its start date to the current time and copying the previous period's BMC days per day rate. It then increments the periods count and returns successfully. "
"The function changes the variable ""totalAllocatedTokens"" by a certain amount, but it can be called only by the contract owner. "
"""Distributes presold tokens and bonus tokens to investors."" "
"This function retrieves the counts of various buildings (buildings, houses, schools, hospitals, amusements) for a given city ID and active status. "
"""Sets the social multiplier to a given number if it is greater than or equal to 1, only by the contract owner."" "
"""Unpauses transfer by setting 'transferPaused' to false."" "
"The function returns the cumulative score and total ratings of a given address if they exist, otherwise it returns (0, 0). "
"""A function that sets the status of a property for a user. Only administrators can call this."" "
"""Checks if the current tier's cap has been reached."" "
"""Checks if a wallet exists for a given Ethereum account."" "
"The function ""getMaxOwners"" retrieves the maximum number of owners from a wallet data structure and returns it as an unsigned integer. "
"""Returns the balance of a specified owner."" "
"This function creates a new reference ID if the address has none and increases the reference ID counter. It then assigns this new ID to the sender's address and stores it in both mappings. The cut percentage is also stored for future use. Finally, it emits an event with the newly created refId and the sender's address. "
"""Returns true iff the assignments are closed and there are no restricted tokens left."" "
"This function is used for refunding BDD tokens and ETH from a smart contract if the ICO has not reached its minimum cap yet. It checks if enough time has passed (now > endTime), if total supply of BDDs is less than creation min cap, if the sender's balance in both BDD and ETH is greater than 0, transfers the balance to the sender, logs a refund event for the sender and amount transferred. "
"""Transfers MOO tokens to a specified address if trading has started."" "
"The function changes the dates of a crowdsale, ensuring that the new start time is before the end time. It allows only the owner to do this. "
This function encodes a string representation of an unsigned integer into bytes. It does this by converting each digit to its ASCII character equivalent and appending it to the output in reverse order. 
"""Records a deal cancellation reason with event parameters."" "
This function checks if the sender and receiver are not in the list of fund managers before transferring tokens from one address to another. It returns a boolean indicating whether the operation was successful or not. 
"This is a function named ""burn"" that allows the owner to remove tokens from an address's balance and update the total supply of tokens in the contract. It returns a boolean indicating whether the operation was successful or not. "
"""Returns the balance of a specified Ethereum address."" "
A function that safely adds two numbers and ensures the result is greater or equal to both inputs. 
"A function that allows airdropping of tokens to specified addresses with a certain amount and checks for non-zero receivers, positive amounts, valid balances, and lockups. It also updates the sender's balance and each receiver's balance after the airdrop. The function returns true upon successful execution. "
"This function parses an unsigned integer from a string in ASCII format. It iterates over the characters of the input string, checks if they are digits (between '0' and '9'), adds them to the result as integers multiplied by their position in the string, and moves on to the next digit with a base 10 multiplication. "
"""Returns the ERC20 token balance of a given address."" "
"""Approves a spender for transfer of tokens."" "
The function returns the owner of a specific ERC721 token. 
"""Adds a specified number of shares to an existing member."" "
A function to lock up accounts by setting Unix times for future unlocking. 
"This function retrieves monster statistics based on the given monster ID. It returns an array of uint8 with length 8, each element representing a statistic (0-7) for the monster with the provided ID. The base stats are stored and accessed using the _mID parameter. This allows only storing the monsterId and reducing gas usage during evolution processes. "
"""Transfers tokens from one address to another only if not paused and the sender is not locked."" "
"""Allows owner to update the month on the contract by emitting a 'MonthNumberIncremented' event and incrementing the 'monthNo' variable."" "
"""Sets approval for all pixels owned by the caller to be managed by a specified address."" "
"""Transfers the collected fees to the owner."" "
"""Requires positive Ether deposit from sender."" "
"This function withdraws a specified amount of money from the contract, distributing it among its owners based on their shares in the project. "
This function is only callable by the owner of this contract and starts a sale for contribution if certain conditions are met. 
"""A function that gets the fighter's information by tokenId and returns its combined strength."" "
"""Emits an event 'ReceivedTokens' with data of the sender and amount of Ether sent."" "
"""Function counts the number of asset events for a given item."" "
This function calculates the minimum amount to wager for a given number of spins. It also takes into account gas costs and Oracle fees. 
"""Returns the balance of a specified address."" "
"""Sets the 'promoted' status to true or false."" "
"""Concatenates two strings and returns the concatenated bytes."" "
"""Adds a new transaction to the transactions mapping and returns its ID."" "
"""Sets the airdrop number and updates remaining Lemon Tokens for dropping."" "
"""Emits a deposit event from the child contract."" "
"""Returns the name of the contract."" "
"This function calculates the fee amount based on an expected amount, taking into account a numerator and denominator for fees. The result is capped at `maxFees`. "
"""Returns the amount of Ether waiting to be sent for funding in the contract."" "
"""Returns the total supply of tokens."" "
"""Checks if total balance (fiat + ETH) is greater than or equal to the soft cap."" "
The function checks if a participant is allowed to contribute in the current tier based on their registered tier and the requested tier. 
"""The function 'finishMinting' is a public function that can be called by an owner of the contract. It does not accept any parameters and always returns 'false'."" "
"""Returns total supply of tokens."" "
"""Transfers ownership of a ticket to another address."" "
This function is a public one that returns a boolean value. It requires the sender of the message to be equal to 'setWallet'. The start time and end time are set respectively to 1533052800 and 1535731199. 
"""Removes addresses from the whitelist."" "
The function increases the value of a specific index in the 'snake' array to 1 followed by 10^16 and assigns the message sender as the owner of this snake. 
A function to change the agency owner's address. 
"""Removes an operator role from a specified address."" "
"""Receives approval for a certain value from an address for a specific token."" "
"""Returns an array of pixels owned by a given address."" "
"""Returns the total reward balance of a member."" "
"The function is an external, onlyOwner, and crowdsaleActive function that adds a list of addresses to the whitelist. "
"""Withdraws funds from the contract only by masters and emits a withdrawal event."" "
"""Returns the balance of a specified owner's account."" "
"""Transfers the contract's balance to the beneficiaryContract if it exists, otherwise reverts."" "
"""Withdraws ether from contract to two addresses, splitting the amount equally."" "
"This function checks the condition of `isDeferred[msg.sender]`, if true it calls `buyDeferredPresaleTokens(msg.sender)`. If not, it checks whether current time is before startTime and if so, it calls `buyPresaleTokens(msg.sender)`. Otherwise, it calls `buyTokens()`. "
"""Returns the total number of bets across all teams."" "
"""Returns the current hardcap for the given SaleState."" "
"""Views a security token offering by proposal index."" "
"""The function 'withdrawETH' can be used by the owner to send all ETH in the contract to their own address."" "
"""Sets the minimum team size for a function that can only be called by the contract owner."" "
"""Stores an image string and returns a numerical identifier."" "
"""Burns a specified amount of tokens from the caller's balance and decreases total supply."" "
"The function ""globalMinPurchaseAmt"" is a pure, internal Ethereum smart contract function that returns the hash of the string ""sale_min_purchase_amt"". "
"""Allows the owner to change the bonus amount."" "
"""A function to transfer a specified value to an address."" "
"""Converts CHF softcap to Wei."" "
"""Fetches user details by username from the directory."" "
"""Returns the name of the token as a string."" "
"""Allows owner to add an address for token transfer."" "
"""Enables owner to transfer funds from contract's vault to a specified wallet."" "
"This function calculates bonuses based on the status of an ICO and the current time, returning a bonus value. "
This function is an external one that requires the vending machine to be closed and the caller of the function must be the owner of the god. It sets the god ID to the provided value and emits a log event with the new god owner and ID. 
"""Adds a spender to the whitelist of spenders for approveAndCall."" "
"""Allows owner to force Ethereum rate update with specified delay."" "
A function that allows the owner of a specified entity to edit its active status and associated data. 
"""An external function that increases a position for a given position ID and various parameters. It returns the result of an internal implementation function."" "
"""Burns a specified amount of tokens."" "
"""Returns the commission ratio for direct offers."" "
"""Returns the withdrawal wallet address."" "
"This function is a multi-minting function that mints coins for multiple accounts. It requires the caller to be an administrator and ensures non-zero addresses and non-zero amounts are provided. The function then updates balances, total supply and triggers a transfer event for each account. "
"""Grants a voter access to the oracle with their public key."" "
"The function allows the owner to initiate a profit distribution round, setting the status of the token to ""Distributing"", and triggers redemption with the sent amount. "
"This function is a transfer method for an Ethereum smart contract that ensures tokens are not sent to address ""0x0"", prevents sending tokens directly to contracts, and updates the balance of the sender and recipient. It then triggers a 'Transfer' event with the details. The function returns true if successful. "
"This function is a public method that adds a new Name-TAO info with required parameters and returns a boolean indicating success. It uses the onlyFactory modifier to restrict access to the factory contract. The function checks for valid inputs, ensures uniqueness of the name, updates the internal ID lookup, encodes the name into a keccak256 hash, increments totalTAOs or totalNames based on typeId, and finally returns true. "
"This function returns the index of a tier based on the given block number, starting from the last tier and moving towards the first one. If no suitable tier is found (i.e., the block number is before the start or after the end), it returns zero. "
"This function calculates and returns a percentage rate based on the balance of the contract. It checks different conditions to determine which percent range to return, depending on the current balance. "
"This function is a public function named tokensale that requires a valid recipient address and the transaction value to be within a certain range (minContribAmount to maxContribAmount). It calculates the price of the tokens based on an external function getPrice(), converts the Ether sent into token units, checks if there are enough tokens in supply for the sale, updates balances, sends the ether to multisig or sec_addr address (depending on whether mainsaleTotalNumberTokenSold is greater than 1), and emits a TokenPurchase event. "
"""Returns the current balance of BBD tokens for the contract."" "
This function allows players to deposit a certain amount of crystals and receive rewards based on the time they have spent mining. It also updates the game state and player's share accordingly. 
"""Returns the chosen number."" "
"This function is an external view that returns the amount of tokens a participant has in a specified round. It takes as input the address of the participant and the round number, then it retrieves the corresponding Participant storage object from the ICO rounds array and finally returns the amount property of this Participant object. "
"This function is a purchase of genesis cats for an NFT marketplace. It requires ownership and active mode, checks if there are remaining genesis cats to be purchased, calculates the price based on the number of remaining cats, generates unique cat IDs, updates rescue order, balance, and adoption offers, then emits an event with new cat IDs. "
"The function is for stopping the sale when it has started and can only be called by the owner. It sets the current state to stopped, then triggers a 'SaleStopped' event. "
"""Sets an address as allowed to call a function."" "
"""A function that sets the 'advertising' variable to an empty string for whitelisted users."" "
"This function is an external view that returns a uint value. It adds the ETH balance of the last campaign's total to the totalCharity if the campaign has not been finalized, otherwise it simply returns the current totalCharity. "
"This function is used to add a dedicatory text (wording) to a specific NFT (tokenID), which can only be done by the owner of that NFT. The added text must not already exist for this operation. "
"The function is a public one that can be called by an owner of the contract, transferring ownership of tokens to a new owner. "
"This function is used to start a crowdsale with the specified token and admin address, ensuring that the balance of the contract matches a specific amount (510000000e18), then changing the state to 'Started'. "
"""Returns the number of deposits made by a user."" "
"""Checks if maximum goal amount has been reached."" "
Creates a fighter with given attributes and emits a FighterCreated event. 
"""Forbids a player from claiming all past rewards."" "
"""Returns an array of community logic contract addresses."" "
"The function checks whether the user's purchase meets or exceeds a minimum amount based on if main sale is running, pre-sale is running, or neither. "
"This function allows a user to transfer a certain value to another contract (only if the recipient is a contract), while also executing a specified function code on the target contract. It requires that the sender has enough balance and that the recipient address is a valid contract, then updates balances accordingly, executes the fallback function of the receiver contract with the sender's address, value and code as arguments, emits a 'Transfer' event, and returns true if all operations are successful. "
"This is a payable function for taking prize in an Ethereum smart contract. It checks if the message value is zero, game state and winner are not set, and that the sender has deposited either into Bears or Bulls pots. If they have, it calculates their prize based on the winning pot (Bears or Bulls), transfers the winnings to them, and possibly transfers CBC tokens from other contracts if applicable. It also checks for a special condition where if the sender is the last hero, it resets the game state and transfers the jackpot to the sender. "
"""Returns the balance of a specific owner's account."" "
"""Transfers tokens from one address to another with allowance check."" "
"""Returns the amount of tokens delegated to a spender by an owner."" "
"""A function that sets allowed tokens for a spender from a sender to a recipient with a certain value."" "
"The function `queryToken` is used to fetch the price and last deal time of a specific GDC (Greedy Digital Coin) token. It takes in a uint256 parameter (_tokenId), fetches the corresponding TokenGDC from the stTokens mapping, assigns its price and last_deal_time to return values, and returns them. "
This function allows a user with super privileges to permanently own a company if they are the current owner and the company is on sale. 
"""Exchanges tokens between users."" "
"This function retrieves a data request with the specified ID and logs it using the requested ID, whether or not it's initialized, the URL of the data, and the number of data points. "
"This function shows a player's safe by address and returns three values. It requires the player ID to be greater than zero, otherwise it throws an error message ""showPlayerSafeByAddress wrong"". The function then calls another function showPlayerSafeById with the player ID and token ID as arguments. "
"This function is a method for an exchange contract that allows users to take orders. It requires the sender of the transaction to be the owner of the Fund contract and it cannot be in shutdown state. The order includes maker and taker assets, maximum quantities for both, and fills for both. After verification, the function executes the fill by approving the necessary tokens and then updates the order hooks. "
"This function is a public method that only the owner can call. It subtracts a certain value from the sender's balance and total supply, then emits an event for recycling of tokens. The function returns true after these operations. "
"""Returns the number of tokens owned by a specified address."" "
A public payable function that allows ETH transactions. 
"""Transfers a specified number of tokens from the caller's account to another address."" "
"Manages referrers by calculating unrecorded referrals, updating total referrals if any exist, and resetting the round last referred if a new round has started. "
This function allows the current owner to transfer ownership and account balance to a new address. It also emits a 'Transfer' event with details about the transaction. 
"""This function allows the owner to pause or unpause the contract."" "
The function finalises the ICO by transferring remaining tokens to the contributor's address and deactivating token sale. 
"""Withdraws funds from the contract balance to a specified address and logs the transaction."" "
The function devFee calculates a fee from the given amount based on a 4% rate using safe math operations. 
This function requires that the current time is less than or equal to an endTime. It then transfers the deposit to a parent contract and updates a bet on teams in another contract. 
"""Returns the count of markets."" "
This function allows a spender to spend from an owner's allowance. 
"""Transfers a specified amount of balance from the caller's account to another."" "
"This function is named ""amountSell"" and it takes one parameter ""_id"". It returns a uint value representing the amount of tokens offered for sale based on the given _id. If _id > 0, it returns the amount from asks[_id]. Otherwise, it returns the amount from the first ask. "
"""A function to transfer tokens from the caller's address to a specified one."" "
This is a Solidity function that grants tokens to the caller if they have waited for their time lock and mints additional tokens based on their bonus. It returns `true` upon completion. 
This function retrieves the purchase limit (cap.amount) and its duration (cap.duration). 
"""Lets the owner set the token address."" "
"""Returns the number of blocks since the core contract was deployed."" "
"""Function checks if the provided proposal code matches."" "
"This function is a public function named distributeToken that only the owner can call. It takes two arrays (_addresses and _amount) as parameters. The function checks if the length of both arrays are equal. If they are, it then iterates over each element in the array, calculates the token amount to be transferred by multiplying the corresponding value from the _amount array with 10^18 (the decimal point for ERC20 tokens), and transfers this amount of tokens to the address specified by the corresponding index in the _addresses array. "
"""Only the owner can add up to 150 unique non-zero addresses from an array of addresses into a mapping, preventing gas limit max out and DoS attacks."" "
"""Function to withdraw collateral for a specific loan by a borrower."" "
"""Function to get balance of an owner's Ethereum address."" "
"""Enables or disables token transfers based on a boolean input."" "
"""Sets the exchange rate between ETH and EUR for a given owner-only function."" "
"""Charges a fee in protocol tokens."" "
"""Only owner is allowed to call this function."" "
"""Function to get the total token supply."" "
The function is a public owner-only function that sets the 'mintingFinished' variable to true and emits an event. 
"This function allows a crowdfund to transfer tokens from its balance to another address. It requires the amount to be transferred and the recipient's address, checks if there are enough funds in the crowdfund's balance, decrements the crowdfund's balance by the specified amount, adds the same amount to the recipient's balance, and emits a Transfer event with zero sender address. "
"""Returns the dividends of the current contract."" "
"""Sets the new conversion rate if it is greater than zero."" "
"This function finalizes a token transfer between two parties based on the provided state. It checks if total value matches bonded value and then transfers balances of both parties to their respective addresses. If any of these operations fail, it throws an error message. "
"This function is an internal view method that calculates discount tokens amount based on the provided ETH amount and a discount rate. It requires non-zero ETH input, multiplies it by the discount rate to get the discounted token amount, and returns this value. "
"""Returns the minimum balance required for maintenance."" "
"""Returns the maximum total supply of tokens."" "
"""Admin function to add funds to the jackpot."" "
Updates the current bid price according to the rules. 
"This function calculates the remaining blocks left in a stage of TGR (Time-Based Rewards). It checks if TGR is live, then calculates the current stage and returns the number of blocks left in the next stage. If TGR isn't live, it returns -1. "
This function updates the node status based on the sum of its children's deposits and a series of thresholds. 
"""Returns true if crowdsale event is ended or token cap is reached."" "
"This function is a public method named ""ethWithdraw"" that can only be called by the admin of this contract. It requires that there be some balance in the contract (i.e., it must not be empty), then sends all available ether to an 'ethWallet' address, resets the currentBalance to 0 and pays out the withdrawal amount to the ethWallet. "
"""Sets a new blind auctions contract for the God."" "
"This function allows a user to send tokens to another contract while passing the transaction data to it for processing. It checks if the recipient is a contract and ensures that the sender has enough balance to cover the transfer amount. The function then updates balances, calls the NSPReceiver's fallback function with transaction details, triggers a 'Transfer' event, and returns true upon successful execution. "
"""An internal function named _forwardFunds that doesn't accept any arguments and does not return anything."" "
A function named TokenTimelock that initializes an ERC20Basic token with a specified release time for the token claim. 
"This function allows a user to withdraw their funds after the deadline, but only if they meet certain conditions. The function also sends back any ether remaining in the contract if it did not reach its goal. "
"""Checks if ACL allows role."" "
"""Sets the upgrade agent if sender is the upgrade master and the agent address is not null, checks if an upgrade can be performed, sets the upgrade agent, verifies its original supply equals total supply, and triggers an event."" "
"The function locks the vault, emits a 'locked' event and sets timelock for team and community reserve wallets based on block timestamp plus other time lock duration. "
"""A function that sets the minimum investment amount for a project."" "
"""Function to pause ICO sets ICO status to Paused."" "
"""Updates the current generation to a new value."" "
"""Sets the TGE to pass agent when sale is finished."" "
"The function requires sender to be either the owner or minter. It checks if _percent is greater than or equal to zero and then sets currentBonus as safeAdd of 100 and _percent. Finally, it emits an event with a message ""New bonus is"" and _percent. "
"This function calculates a fee for a given transfer based on the balance of special tokens held by the sender, and returns this calculated fee. "
This function views the current price of tokens based on different steps and conditions. 
"""Returns the total number of burnt tokens."" "
"""The function 'remainOfStage' takes an Ethereum address and a uint as input parameters. It is marked as external, view, and returns a uint256."" "
"""A public payable function named depositToBank."" "
"""Rejects all ERC23 compatible tokens."" "
"""A function to remove addresses from the whitelist, only callable by the owner of the list."" "
"""Returns the combined total supply of DRP and DRPU tokens."" "
This function returns an array of transaction IDs based on a defined range and status (pending or executed). 
This function allows a qualified crowdsale partner to purchase Star Tokens with consideration for the CNY-ETH rate and commission fee. 
"""Returns the current price based on whether a campaign is active or not."" "
A function to map many user IDs to many addresses for a specific authority only. 
"""Updates game settings with validation checks for range and battle rounds."" "
"This function retrieves the details of a specific contract and version from storage, including its version string, status, bug level, implementation address, audit status, and time added. "
This function sets the variables related to the Token. 
"""Logs out a user by freezing their account."" "
"This function allows the owner or manager to send tokens to a specified address. It updates the phase and checks for sufficient balance before transferring coins. If all coins are sent, it also finalizes the ICO process. "
"This function is an external transfer method for a token contract that checks if the transaction is allowed, ensures valid inputs, updates balances, and calls a fallback function in the receiving contract. It then emits a 'Transfer' event and returns true. "
"This function retrieves fashion attributes for a given token ID, returning an array of 12 uint16 values. "
"""Returns an array with the topics for a crowdsale configuration event."" "
"The function checks if the current time is between the start and end times of a presale, and if the total amount raised during the presale has not reached a hard cap. It returns true or false accordingly. "
"""A function that takes in a uint256 value and returns a uint256."" "
"This function checks if the provided address points to a smart contract. It does this by using inline assembly to get the size of the code at that address (extcodesize), and then returns true if it's greater than zero, indicating there is some code present. "
"This is a view function named influenceByToken that takes in a uint256 parameter and returns a uint256 value. It interacts with the tavernContract to get data about the tokenId passed as argument, applies an algorithm on these data (influenceAlgorithm) and returns the result. "
"""Returns true if the game is not in waiting and stopped mode."" "
"""Transfers Reporter tokens to a specified address once trading has started and the contract is not paused."" "
The function `listTokens` is used to retrieve a list of all CryptoBeasties token IDs held in the Storage Contract. It returns an array of uint256 values. 
"This function is starting three events (r0, r1, and r2). "
"""Transfers a specified amount of ether to a given account."" "
"This function is an external one that allows a user to redeem their warrant by providing the sender's address and the value of the warrant. It checks if the caller is the NATEE_CONTRACT, ensures they have enough balance, subtracts the value from the sender's balance, updates totalSupply and totalRedeem, and emits a 'Transfer' event with the sender's address as the originator and zero as the recipient. It also emits a 'RedeemWarrant' event. "
"This function performs a high and low multiplication of two unsigned integers, with the aim to optimize for gas costs. It divides each input into its high and low parts (each 128 bits), multiplies these separately, then combines the results. The function is marked as ""pure"" and ""internal"". "
This function transfers a specific amount of tokens from one address to another while updating the sender's allowance. It returns a boolean indicating success. 
"""Locks a contract by setting 'locked' to true and returning true."" "
This function updates multiple contracts (MCs) by iterating through a loop and calling the 'updateMC' function for each index from 0 to 'maxNumMC'. The loop only executes if 'numMCApplied' is not zero. 
"""This function calculates the unpaid percentage of a deposit."" "
"""Initializes the contract with a constructor that sets the owner to the message sender."" "
The function allows the contract's owner to withdraw a specified amount of ETH from the contract. 
This function creates a specified number of ChildDeposit contracts and emits an event for each one. It can only be called by the deposit creator or master. 
This function is a contract owner-only function that adds an address to the token fallback white list if it's a smart contract. 
"The function isReady() checks if the registry is ready by verifying that totalStores > 0, manager != 0x0, claimer != 0x0 and the contract isn't currently paused. "
"This function, AuthEnd(), is a public function that returns a boolean. It requires the sender to have a valid safe key (checked using 'safeKeys[msg.sender]'). Then it iterates over an array of sign keys ('signKeys') and sets each one to false. The count and end variables are reset to 0, and lastSafeKey is set to 0x0. Finally, the function returns true. "
The function is a public onlyOwner function named terminateContract that transfers all tokens held by the contract to its owner and then destroys the contract. 
"""Allows merchants or Monetha to initiate exchange of funds by withdrawing funds to the deposit address."" "
"This function is a public function that requires the sender to send at least `minContribute` amount of ether and checks if the current time is after the pre-sale start date. It also ensures that the sale stage isn't paused or ICO has ended, and that the sender sent more than 0 ether. The function then calculates how many tokens should be minted based on the value sent by the sender, checks if this amount of tokens is greater than 0, updates the balance of the sender and total supply, ensures that the total supply doesn't exceed the cap plus company reserve, emits a transfer event, sends the remaining ether to the owner, and finally sends any received tokens back to the sender. "
This function retrieves the current price of a specific Video Game Item. 
"""Rewards participants with tokens from the current round."" "
"""Returns the total number of contributions made by a sender."" "
"The function transfers the contract's balance to its owner if it is greater than a certain value (oraclizeBalance), otherwise, it transfers all remaining balance to the owner. The transferred amount is set to zero after being used. "
This function updates the purchasing state of a contract by adding the token amount to the `soldTokens` variable based on the provided Ether (Wei) amount. The updated state is then sent to the beneficiary address. 
"""Returns an array of token IDs that can be transferred."" "
"""Changes the owner of the contract to a new address."" "
"The function changes the scientist for a given element with a specified token ID and new scientist ID, ensuring that only the CEO can perform this action. The new scientist is added to the existing one by adding 'scientistSTART' to the provided _scientistId. "
"A function named ""changeRate"" that changes the exchange rate of ether to tokens only by the owner and returns a boolean value. "
"""Adds a specified amount to the locked balance of an account and increases the total supply."" "
"""Returns whether the function is executed."" "
The function retrieves the balance of a specified owner in Beercoin. 
"""Returns current dividends including referral bonus."" "
"""Returns the end time of the last bonus in a data structure."" "
"This function is used by the contract creator to update details of a DBZ hero, including name, owner address, new DBZ hero owner address, and current level. "
"This function is a private method named removePool that only the owner can call. It removes an address from the 'pools' array if it exists and belongs to the 'pools'. The removed pool is replaced with the last element in the array, reducing the length of the array by 1. "
